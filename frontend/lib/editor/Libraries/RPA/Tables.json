{
  "specversion": 1,
  "name": "RPA.Tables",
  "doc": "<div class=\"document\">\n<p><cite>Tables</cite> is a library for manipulating tabular data inside Robot Framework.</p>\n<p>It can import data from various sources and apply different operations to it.\nCommon use-cases are reading and writing CSV files, inspecting files in\ndirectories, or running tasks using existing Excel data.</p>\n<p><strong>Import types</strong></p>\n<p>The data a table can be created from can be of two main types:</p>\n<ol class=\"arabic simple\">\n<li>An iterable of individual rows, like a list of lists, or list of dictionaries</li>\n<li>A dictionary of columns, where each dictionary value is a list of values</li>\n</ol>\n<p>For instance, these two input values:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">58</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">67</span><span class=\"p\">},</span><span class=\"w\">\n</span><span class=\"p\">]</span><span class=\"w\">\n\n</span><span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span>  <span class=\"p\">[</span>    <span class=\"mi\">58</span><span class=\"p\">,</span>     <span class=\"mi\">22</span><span class=\"p\">,</span>     <span class=\"mi\">67</span><span class=\"p\">],</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<p>Would both result in the following table:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"39%\" />\n<col width=\"33%\" />\n<col width=\"28%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Index</th>\n<th class=\"head\">Name</th>\n<th class=\"head\">Age</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>0</td>\n<td>Mark</td>\n<td>58</td>\n</tr>\n<tr><td>1</td>\n<td>John</td>\n<td>22</td>\n</tr>\n<tr><td>2</td>\n<td>Adam</td>\n<td>67</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Indexing columns and rows</strong></p>\n<p>Columns can be referred to in two ways: either with a unique string\nname or their position as an integer. Columns can be named either when\nthe table is created, or they can be (re)named dynamically with keywords.\nThe integer position can always be used, and it starts from zero.</p>\n<p>For instance, a table with columns &quot;Name&quot;, &quot;Age&quot;, and &quot;Address&quot; would\nallow referring to the &quot;Age&quot; column with either the name &quot;Age&quot; or the\nnumber 1.</p>\n<p>Rows do not have a name, but instead only have an integer index. This\nindex also starts from zero. Keywords where rows are indexed also support\nnegative values, which start counting backwards from the end.</p>\n<p>For instance, in a table with five rows, the first row could be referred\nto with the number 0. The last row could be accessed with either 4 or\n-1.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>The <cite>Tables</cite> library can load tabular data from various other libraries\nand manipulate it inside Robot Framework.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Files to Table</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">List files in directory</span><span class=\"p\">    ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create table</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}\n    </span><span class=\"nf\">Filter table by column</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">size</span><span class=\"p\">  </span><span class=\"s\">&gt;=</span><span class=\"p\">  ${</span><span class=\"nv\">1024</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">    ${</span><span class=\"nv\">file</span><span class=\"p\">}</span><span class=\"s\">[name]</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Write table to CSV</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    ${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">files.csv</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library is also available directly through Python, where it\nis easier to handle multiple different tables or do more bespoke\nmanipulation operations.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Tables</span> <span class=\"kn\">import</span> <span class=\"n\">Tables</span><span class=\"w\">\n\n</span><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">read_table_from_csv</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;orders.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;product&quot;</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">group_table_by_column</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">customer</span> <span class=\"ow\">in</span> <span class=\"n\">customers</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">customer</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"n\">add_cart</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">make_order</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:10:09",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
  "lineno": 882,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Add Table Column",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        },
        {
          "name": "values",
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "values: Any | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Append a column to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of new column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) for new column</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, one for each row, or\none single value that is set for all rows.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Add empty column\nAdd table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n\n</span><span class=\"c\"># Add empty column with name\nAdd table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">name=Home Address</span><span class=\"p\">\n\n</span><span class=\"c\"># Add new column where every every row has the same value\nAdd table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">name=TOS</span><span class=\"p\">    </span><span class=\"c\">values=${FALSE}</span><span class=\"p\">\n\n</span><span class=\"c\"># Add new column where every row has a unique value\n${is_first}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">    </span><span class=\"c\">${TRUE}</span><span class=\"p\">    </span><span class=\"c\">${FALSE}</span><span class=\"p\">    </span><span class=\"c\">${FALSE}</span><span class=\"p\">\n</span><span class=\"c\">Add table column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">name=IsFirst</span><span class=\"p\">    </span><span class=\"c\">values=${is_first}</span>\n</pre>\n</div>\n",
      "shortdoc": "Append a column to a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1238
    },
    {
      "name": "Add Table Row",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "values",
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "values: Any | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Append rows to a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) for new row</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.</p>\n<p>It can also be a single value that is set for all columns,\nwhich is <tt class=\"docutils literal\">None</tt> by default.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Add empty row\nAdd table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n\n</span><span class=\"c\"># Add row where every column has the same value\nAdd table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">Unknown</span><span class=\"p\">\n\n</span><span class=\"c\"># Add values per column\n${values}=</span><span class=\"p\">    </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">Username=Mark</span><span class=\"p\">    </span><span class=\"c\">Mail=mark&#64;robocorp.com</span><span class=\"p\">\n</span><span class=\"c\">Add table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">${values}</span>\n</pre>\n</div>\n",
      "shortdoc": "Append rows to a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1270
    },
    {
      "name": "Clear Table",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Clear table in-place, but keep columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to clear</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Clear table</span><span class=\"p\">    </span><span class=\"c\">${table}</span>\n</pre>\n</div>\n",
      "shortdoc": "Clear table in-place, but keep columns.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1075
    },
    {
      "name": "Copy Table",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Make a copy of a table object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to copy</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Table object</td>\n</tr>\n</tbody>\n</table>\n<p>${table_copy}=    Copy table    ${table}</p>\n</div>\n",
      "shortdoc": "Make a copy of a table object.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1064
    },
    {
      "name": "Create Table",
      "args": [
        {
          "name": "data",
          "types": [
            "Dict[int | str, Dict | List | Tuple | NamedTuple | set]",
            "List[Dict | List | Tuple | NamedTuple | set]",
            "Table",
            "None"
          ],
          "typedocs": {
            "Dict[int | str, Dict | List | Tuple | NamedTuple | set]": "dictionary",
            "List[Dict | List | Tuple | NamedTuple | set]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "data: Dict[int | str, Dict | List | Tuple | NamedTuple | set] | List[Dict | List | Tuple | NamedTuple | set] | Table | None = None"
        },
        {
          "name": "trim",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "trim: bool = False"
        },
        {
          "name": "columns",
          "types": [
            "List[str]",
            "None"
          ],
          "typedocs": {
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "columns: List[str] | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create Table object from data.</p>\n<p>Data can be a combination of various iterable containers, e.g.\nlist of lists, list of dicts, dict of lists.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param data:</th><td class=\"field-body\">Source data for table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">Remove all empty rows from the end of the worksheet,\ndefault <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">Names of columns (optional)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Table object</td>\n</tr>\n</tbody>\n</table>\n<p>See the main library documentation for more information about\nsupported data types.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Create a new table using a Dictionary of Lists\n# Because of the dictionary keys the column names will be automatically set\n&#64;{Table_Data_name}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">Mark</span><span class=\"p\">    </span><span class=\"c\">John</span><span class=\"p\">    </span><span class=\"c\">Amy</span><span class=\"p\">\n</span><span class=\"c\">&#64;{Table_Data_age}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">${58}</span><span class=\"p\">    </span><span class=\"c\">${22}</span><span class=\"p\">    </span><span class=\"c\">${67}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{Table_Data}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name=${Table_Data_name}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">age=${Table_Data_age}</span><span class=\"p\">\n</span><span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Create Table</span><span class=\"p\">    </span><span class=\"c\">${Table_Data}</span>\n</pre>\n</div>\n",
      "shortdoc": "Create Table object from data.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 997
    },
    {
      "name": "Export Table",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "with_index",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "with_index: bool = False"
        },
        {
          "name": "as_list",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_list: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Convert a table object into standard Python containers.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to convert to dict</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_index:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Include index in values</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Export data as list instead of dict</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">A List or Dictionary that represents the table</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${orders}=</span><span class=\"p\">       </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Sort table by column</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">CustomerId</span><span class=\"p\">\n</span><span class=\"c\">${export}=</span><span class=\"p\">       </span><span class=\"c\">Export table</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">\n</span><span class=\"c\"># The following keyword expects a dictionary:\nWrite as JSON</span><span class=\"p\">    </span><span class=\"c\">${export}</span>\n</pre>\n</div>\n",
      "shortdoc": "Convert a table object into standard Python containers.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1038
    },
    {
      "name": "Filter Empty Rows",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove all rows from a table which have only <tt class=\"docutils literal\">None</tt> values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n</tbody>\n</table>\n<p>The filtering will be done in-place.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Filter empty rows</span><span class=\"p\">    </span><span class=\"c\">${table}</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove all rows from a table which have only ``None`` values.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1785
    },
    {
      "name": "Filter Table By Column",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "operator",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "operator: str"
        },
        {
          "name": "value",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove all rows where column values don't match the\ngiven condition.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to filter with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">Filtering operator, e.g. &gt;, &lt;, ==, contains</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value to compare column to (using operator)</td>\n</tr>\n</tbody>\n</table>\n<p>See the keyword <tt class=\"docutils literal\">Find table rows</tt> for all supported operators\nand their descriptions.</p>\n<p>The filtering will be done in-place.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Only accept prices that are non-zero\nFilter table by column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">price</span><span class=\"p\">  </span><span class=\"c\">!=</span><span class=\"p\">  </span><span class=\"c\">${0}</span><span class=\"p\">\n\n</span><span class=\"c\"># Remove uwnanted product types\n&#64;{types}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">    </span><span class=\"c\">Unknown</span><span class=\"p\">    </span><span class=\"c\">Removed</span><span class=\"p\">\n</span><span class=\"c\">Filter table by column</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">product_type</span><span class=\"p\">  </span><span class=\"c\">not in</span><span class=\"p\">  </span><span class=\"c\">${types}</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove all rows where column values don't match the given condition.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1692
    },
    {
      "name": "Filter Table With Keyword",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: str"
        },
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Run a keyword for each row of a table, then remove all rows where the called\nkeyword returns a falsy value.</p>\n<p>Can be used to create custom RF keyword based filters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Keyword name used as filter.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">Additional keyword arguments to be passed. (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>The row object will be given as the first argument to the filtering keyword.</p>\n</div>\n",
      "shortdoc": "Run a keyword for each row of a table, then remove all rows where the called keyword returns a falsy value.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1729
    },
    {
      "name": "Find Table Rows",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "operator",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "operator: str"
        },
        {
          "name": "value",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Find all the rows in a table which match a condition for a given column.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to search into.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or position of the column to compare with.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param operator:</th><td class=\"field-body\">Comparison operator used with every cell value on the\nspecified column.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value to compare against.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">New <cite>Table</cite> object containing all the rows matching the condition.</td>\n</tr>\n</tbody>\n</table>\n<p>Supported operators:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"23%\" />\n<col width=\"77%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Operator</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>&gt;</td>\n<td>Cell value is larger than</td>\n</tr>\n<tr><td>&lt;</td>\n<td>Cell value is smaller than</td>\n</tr>\n<tr><td>&gt;=</td>\n<td>Cell value is larger or equal than</td>\n</tr>\n<tr><td>&lt;=</td>\n<td>Cell value is smaller or equal than</td>\n</tr>\n<tr><td>==</td>\n<td>Cell value is equal to</td>\n</tr>\n<tr><td>!=</td>\n<td>Cell value is not equal to</td>\n</tr>\n<tr><td>is</td>\n<td>Cell value is the same object</td>\n</tr>\n<tr><td>not is</td>\n<td>Cell value is not the same object</td>\n</tr>\n<tr><td>contains</td>\n<td>Cell value contains given value</td>\n</tr>\n<tr><td>not contains</td>\n<td>Cell value does not contain given value</td>\n</tr>\n<tr><td>in</td>\n<td>Cell value is in given value</td>\n</tr>\n<tr><td>not in</td>\n<td>Cell value is not in given value</td>\n</tr>\n</tbody>\n</table>\n<p>Returns the matches as a new <cite>Table</cite> instance.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Find all rows where price is over 200\n&#64;{rows} =</span><span class=\"p\">    </span><span class=\"c\">Find table rows</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">Price</span><span class=\"p\">  </span><span class=\"c\">&gt;</span><span class=\"p\">  </span><span class=\"c\">${200}</span><span class=\"p\">\n\n</span><span class=\"c\"># Find all rows where the status does not contain &quot;removed&quot;\n&#64;{rows} =</span><span class=\"p\">    </span><span class=\"c\">Find table rows</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">Status</span><span class=\"p\">  </span><span class=\"c\">not contains</span><span class=\"p\">  </span><span class=\"c\">removed</span>\n</pre>\n</div>\n",
      "shortdoc": "Find all the rows in a table which match a condition for a given column.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1592
    },
    {
      "name": "Get Table Cell",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "row",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | str"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get a cell value from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Cell value</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get the value in the first row and first column\nGet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">\n\n</span><span class=\"c\"># Get the value in the last row and first column\nGet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">\n\n</span><span class=\"c\"># Get the value in the last row and last column\nGet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">-1</span><span class=\"p\">\n\n</span><span class=\"c\"># Get the value in the third row and column &quot;Name&quot;\nGet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">Name</span>\n</pre>\n</div>\n",
      "shortdoc": "Get a cell value from a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1538
    },
    {
      "name": "Get Table Column",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get all values for a single column in a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">List of the rows in the selected column</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${emails}=</span><span class=\"p\">    </span><span class=\"c\">Get table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">E-Mail Address</span>\n</pre>\n</div>\n",
      "shortdoc": "Get all values for a single column in a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1325
    },
    {
      "name": "Get Table Dimensions",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return table dimensions, as (rows, columns).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to inspect</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Two integer values that represent the number\nof rows and columns</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${rows}</span><span class=\"p\">  </span><span class=\"c\">${columns}=</span><span class=\"p\">    </span><span class=\"c\">Get table dimensions</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Table has ${rows} rows and ${columns} columns.</span>\n</pre>\n</div>\n",
      "shortdoc": "Return table dimensions, as (rows, columns).",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1176
    },
    {
      "name": "Get Table Row",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "row",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | str"
        },
        {
          "name": "as_list",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_list: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get a single row from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Dictionary or List of table row</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># returns the first row in the table\n${first}=</span><span class=\"p\">    </span><span class=\"c\">Get table row</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">\n\n</span><span class=\"c\"># returns the last row in the table\n${last}=</span><span class=\"p\">      </span><span class=\"c\">Get table row</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">as_list=${TRUE}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get a single row from a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1300
    },
    {
      "name": "Get Table Slice",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "start",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start: int | str | None = None"
        },
        {
          "name": "end",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end: int | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return a new Table from a range of given Table rows.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Start index (inclusive)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">End index (exclusive)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Table object of the selected rows</td>\n</tr>\n</tbody>\n</table>\n<p>If <tt class=\"docutils literal\">start</tt> is not defined, starts from the first row.\nIf <tt class=\"docutils literal\">end</tt> is not defined, stops at the last row.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get all rows except first five\n${slice}=</span><span class=\"p\">    </span><span class=\"c\">Get table slice</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">start=5</span><span class=\"p\">\n\n</span><span class=\"c\"># Get rows at indexes 5, 6, 7, 8, and 9\n${slice}=</span><span class=\"p\">    </span><span class=\"c\">Get table slice</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">start=5</span><span class=\"p\">    </span><span class=\"c\">end=10</span><span class=\"p\">\n\n</span><span class=\"c\"># Get all rows except last five\n${slice}=</span><span class=\"p\">    </span><span class=\"c\">Get table slice</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">end=-5</span>\n</pre>\n</div>\n",
      "shortdoc": "Return a new Table from a range of given Table rows.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1453
    },
    {
      "name": "Group Table By Column",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Group a table by <tt class=\"docutils literal\">column</tt> and return a list of grouped Tables.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to use for grouping</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column which is used as grouping criteria</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">List of Table objects</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Groups rows of matching customers from the <span class=\"name\">customer</span> column\n# and returns the groups or rows as Tables\n&#64;{groups}=</span><span class=\"p\">    </span><span class=\"c\">Group table by column</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">customer</span><span class=\"p\">\n</span><span class=\"c\"># An example of how to use the List of Tables once returned\nFOR</span><span class=\"p\">    </span><span class=\"c\">${group}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{groups}</span><span class=\"p\">\n    </span><span class=\"c\"># Process all orders for the customer at once\n</span><span class=\"p\">    </span><span class=\"c\">Process order</span><span class=\"p\">    </span><span class=\"c\">${group}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Group a table by ``column`` and return a list of grouped Tables.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1667
    },
    {
      "name": "Map Column Values",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: str"
        },
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Run a keyword for each cell in a given column, and replace its content with\nthe return value.</p>\n<p>Can be used to easily convert column types or values in-place.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to modify.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Mapping keyword name.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">Additional keyword arguments. (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>The cell value will be given as the first argument to the mapping keyword.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Convert all columns values to a different type\nMap column values</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">Price</span><span class=\"p\">    </span><span class=\"c\">Convert to integer</span><span class=\"p\">\n\n</span><span class=\"c\"># Look up values with a custom keyword\nMap column values</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">User</span><span class=\"p\">     </span><span class=\"c\">Map user ID to name</span>\n</pre>\n</div>\n",
      "shortdoc": "Run a keyword for each cell in a given column, and replace its content with the return value.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1752
    },
    {
      "name": "Merge Tables",
      "args": [
        {
          "name": "tables",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*tables: Table"
        },
        {
          "name": "index",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "index: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create a union of two tables and their contents.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param tables:</th><td class=\"field-body\">Tables to merge</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">Column name to use as index for merge</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Table object</td>\n</tr>\n</tbody>\n</table>\n<p>By default rows from all tables are appended one after the other.\nOptionally a column name can be given with <tt class=\"docutils literal\">index</tt>, which is\nused to merge rows together.</p>\n<p>Example:</p>\n<p>For instance, a <tt class=\"docutils literal\">name</tt> column could be used to identify\nunique rows and the merge operation should overwrite values\ninstead of appending multiple copies of the same name.</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Price</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>10.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>15.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>20.0</td>\n</tr>\n</tbody>\n</table>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"55%\" />\n<col width=\"45%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Name</th>\n<th class=\"head\">Stock</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>Egg</td>\n<td>12.0</td>\n</tr>\n<tr><td>Cheese</td>\n<td>99.0</td>\n</tr>\n<tr><td>Ham</td>\n<td>0.0</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${products}=</span><span class=\"p\">    </span><span class=\"c\">Merge tables</span><span class=\"p\">    </span><span class=\"c\">${prices}</span><span class=\"p\">    </span><span class=\"c\">${stock}</span><span class=\"p\">    </span><span class=\"c\">index=Name</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${product}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{products}</span><span class=\"p\">\n    </span><span class=\"c\">Log many</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Product: ${product}[Name]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Price: ${product}[Price]</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">Stock: ${product}[Stock]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Create a union of two tables and their contents.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1089
    },
    {
      "name": "Pop Table Column",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column: int | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove column from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Dictionary or List of the removed, popped, column</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Remove column from table and discard it\nPop table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">   </span><span class=\"c\">userId</span><span class=\"p\">\n\n</span><span class=\"c\"># Remove column from table and iterate over it\n${ids}=</span><span class=\"p\">    </span><span class=\"c\">Pop table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">userId</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${id}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{ids}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">User id: ${id}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove column from table and return it.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1424
    },
    {
      "name": "Pop Table Row",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "row",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row: int | str | None = None"
        },
        {
          "name": "as_list",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_list: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove row from table and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row index, pops first row if none given</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Dictionary or List of the removed, popped, row</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Pop the firt row in the table and discard it\nPop table row</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">\n\n</span><span class=\"c\"># Pop the last row in the table and store it\n${row}=</span><span class=\"p\">      </span><span class=\"c\">Pop table row</span><span class=\"p\">    </span><span class=\"c\">${data}</span><span class=\"p\">    </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">as_list=${TRUE}</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove row from table and return it.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1397
    },
    {
      "name": "Read table from CSV",
      "args": [
        {
          "name": "path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path: str"
        },
        {
          "name": "header",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "header: bool | None = None"
        },
        {
          "name": "columns",
          "types": [
            "List[str]",
            "None"
          ],
          "typedocs": {
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "columns: List[str] | None = None"
        },
        {
          "name": "dialect",
          "types": [
            "str",
            "Dialect",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "Dialect": "Dialect",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "dialect: str | Dialect | None = None"
        },
        {
          "name": "delimiters",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "delimiters: str | None = None"
        },
        {
          "name": "column_unknown",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "Unknown",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column_unknown: str = Unknown"
        },
        {
          "name": "encoding",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Read a CSV file as a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">CSV file includes header</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">Names of columns in resulting table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">Format of CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param delimiters:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">String of possible delimiters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param column_unknown:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Column name for unknown fields</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Text encoding for input file,\nuses system encoding by default</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Table object</td>\n</tr>\n</tbody>\n</table>\n<p>By default attempts to deduce the CSV format and headers\nfrom a sample of the input file. If it's unable to determine\nthe format automatically, the dialect and header will\nhave to be defined manually.</p>\n<p>Builtin <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">excel</tt>, <tt class=\"docutils literal\"><span class=\"pre\">excel-tab</span></tt>, and <tt class=\"docutils literal\">unix</tt>,\nand <tt class=\"docutils literal\">header</tt> is boolean argument (<tt class=\"docutils literal\">True</tt>/<tt class=\"docutils literal\">False</tt>). Optionally a\nset of valid <tt class=\"docutils literal\">delimiters</tt> can be given as a string.</p>\n<p>The <tt class=\"docutils literal\">columns</tt> argument can be used to override the names of columns\nin the resulting table. The amount of columns must match the input\ndata.</p>\n<p>If the source data has a header and rows have more fields than\nthe header defines, the remaining values are put into the column\ngiven by <tt class=\"docutils literal\">column_unknown</tt>. By default it has the value &quot;Unknown&quot;.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Source dialect is deduced automatically\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Read table from CSV</span><span class=\"p\">    </span><span class=\"c\">export.csv</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">Found columns: ${table.columns}</span><span class=\"p\">\n\n</span><span class=\"c\"># Source dialect is known and given explicitly\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Read table from CSV</span><span class=\"p\">    </span><span class=\"c\">export-excel.csv</span><span class=\"p\">    </span><span class=\"c\">dialect=excel</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">Found columns: ${table.columns}</span>\n</pre>\n</div>\n",
      "shortdoc": "Read a CSV file as a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1856
    },
    {
      "name": "Rename Table Columns",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "names",
          "types": [
            "List[str | None]"
          ],
          "typedocs": {
            "List[str | None]": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "names: List[str | None]"
        },
        {
          "name": "strict",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "strict: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Renames columns in the Table with given values. Columns with\nname as <tt class=\"docutils literal\">None</tt> will use the previous value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">List of new column names</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">If True, raises ValueError if column lengths\ndo not match</td>\n</tr>\n</tbody>\n</table>\n<p>The renaming will be done in-place.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Initially set the column names\n${columns}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">   </span><span class=\"c\">First</span><span class=\"p\">  </span><span class=\"c\">Second</span><span class=\"p\">  </span><span class=\"c\">Third</span><span class=\"p\">\n</span><span class=\"c\">Rename table columns</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">${columns}</span><span class=\"p\">\n</span><span class=\"c\"># First, Second, Third\n</span><span class=\"p\">\n</span><span class=\"c\"># Update the first and second column names to Uno and Dos\n${columns}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">   </span><span class=\"c\">Uno</span><span class=\"p\">  </span><span class=\"c\">Dos</span><span class=\"p\">\n</span><span class=\"c\">Rename table columns</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">${columns}</span><span class=\"p\">\n</span><span class=\"c\"># Uno, Dos, Third</span>\n</pre>\n</div>\n",
      "shortdoc": "Renames columns in the Table with given values. Columns with name as ``None`` will use the previous value.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1194
    },
    {
      "name": "Set Row As Column Names",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "row",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set existing row as names for columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row to use as column names</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set the column names based on the first row\nSet row as column names</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span>\n</pre>\n</div>\n",
      "shortdoc": "Set existing row as names for columns.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1482
    },
    {
      "name": "Set Table Cell",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "row",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | str"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "value",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set a cell value in a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value to set</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set the value in the first row and first column to &quot;First&quot;\nSet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">       </span><span class=\"c\">First</span><span class=\"p\">\n\n</span><span class=\"c\"># Set the value in the last row and first column to &quot;Last&quot;\nSet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">       </span><span class=\"c\">Last</span><span class=\"p\">\n\n</span><span class=\"c\"># Set the value in the last row and last column to &quot;Corner&quot;\nSet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">-1</span><span class=\"p\">    </span><span class=\"c\">-1</span><span class=\"p\">       </span><span class=\"c\">Corner</span><span class=\"p\">\n\n</span><span class=\"c\"># Set the value in the third row and column &quot;Name&quot; to &quot;Unknown&quot;\nSet table cell</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">Name</span><span class=\"p\">    </span><span class=\"c\">Unknown</span>\n</pre>\n</div>\n",
      "shortdoc": "Set a cell value in a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1565
    },
    {
      "name": "Set Table Column",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "values",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "values: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Assign values to a column in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) to set</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, one for each row, or\none single value that is set for all rows.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set different value for each row (sizes must match)\n${ids}=</span><span class=\"p\">    </span><span class=\"c\">Create list</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">  </span><span class=\"c\">4</span><span class=\"p\">  </span><span class=\"c\">5</span><span class=\"p\">\n</span><span class=\"c\">Set table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">userId</span><span class=\"p\">    </span><span class=\"c\">${ids}</span><span class=\"p\">\n\n</span><span class=\"c\"># Set the same value for all rows\nSet table column</span><span class=\"p\">    </span><span class=\"c\">${users}</span><span class=\"p\">    </span><span class=\"c\">email</span><span class=\"p\">     </span><span class=\"c\">${NONE}</span>\n</pre>\n</div>\n",
      "shortdoc": "Assign values to a column in the table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1373
    },
    {
      "name": "Set Table Row",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "row",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | str"
        },
        {
          "name": "values",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "values: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Assign values to a row in the table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Row to modify</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">Value(s) to set</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">values</tt> can either be a list of values, or a dictionary\nwhere the keys match current column names. Values for unknown\nkeys are discarded.</p>\n<p>It can also be a single value that is set for all columns.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${columns}=</span><span class=\"p\">  </span><span class=\"c\">Create list</span><span class=\"p\">     </span><span class=\"c\">One</span><span class=\"p\">  </span><span class=\"c\">Two</span><span class=\"p\">  </span><span class=\"c\">Three</span><span class=\"p\">\n</span><span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">Create table</span><span class=\"p\">    </span><span class=\"c\">columns=${columns}</span><span class=\"p\">\n\n</span><span class=\"c\">${values}=</span><span class=\"p\">   </span><span class=\"c\">Create list</span><span class=\"p\">     </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">\n</span><span class=\"c\">Set table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">0</span><span class=\"p\">    </span><span class=\"c\">${values}</span><span class=\"p\">\n\n</span><span class=\"c\">${values}=</span><span class=\"p\">   </span><span class=\"c\">Create dictionary</span><span class=\"p\">    </span><span class=\"c\">One=1</span><span class=\"p\">  </span><span class=\"c\">Two=2</span><span class=\"p\">  </span><span class=\"c\">Three=3</span><span class=\"p\">\n</span><span class=\"c\">Set table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">${values}</span><span class=\"p\">\n\n</span><span class=\"c\">Set table row</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">${NONE}</span>\n</pre>\n</div>\n",
      "shortdoc": "Assign values to a row in the table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1342
    },
    {
      "name": "Sort Table By Column",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "ascending",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "ascending: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Sort a table in-place according to <tt class=\"docutils literal\">column</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to sort</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column to sort with</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param ascending:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Table sort order</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Sorts the <span class=\"name\">order_date</span> column ascending\nSort table by column</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">order_date</span><span class=\"p\">\n\n</span><span class=\"c\"># Sorts the <span class=\"name\">order_date</span> column descending\nSort table by column</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">order_date</span><span class=\"p\">    </span><span class=\"c\">ascending=${FALSE}</span>\n</pre>\n</div>\n",
      "shortdoc": "Sort a table in-place according to ``column``.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1645
    },
    {
      "name": "Table Head",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "count",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "5",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "count: int = 5"
        },
        {
          "name": "as_list",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_list: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return first <tt class=\"docutils literal\">count</tt> rows from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">Number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of Table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Return Table object or List of the selected rows</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get the first 10 employees\n${first}=</span><span class=\"p\">    </span><span class=\"c\">Table head</span><span class=\"p\">    </span><span class=\"c\">${employees}</span><span class=\"p\">    </span><span class=\"c\">10</span>\n</pre>\n</div>\n",
      "shortdoc": "Return first ``count`` rows from a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1498
    },
    {
      "name": "Table Tail",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "count",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "5",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "count: int = 5"
        },
        {
          "name": "as_list",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_list: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return last <tt class=\"docutils literal\">count</tt> rows from a table.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to read from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param count:</th><td class=\"field-body\">Number of lines to read</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">Return list instead of Table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Return Table object or List of the selected rows</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get the last 10 orders\n${latest}=</span><span class=\"p\">    </span><span class=\"c\">Table tail</span><span class=\"p\">    </span><span class=\"c\">${orders}</span><span class=\"p\">    </span><span class=\"c\">10</span>\n</pre>\n</div>\n",
      "shortdoc": "Return last ``count`` rows from a table.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1518
    },
    {
      "name": "Trim Column Names",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove all extraneous whitespace from column names.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n</tbody>\n</table>\n<p>The filtering will be done in-place.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># This example will take colums such as:\n# &quot;One&quot;, &quot;Two &quot;, &quot;  Three &quot;\n# and trim them to become the below:\n# &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot;\nTrim column names</span><span class=\"p\">     </span><span class=\"c\">${table}</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove all extraneous whitespace from column names.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1832
    },
    {
      "name": "Trim Empty Rows",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove all rows from the <em>end</em> of a table\nwhich have only <tt class=\"docutils literal\">None</tt> as values.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to filter</td>\n</tr>\n</tbody>\n</table>\n<p>The filtering will be done in-place.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Trim empty rows</span><span class=\"p\">    </span><span class=\"c\">${table}</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove all rows from the *end* of a table which have only ``None`` as values.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1807
    },
    {
      "name": "Write table to CSV",
      "args": [
        {
          "name": "table",
          "types": [
            "Table"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: Table"
        },
        {
          "name": "path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path: str"
        },
        {
          "name": "header",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "header: bool = True"
        },
        {
          "name": "dialect",
          "types": [
            "str",
            "Dialect"
          ],
          "typedocs": {
            "str": "string",
            "Dialect": "Dialect"
          },
          "defaultValue": "Excel",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "dialect: str | Dialect = Excel"
        },
        {
          "name": "encoding",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str | None = None"
        },
        {
          "name": "delimiter",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": ",",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "delimiter: str | None = ,"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Write a table as a CSV file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">Table to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to write to</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">Write columns as header to CSV file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dialect:</th><td class=\"field-body\">The format of output CSV</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Text encoding for output file,\nuses system encoding by default</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param delimiter:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Delimiter character between columns</td>\n</tr>\n</tbody>\n</table>\n<p>Builtin <tt class=\"docutils literal\">dialect</tt> values are <tt class=\"docutils literal\">excel</tt>, <tt class=\"docutils literal\"><span class=\"pre\">excel-tab</span></tt>, and <tt class=\"docutils literal\">unix</tt>.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${sheet}=</span><span class=\"p\">    </span><span class=\"c\">Read worksheet as table</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">    </span><span class=\"c\">header=${TRUE}</span><span class=\"p\">\n</span><span class=\"c\">Write table to CSV</span><span class=\"p\">    </span><span class=\"c\">${sheet}</span><span class=\"p\">    </span><span class=\"c\">output.csv</span>\n</pre>\n</div>\n",
      "shortdoc": "Write a table as a CSV file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tables.py",
      "lineno": 1943
    }
  ],
  "dataTypes": {
    "enums": [
      {
        "type": "Enum",
        "name": "Dialect",
        "doc": "<div class=\"document\">\n<p>CSV dialect</p>\n</div>\n",
        "members": [
          {
            "name": "Excel",
            "value": "excel"
          },
          {
            "name": "ExcelTab",
            "value": "excel-tab"
          },
          {
            "name": "Unix",
            "value": "unix"
          }
        ]
      }
    ],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Create Table",
        "Export Table",
        "Get Table Row",
        "Pop Table Row",
        "Read table from CSV",
        "Rename Table Columns",
        "Sort Table By Column",
        "Table Head",
        "Table Tail",
        "Write table to CSV"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Enum",
      "name": "Dialect",
      "doc": "<div class=\"document\">\n<p>CSV dialect</p>\n</div>\n",
      "usages": [
        "Read table from CSV",
        "Write table to CSV"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "Excel",
          "value": "excel"
        },
        {
          "name": "ExcelTab",
          "value": "excel-tab"
        },
        {
          "name": "Unix",
          "value": "unix"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Create Table"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Filter Table By Column",
        "Find Table Rows",
        "Get Table Cell",
        "Get Table Column",
        "Get Table Row",
        "Get Table Slice",
        "Group Table By Column",
        "Map Column Values",
        "Pop Table Column",
        "Pop Table Row",
        "Set Row As Column Names",
        "Set Table Cell",
        "Set Table Column",
        "Set Table Row",
        "Sort Table By Column",
        "Table Head",
        "Table Tail"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Create Table",
        "Read table from CSV",
        "Rename Table Columns"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Add Table Column",
        "Add Table Row",
        "Create Table",
        "Get Table Slice",
        "Merge Tables",
        "Pop Table Column",
        "Pop Table Row",
        "Read table from CSV",
        "Write table to CSV"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Add Table Column",
        "Filter Table By Column",
        "Filter Table With Keyword",
        "Find Table Rows",
        "Get Table Cell",
        "Get Table Column",
        "Get Table Row",
        "Get Table Slice",
        "Group Table By Column",
        "Map Column Values",
        "Merge Tables",
        "Pop Table Column",
        "Pop Table Row",
        "Read table from CSV",
        "Set Row As Column Names",
        "Set Table Cell",
        "Set Table Column",
        "Set Table Row",
        "Sort Table By Column",
        "Write table to CSV"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}