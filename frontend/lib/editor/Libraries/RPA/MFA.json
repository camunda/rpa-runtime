{
  "specversion": 2,
  "name": "Camunda.MFA",
  "doc": "<div class=\"document\">\n<p><strong>Camunda.MFA</strong> is a library intended mainly for generating one-time passwords (OTP)\nand not only, as OAuth2 support was introduced lately.</p>\n<p>Library requires at the minimum <cite>rpaframework</cite> version <strong>19.4.0</strong>.</p>\n<p>Based on the <a class=\"reference external\" href=\"https://pypi.org/project/pyotp/\">pyotp</a> and\n<a class=\"reference external\" href=\"https://pypi.org/project/requests-oauthlib/\">requests_oauthlib</a> packages. It\nprovides support for both MFA with the <tt class=\"docutils literal\">* OTP</tt> related keywords and OAuth2\n&quot;Authorization Code Flow&quot; with the <tt class=\"docutils literal\">* OAuth *</tt> related keywords.</p>\n<p>In the below example the <strong>mfa</strong> secret we are reading from the Robocorp\nVault is the passcode generated by the Authenticator service. The passcode\nvalue is stored into the Vault with key <strong>otpsecret</strong>.</p>\n<p>Passcode is typically a long string (16-32 characters), which is provided\nin a form of QR image, but it can be obtained by requesting access to a string.</p>\n<p>Note that same code can be used to add a mobile phone as a duplicate authentication\ndevice at the same time when the same code is added into the Vault.</p>\n<p><strong>Robot framework example usage:</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">Camunda.MFA</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">Camunda.Robocorp.Vault</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Generate time based code</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=    </span><span class=\"nf\">Get Secret</span><span class=\"p\">   </span><span class=\"s\">mfa</span><span class=\"p\">\n    ${</span><span class=\"nv\">code</span><span class=\"p\">}=    </span><span class=\"nf\">Get Time Based OTP</span><span class=\"p\">    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[otpsecret]</span>\n</pre>\n<p><strong>Python example usage</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.MFA</span> <span class=\"kn\">import</span> <span class=\"n\">MFA</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">Camunda.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Vault</span><span class=\"w\">\n\n\n</span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;mfa&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">code</span> <span class=\"o\">=</span> <span class=\"n\">MFA</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_time_based_otp</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;otpsecret&quot;</span><span class=\"p\">])</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2025-02-03T13:00:03+00:00",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
  "lineno": 49,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "vault_name",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "vault_name: str | None = None"
        },
        {
          "name": "vault_key",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "vault_key: str | None = None"
        },
        {
          "name": "mode",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "OTPMode",
                "typedoc": "OTPMode",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "OTPMode",
            "None"
          ],
          "typedocs": {
            "OTPMode": "OTPMode",
            "None": "None"
          },
          "defaultValue": "TIME",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "mode: OTPMode | None = TIME"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
      "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 100
    }
  ],
  "keywords": [
    {
      "name": "Generate Oauth Url",
      "args": [
        {
          "name": "auth_url",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "auth_url: str"
        },
        {
          "name": "",
          "type": null,
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "client_id",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "NAMED_ONLY",
          "required": true,
          "repr": "client_id: str"
        },
        {
          "name": "redirect_uri",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "NAMED_ONLY",
          "required": true,
          "repr": "redirect_uri: str"
        },
        {
          "name": "scope",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "NAMED_ONLY",
          "required": true,
          "repr": "scope: str"
        },
        {
          "name": "kwargs",
          "type": null,
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Generates an authorization URL which must be opened by the user to start the\nOAuth2 flow and obtain an authorization code as response.</p>\n<p>The received response URL should be passed further with <tt class=\"docutils literal\">Get OAuth Token</tt> in\norder to complete the flow. Arbitrary keyword arguments can be passed to the\nkeyword, which will be redirected to the wrapped <cite>oauthlib</cite> library method\ncall.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param auth_url:</th><td class=\"field-body\">Authorization endpoint to call the request on. (https URL\nusually ending with '/authorize')</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param client_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Client app ID. (generated by the provider)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param redirect_uri:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Redirect URL allowed by the Client app configuration. (\nnecessary for getting the <cite>code</cite> response)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scope:</th><td class=\"field-body\">Space-separated string of permissions. (accepted during the\nconsent screen)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Authorization URL string not containing any sensitive info in it.\n(call it with <cite>access_type=&quot;offline&quot;</cite> or set the right <cite>scope</cite> in the\nauthorization URL for ensuring the existence of the refresh token)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Start OAuth Flow</span><span class=\"p\">\n    ${</span><span class=\"nv\">auth_url</span><span class=\"p\">} =    </span><span class=\"nf\">Generate OAuth URL</span><span class=\"p\">\n    ...     </span><span class=\"s\">https://accounts.google.com/o/oauth2/auth</span><span class=\"p\">\n    ...     </span><span class=\"s\">client_id=810482312368-19htmcgcj*******googleusercontent.com</span><span class=\"p\">\n    ...     </span><span class=\"s\">redirect_uri=https://developers.google.com/oauthplayground</span><span class=\"p\">\n    ...     </span><span class=\"s\">scope=https://mail.google.com</span><span class=\"p\">\n    ...     </span><span class=\"s\">access_type=offline</span><span class=\"p\">     </span><span class=\"s\">prompt=consent</span><span class=\"p\">  </span><span class=\"c\"># explicit grant\n</span><span class=\"p\">    </span><span class=\"nf\">Log</span><span class=\"p\">     </span><span class=\"s\">Start OAuth2 flow: </span><span class=\"p\">${</span><span class=\"nv\">auth_url</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.MFA</span> <span class=\"kn\">import</span> <span class=\"n\">MFA</span><span class=\"w\">\n\n</span><span class=\"n\">lib_mfa</span> <span class=\"o\">=</span> <span class=\"n\">MFA</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">auth_url</span> <span class=\"o\">=</span> <span class=\"n\">lib_mfa</span><span class=\"o\">.</span><span class=\"n\">generate_oauth_url</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;https://accounts.google.com/o/oauth2/auth&quot;</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Start OAuth2 flow: </span><span class=\"si\">{</span><span class=\"n\">auth_url</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Generates an authorization URL which must be opened by the user to start the OAuth2 flow and obtain an authorization code as response.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 188
    },
    {
      "name": "Get Counter Based Otp",
      "args": [
        {
          "name": "counter",
          "type": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
          },
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "counter: int"
        },
        {
          "name": "otp_passcode",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "otp_passcode: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get <cite>counter</cite> based one time password using separately set\npasscode or by parameter <cite>otp_passcode</cite>. The counter index is\ngiven by the <cite>counter</cite> parameter.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param counter:</th><td class=\"field-body\">the index of the counter</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param otp_passcode:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the passcode provided by the Authenticator</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get `counter` based one time password using separately set passcode or by parameter `otp_passcode`. The counter index is given by the `counter` parameter.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 161
    },
    {
      "name": "Get Oauth Token",
      "args": [
        {
          "name": "token_url",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "token_url: str"
        },
        {
          "name": "",
          "type": null,
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "client_secret",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "NAMED_ONLY",
          "required": true,
          "repr": "client_secret: str"
        },
        {
          "name": "response_url",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "NAMED_ONLY",
          "required": true,
          "repr": "response_url: str"
        },
        {
          "name": "kwargs",
          "type": null,
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Exchanges the code obtained previously with <tt class=\"docutils literal\">Generate OAuth URL</tt> for a\ntoken.</p>\n<p>The refresh token from the returned dictionary can be used further with the\n<tt class=\"docutils literal\">Refresh OAuth Token</tt> keyword in order to obtain a new access token when the\nprevious one expires. (usually after one hour)\nArbitrary keyword arguments can be passed to the keyword, which will be\nredirected to the wrapped <cite>oauthlib</cite> library method call.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Token endpoint used with a POST request in order to retrieve\nthe token data. (https URL usually ending with '/token')</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param client_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Client app secret. (generated by the provider)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param response_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The final URL containing the authorization <cite>code</cite> found in\nthe address bar after authenticating and authorizing the Client app\nthrough the authorization URL.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">A dictionary containing the access token, metadata and optionally the\nrefresh token.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Finish OAuth Flow</span><span class=\"p\">\n    ${</span><span class=\"nv\">token</span><span class=\"p\">} =      </span><span class=\"nf\">Get OAuth Token</span><span class=\"p\">\n    ...     </span><span class=\"s\">https://accounts.google.com/o/oauth2/token</span><span class=\"p\">\n    ...     </span><span class=\"s\">client_secret=GOCSPX-******mqZAW89</span><span class=\"p\">\n    ...     </span><span class=\"s\">response_url=</span><span class=\"p\">${</span><span class=\"nv\">resp_url</span><span class=\"p\">}  </span><span class=\"c\"># redirect of <a href=\"#Generate%20Oauth%20Url\" class=\"name\">Generate OAuth URL</a></span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.MFA</span> <span class=\"kn\">import</span> <span class=\"n\">MFA</span><span class=\"w\">\n\n</span><span class=\"n\">lib_mfa</span> <span class=\"o\">=</span> <span class=\"n\">MFA</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib_mfa</span><span class=\"o\">.</span><span class=\"n\">get_oauth_token</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://accounts.google.com/o/oauth2/token&quot;</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Exchanges the code obtained previously with ``Generate OAuth URL`` for a token.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 242
    },
    {
      "name": "Get Time Based Otp",
      "args": [
        {
          "name": "otp_passcode",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "otp_passcode: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get <cite>time</cite> based one time password using separately set\npasscode or by parameter <cite>otp_passcode</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param otp_passcode:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the passcode provided by the Authenticator</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get `time` based one time password using separately set passcode or by parameter `otp_passcode`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 148
    },
    {
      "name": "Refresh Oauth Token",
      "args": [
        {
          "name": "token_url",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "token_url: str"
        },
        {
          "name": "",
          "type": null,
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "client_id",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "client_id: str | None = None"
        },
        {
          "name": "client_secret",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "NAMED_ONLY",
          "required": true,
          "repr": "client_secret: str"
        },
        {
          "name": "refresh_token",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "refresh_token: str | None = None"
        },
        {
          "name": "kwargs",
          "type": null,
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Refreshes the token as the access one usually expires after 1h and the\nrefresh one never expires. (as long as it doesn't get revoked)</p>\n<p>The effect of this keyword is similar to <tt class=\"docutils literal\">Get OAuth Token</tt>, but this time you\nrefresh unattended an already existing token by receiving a new one instead.\nArbitrary keyword arguments can be passed to the keyword, which will be\nredirected to the wrapped <cite>oauthlib</cite> library method call.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Token endpoint used with a POST request in order to refresh\nthe token data. (https URL usually ending with '/token')</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param client_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Client app ID. (generated by the provider)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param client_secret:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Client app secret. (generated by the provider)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param refresh_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Refresh token string found in the dictionary obtained\nwith <tt class=\"docutils literal\">Get OAuth Token</tt> or <tt class=\"docutils literal\">Refresh OAuth Token</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">A token dictionary containing a new access token and updated\nmetadata. (the refresh token inside isn't guaranteed to remain constant)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Refresh OAuth Flow</span><span class=\"p\">\n    ${</span><span class=\"nv\">token</span><span class=\"p\">} =      </span><span class=\"nf\">Refresh OAuth Token</span><span class=\"p\">\n    ...     </span><span class=\"s\">https://accounts.google.com/o/oauth2/token</span><span class=\"p\">\n    ...     </span><span class=\"s\">client_id=810482312368-19htmcgcj*******googleusercontent.com</span><span class=\"p\">\n    ...     </span><span class=\"s\">client_secret=GOCSPX-******mqZAW89</span><span class=\"p\">\n    ...     </span><span class=\"s\">refresh_token=</span><span class=\"p\">${</span><span class=\"nv\">token</span><span class=\"p\">}</span><span class=\"s\">[refresh_token]</span><span class=\"p\">  </span><span class=\"c\"># from <a href=\"#Get%20Oauth%20Token\" class=\"name\">Get OAuth Token</a></span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.MFA</span> <span class=\"kn\">import</span> <span class=\"n\">MFA</span><span class=\"w\">\n\n</span><span class=\"n\">lib_mfa</span> <span class=\"o\">=</span> <span class=\"n\">MFA</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib_mfa</span><span class=\"o\">.</span><span class=\"n\">refresh_oauth_token</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;https://accounts.google.com/o/oauth2/token&quot;</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"w\">\n</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Refreshes the token as the access one usually expires after 1h and the refresh one never expires. (as long as it doesn't get revoked)",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 292
    },
    {
      "name": "Set Counter Based Otp",
      "args": [
        {
          "name": "otp_passcode",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "otp_passcode: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set <cite>counter</cite> based OTP with passcode.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param otp_passcode:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the passcode provided by the Authenticator</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set `counter` based OTP with passcode.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 140
    },
    {
      "name": "Set Time Based Otp",
      "args": [
        {
          "name": "otp_passcode",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "otp_passcode: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set <cite>time</cite> based OTP with passcode.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param otp_passcode:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the passcode provided by the Authenticator</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set `time` based OTP with passcode.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 132
    },
    {
      "name": "Use Mfa Secret From Vault",
      "args": [
        {
          "name": "vault_name",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "vault_name: str"
        },
        {
          "name": "vault_key",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "vault_key: str"
        },
        {
          "name": "mode",
          "type": {
            "name": "OTPMode",
            "typedoc": "OTPMode",
            "nested": [],
            "union": false
          },
          "types": [
            "OTPMode"
          ],
          "typedocs": {
            "OTPMode": "OTPMode"
          },
          "defaultValue": "TIME",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "mode: OTPMode = TIME"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set <cite>time</cite> or <cite>counter</cite> based OTP with passcode stored in\nthe Robocorp Vault named with <cite>vault_name</cite> under key of <cite>vault_key</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the vault storing the passcode</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_key:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the vault key storing the passcode value</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set `time` or `counter` based OTP with passcode stored in the Robocorp Vault named with `vault_name` under key of `vault_key`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/MFA.py",
      "lineno": 116
    }
  ],
  "dataTypes": {
    "enums": [
      {
        "type": "Enum",
        "name": "OTPMode",
        "doc": "<div class=\"document\">\n<p>Enumeration for type of OTP to use.</p>\n</div>\n",
        "members": [
          {
            "name": "TIME",
            "value": "TIME"
          },
          {
            "name": "COUNTER",
            "value": "COUNTER"
          }
        ]
      }
    ],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Get Counter Based Otp"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "__init__",
        "Get Counter Based Otp",
        "Get Time Based Otp",
        "Refresh Oauth Token"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Enum",
      "name": "OTPMode",
      "doc": "<div class=\"document\">\n<p>Enumeration for type of OTP to use.</p>\n</div>\n",
      "usages": [
        "__init__",
        "Use Mfa Secret From Vault"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "TIME",
          "value": "TIME"
        },
        {
          "name": "COUNTER",
          "value": "COUNTER"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "__init__",
        "Generate Oauth Url",
        "Get Counter Based Otp",
        "Get Oauth Token",
        "Get Time Based Otp",
        "Refresh Oauth Token",
        "Set Counter Based Otp",
        "Set Time Based Otp",
        "Use Mfa Secret From Vault"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}