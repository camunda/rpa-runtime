{
  "specversion": 1,
  "name": "RPA.Excel.Files",
  "doc": "<div class=\"document\">\n<p>The <cite>Excel.Files</cite> library can be used to read and write Excel\nfiles without the need to start the actual Excel application.</p>\n<p>It supports both legacy <tt class=\"docutils literal\">.xls</tt> files and modern <tt class=\"docutils literal\">.xlsx</tt> files.</p>\n<p><strong>Note:</strong> To run macros or load password protected worksheets,\nplease use the Excel application library.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>A common use-case is to load an existing Excel file as a table,\nwhich can be iterated over later in a Robot Framework keyword or task:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tables</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Read orders as table</span><span class=\"p\">\n    </span><span class=\"nf\">Open workbook</span><span class=\"p\">    ${</span><span class=\"nv\">ORDERS_FILE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">worksheet</span><span class=\"p\">}=    </span><span class=\"nf\">Read worksheet</span><span class=\"p\">   </span><span class=\"s\">header=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    ${</span><span class=\"nv\">orders</span><span class=\"p\">}=       </span><span class=\"nf\">Create table</span><span class=\"p\">     ${</span><span class=\"nv\">worksheet</span><span class=\"p\">}\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]         ${</span><span class=\"nv\">orders</span><span class=\"p\">}\n    [</span><span class=\"kn\">Teardown</span><span class=\"p\">]       </span><span class=\"nf\">Close workbook</span>\n</pre>\n<p>Processing all worksheets in the Excel file and checking row count:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Excel.Files</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">EXCEL_FILE</span><span class=\"p\">}   </span><span class=\"s\">/path/to/excel.xlsx</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Rows in the sheet</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]      </span><span class=\"nf\">Open Workbook</span><span class=\"p\">    ${</span><span class=\"nv\">EXCEL_FILE</span><span class=\"p\">}\n    &#64;{</span><span class=\"nv\">sheets</span><span class=\"p\">}=   </span><span class=\"nf\">List Worksheets</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">sheet</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">sheets</span><span class=\"p\">}\n        ${</span><span class=\"nv\">count</span><span class=\"p\">}=  </span><span class=\"nf\">Get row count in the sheet</span><span class=\"p\">   ${</span><span class=\"nv\">sheet</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">Worksheet '</span><span class=\"p\">${</span><span class=\"nv\">sheet</span><span class=\"p\">}</span><span class=\"s\">' has </span><span class=\"p\">${</span><span class=\"nv\">count</span><span class=\"p\">}</span><span class=\"s\"> rows</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Get row count in the sheet</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]      ${</span><span class=\"nv\">SHEET_NAME</span><span class=\"p\">}\n    ${</span><span class=\"nv\">sheet</span><span class=\"p\">}=        </span><span class=\"nf\">Read Worksheet</span><span class=\"p\">   ${</span><span class=\"nv\">SHEET_NAME</span><span class=\"p\">}\n    ${</span><span class=\"nv\">rows</span><span class=\"p\">}=         </span><span class=\"nf\">Get Length</span><span class=\"p\">  ${</span><span class=\"nv\">sheet</span><span class=\"p\">}\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]         ${</span><span class=\"nv\">rows</span><span class=\"p\">}</span>\n</pre>\n<p>Creating a new Excel file with a dictionary:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating new Excel</span><span class=\"p\">\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">  </span><span class=\"s\">my_new_excel.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">index</span><span class=\"p\">}    </span><span class=\"s\">IN RANGE</span><span class=\"p\">    </span><span class=\"s\">20</span><span class=\"p\">\n        &amp;{</span><span class=\"nv\">row</span><span class=\"p\">}=       </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">\n        ...           </span><span class=\"s\">Row No</span><span class=\"p\">   ${</span><span class=\"nv\">index</span><span class=\"p\">}\n        ...           </span><span class=\"s\">Amount</span><span class=\"p\">   ${</span><span class=\"nv\">index * 25</span><span class=\"p\">}\n        </span><span class=\"nf\">Append Rows to Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">row</span><span class=\"p\">}  </span><span class=\"s\">header=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Save Workbook</span>\n</pre>\n<p>Creating a new Excel file with a list:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Variables ***</span><span class=\"p\">\n&#64;{</span><span class=\"nv\">heading</span><span class=\"p\">}   </span><span class=\"s\">Row No</span><span class=\"p\">   </span><span class=\"s\">Amount</span><span class=\"p\">\n&#64;{</span><span class=\"nv\">rows</span><span class=\"p\">}      ${</span><span class=\"nv\">heading</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating new Excel</span><span class=\"p\">\n    </span><span class=\"nf\">Create Workbook</span><span class=\"p\">  </span><span class=\"s\">my_new_excel.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">index</span><span class=\"p\">}    </span><span class=\"s\">IN RANGE</span><span class=\"p\">   </span><span class=\"s\">1</span><span class=\"p\">  </span><span class=\"s\">20</span><span class=\"p\">\n        &#64;{</span><span class=\"nv\">row</span><span class=\"p\">}=         </span><span class=\"nf\">Create List</span><span class=\"p\">   ${</span><span class=\"nv\">index</span><span class=\"p\">}   ${</span><span class=\"nv\">index * 25</span><span class=\"p\">}\n        </span><span class=\"nf\">Append To List</span><span class=\"p\">  ${</span><span class=\"nv\">rows</span><span class=\"p\">}  ${</span><span class=\"nv\">row</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Append Rows to Worksheet</span><span class=\"p\">  ${</span><span class=\"nv\">rows</span><span class=\"p\">}\n    </span><span class=\"nf\">Save Workbook</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be imported directly into Python.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Excel.Files</span> <span class=\"kn\">import</span> <span class=\"n\">Files</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">read_excel_worksheet</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">worksheet</span><span class=\"p\">):</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Files</span><span class=\"p\">()</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">try</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"k\">return</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet</span><span class=\"p\">(</span><span class=\"n\">worksheet</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">finally</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">close_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:55",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
  "lineno": 71,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Append Rows To Worksheet",
      "args": [
        {
          "name": "content",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "content: Any"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        },
        {
          "name": "header",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "header: bool = False"
        },
        {
          "name": "start",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start: int | None = None"
        },
        {
          "name": "formatting_as_empty",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "formatting_as_empty: bool | None = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Append values to the end of the worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">Rows of values to append</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to append to (optional).\nDefaults to the active worksheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">Set rows according to existing header row</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Start of data, NOTE: Only required when header is True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param formatting_as_empty:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if True, the cells containing only\nformatting (no values) are considered empty.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">List of dictionaries that represents the worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">content</tt> argument can be of any tabular format. Typically,\nthis is a Table object created by the <tt class=\"docutils literal\">RPA.Tables</tt> library,\nbut it can also be a list of lists, or a list of dictionaries.</p>\n<p>If the <tt class=\"docutils literal\">header</tt> flag is enabled, the existing header in the worksheet\nis used to insert values in the correct columns. This assumes that\nthat source data has this data available.</p>\n<p>If the header is not on the first row of the worksheet,\nthe <tt class=\"docutils literal\">start</tt> argument can be used to give the correct row index.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Append an existing Table object\n # Create a new table using a Dictionary of Lists</span><span class=\"p\">\n</span><span class=\"c\">&#64;{table_name}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">Sara</span><span class=\"p\">    </span><span class=\"c\">Beth</span><span class=\"p\">    </span><span class=\"c\">Amy</span><span class=\"p\">\n</span><span class=\"c\">&#64;{table_age}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">${48}</span><span class=\"p\">    </span><span class=\"c\">${21}</span><span class=\"p\">    </span><span class=\"c\">${57}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{table}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">    </span><span class=\"c\">name=${table_name}</span><span class=\"p\">    </span><span class=\"c\">age=${table_age}</span><span class=\"p\">\n</span><span class=\"c\">Create Table</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n</span><span class=\"c\">Append rows to worksheet</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span><span class=\"p\">\n\n</span><span class=\"c\"># Append to a worksheet with headers on row 5\n # Create a new table using a Dictionary of Lists</span><span class=\"p\">\n</span><span class=\"c\">&#64;{table_name}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">Sara</span><span class=\"p\">    </span><span class=\"c\">Beth</span><span class=\"p\">    </span><span class=\"c\">Amy</span><span class=\"p\">\n</span><span class=\"c\">&#64;{table_age}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">${48}</span><span class=\"p\">    </span><span class=\"c\">${21}</span><span class=\"p\">    </span><span class=\"c\">${57}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{table}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">    </span><span class=\"c\">name=${table_name}</span><span class=\"p\">    </span><span class=\"c\">age=${table_age}</span><span class=\"p\">\n</span><span class=\"c\">Create Table</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n</span><span class=\"c\">Append rows to worksheet</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">header=${TRUE}</span><span class=\"p\">   </span><span class=\"c\">start=5</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Append an existing Table object</span><span class=\"w\">\n</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Sara&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Beth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Amy&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span>  <span class=\"p\">[</span>    <span class=\"mi\">48</span><span class=\"p\">,</span>     <span class=\"mi\">21</span><span class=\"p\">,</span>     <span class=\"mi\">57</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">append_rows_to_worksheet</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"c1\"># Append to a worksheet with headers on row 5</span><span class=\"w\">\n</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Sara&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Beth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Amy&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span>  <span class=\"p\">[</span>    <span class=\"mi\">48</span><span class=\"p\">,</span>     <span class=\"mi\">21</span><span class=\"p\">,</span>     <span class=\"mi\">57</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">append_rows_to_worksheet</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Append values to the end of the worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 715
    },
    {
      "name": "Auto Size Columns",
      "args": [
        {
          "name": "start_column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_column: int | str"
        },
        {
          "name": "end_column",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_column: int | str | None = None"
        },
        {
          "name": "width",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "width: int | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Auto size column widths.</p>\n<p>Note. non-default font sizes might cause auto sizing issues</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_column:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">column number or name to start from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_column:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">optional column number or name for last column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param width:</th><td class=\"field-body\">if given will resize columns to this size, otherwise\nwill auto_size</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Auto Size Columns</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">   </span><span class=\"c\">D</span><span class=\"p\">    </span><span class=\"c\"># will try auto size\nAuto Size Columns</span><span class=\"p\">   </span><span class=\"c\">B</span><span class=\"p\">   </span><span class=\"c\">D</span><span class=\"p\">   </span><span class=\"c\">16</span><span class=\"p\">  </span><span class=\"c\"># will set A-D columns sizes to 16\nAuto Size Columns</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">   </span><span class=\"c\">width=24</span><span class=\"p\">  </span><span class=\"c\"># will set column A size to 24</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">auto_size_columns</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">auto_size_columns</span><span class=\"p\">(</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Auto size column widths.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1443
    },
    {
      "name": "Clear Cell Range",
      "args": [
        {
          "name": "range_string",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "range_string: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Clear cell values for a given range.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param range_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">single cell or range of cells</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># area of cells\nClear Cell Range</span><span class=\"p\">    </span><span class=\"c\">A9:A100</span><span class=\"p\">\n</span><span class=\"c\"># single cell\nClear Cell Range</span><span class=\"p\">    </span><span class=\"c\">A2</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">clear_cell_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;A1&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">clear_cell_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;B2:B50&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Clear cell values for a given range.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1045
    },
    {
      "name": "Close Workbook",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Close the active workbook.</p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Close active workbook\nClose Workbook</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Close active workbook</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">close_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Close the active workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 359
    },
    {
      "name": "Copy Cell Values",
      "args": [
        {
          "name": "source_range",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "source_range: str"
        },
        {
          "name": "target",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "target: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Copy cells from source to target.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">single cell or range of cells</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">copy to this cell</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Copy Cell Values</span><span class=\"p\">   </span><span class=\"c\">A1:D4</span><span class=\"p\">   </span><span class=\"c\">G10</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">copy_cell_values</span><span class=\"p\">(</span><span class=\"s2\">&quot;A1:D4&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;G10&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Copy cells from source to target.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1251
    },
    {
      "name": "Create Workbook",
      "args": [
        {
          "name": "path",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "path: str | None = None"
        },
        {
          "name": "fmt",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "xlsx",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "fmt: str = xlsx"
        },
        {
          "name": "sheet_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create and open a new Excel workbook.</p>\n<p>Automatically also creates a new worksheet with the name <cite>sheet_name</cite>.\n(defaults to &quot;Sheet&quot;)</p>\n<p><strong>Note:</strong> Must be paired with the <tt class=\"docutils literal\">Save Workbook</tt> keyword\nor the newly created workbook will be deleted upon robot completion.</p>\n<p><strong>Note:</strong> The file name/path must be set in either the <tt class=\"docutils literal\">Create Workbook</tt>\nkeyword or the <tt class=\"docutils literal\">Save Workbook</tt> keyword and must include the file extension.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Save path for workbook; defaults to robot root if not provided.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param fmt:</th><td class=\"field-body\">Format of workbook, i.e. xlsx or xls; Defaults to xlsx if not\nprovided.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Custom name for the initial sheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Workbook object.</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Create modern format workbook.\nCreate Workbook</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Create modern format workbook with custom sheet name.\nCreate Workbook</span><span class=\"p\">  </span><span class=\"c\">sheet_name=MyCustomSheetName</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Create modern format workbook with a path set.\nCreate Workbook</span><span class=\"p\">    </span><span class=\"c\">path=${OUTPUT_DIR}${/}orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span><span class=\"p\">\n\n</span><span class=\"c\"># Create legacy format workbook.\nCreate Workbook</span><span class=\"p\">    </span><span class=\"c\">fmt=xls</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span><span class=\"p\">    </span><span class=\"c\">orders.xls</span><span class=\"p\">\n\n</span><span class=\"c\"># Create legacy format workbook with a path set.\n# Note that the file name must be set in the <a href=\"#Create%20Workbook\" class=\"name\">Create Workbook</a> keyword\n#  if the path argument is used.\nCreate Workbook</span><span class=\"p\">    </span><span class=\"c\">path=${OUTPUT_DIR}${/}orders.xls</span><span class=\"p\">    </span><span class=\"c\">fmt=xls</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Create modern format workbook with defaults.</span><span class=\"w\">\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Files</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_workbook</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">(</span><span class=\"s2\">&quot;orders.xlsx&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Create modern format workbook with a path set.</span><span class=\"w\">\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Files</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./output/orders.xlsx&quot;</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s2\">&quot;xlsx&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"c1\"># Create legacy format workbook.</span><span class=\"w\">\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Files</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_workbook</span><span class=\"p\">(</span><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s2\">&quot;xls&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">(</span><span class=\"s2\">&quot;orders.xls&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Create legacy format workbook with a path set.</span><span class=\"w\">\n</span><span class=\"c1\"># Note that the file name must be set in the <a href=\"#Create%20Workbook\" class=\"name\">Create Workbook</a> keyword</span><span class=\"w\">\n</span><span class=\"c1\">#  if the path is used.</span><span class=\"w\">\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Files</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./output/orders.xls&quot;</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s2\">&quot;xls&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Create and open a new Excel workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 220
    },
    {
      "name": "Create Worksheet",
      "args": [
        {
          "name": "name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: str"
        },
        {
          "name": "content",
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "content: Any | None = None"
        },
        {
          "name": "exist_ok",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "exist_ok: bool | None = False"
        },
        {
          "name": "header",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "header: bool | None = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create a new worksheet in the current workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of new worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">Optional content for worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exist_ok:</th><td class=\"field-body\">If <cite>False</cite>, raise an error if name is already in use</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If content is provided, write headers to worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Create a new blank worksheet named &quot;Customers&quot;\nCreate Worksheet</span><span class=\"p\">    </span><span class=\"c\">Customers</span><span class=\"p\">\n\n</span><span class=\"c\"># Create a new worksheet with headers and contents using\n# a List of Dictonaries\n# Don't forget to <a href=\"#Save%20Workbook\" class=\"name\">Save Workbook</a> once your changes are complete\n&amp;{Employees_Row1}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">    </span><span class=\"c\">name=Mark</span><span class=\"p\">    </span><span class=\"c\">age=${58}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{Employees_Row2}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">    </span><span class=\"c\">name=John</span><span class=\"p\">    </span><span class=\"c\">age=${22}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{Employees_Row3}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">    </span><span class=\"c\">name=Adam</span><span class=\"p\">    </span><span class=\"c\">age=${67}</span><span class=\"p\">\n</span><span class=\"c\">&#64;{Worksheet_Data}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">${Worksheet_Data_row1}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">${Worksheet_Data_row2}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">${Worksheet_Data_row3}</span><span class=\"p\">\n</span><span class=\"c\">Create Worksheet</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name=Employees</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">content=${Worksheet_Data}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">header=True</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span><span class=\"p\">\n\n</span><span class=\"c\"># Create a new workseet using a Dictionary of Lists\n# Don't forget to <a href=\"#Save%20Workbook\" class=\"name\">Save Workbook</a> once your changes are complete\n&#64;{Employees_name}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">Mark</span><span class=\"p\">    </span><span class=\"c\">John</span><span class=\"p\">    </span><span class=\"c\">Adam</span><span class=\"p\">\n</span><span class=\"c\">&#64;{Employees_age}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">${58}</span><span class=\"p\">    </span><span class=\"c\">${22}</span><span class=\"p\">    </span><span class=\"c\">${67}</span><span class=\"p\">\n</span><span class=\"c\">&amp;{Worksheet_Data}=</span><span class=\"p\">    </span><span class=\"c\">Create Dictionary</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name=${Worksheet_Data_name}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">age=${Worksheet_Data_age}</span><span class=\"p\">\n</span><span class=\"c\">Create Worksheet</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name=Employees</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">content=${Worksheet_Data}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">header=True</span><span class=\"p\">\n</span><span class=\"c\">Save Workbook</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Create a new blank worksheet named &quot;Customers&quot;</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_worksheet</span><span class=\"p\">(</span><span class=\"s2\">&quot;Customers&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Create a new workseet using a List of Dictionaries</span><span class=\"w\">\n</span><span class=\"c1\"># Don't forget to <a href=\"#Save%20Workbook\" class=\"name\">Save Workbook</a> once your changes are complete</span><span class=\"w\">\n</span><span class=\"n\">Worksheet_Data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">58</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">67</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_worksheet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Employees&quot;</span><span class=\"p\">,</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">Worksheet_Data</span><span class=\"p\">,</span><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"c1\"># Create a new workseet using a Dictionary of Lists</span><span class=\"w\">\n</span><span class=\"c1\"># Don't forget to <a href=\"#Save%20Workbook\" class=\"name\">Save Workbook</a> once your changes are complete</span><span class=\"w\">\n</span><span class=\"n\">Worksheet_Data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Adam&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span>  <span class=\"p\">[</span>    <span class=\"mi\">58</span><span class=\"p\">,</span>     <span class=\"mi\">22</span><span class=\"p\">,</span>     <span class=\"mi\">67</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">create_worksheet</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Employees&quot;</span><span class=\"p\">,</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">Worksheet_Data</span><span class=\"p\">,</span><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Create a new worksheet in the current workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 539
    },
    {
      "name": "Delete Columns",
      "args": [
        {
          "name": "start",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start: int | str"
        },
        {
          "name": "end",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end: int | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete column or columns beginning from start column number/name to\npossible end column number/name.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">column number or name to start deletion from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param end:</th><td class=\"field-body\">optional column number or name for last column to delete</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Columns</span><span class=\"p\">   </span><span class=\"c\">C</span><span class=\"p\">       </span><span class=\"c\"># delete column C\nDelete Columns</span><span class=\"p\">   </span><span class=\"c\">3</span><span class=\"p\">       </span><span class=\"c\"># delete column 3 (same as C)\nDelete Columns</span><span class=\"p\">   </span><span class=\"c\">E</span><span class=\"p\">  </span><span class=\"c\">AA</span><span class=\"p\">   </span><span class=\"c\"># delete rows E-AA</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">delete_columns</span><span class=\"p\">(</span><span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">delete_rows</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;JJ&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Delete column or columns beginning from start column number/name to possible end column number/name.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1103
    },
    {
      "name": "Delete Rows",
      "args": [
        {
          "name": "start",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start: int"
        },
        {
          "name": "end",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end: int | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete row or rows beginning from start row number to\npossible end row number.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">row number to start deletion from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param end:</th><td class=\"field-body\">optional row number for last row to delete</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Delete Rows</span><span class=\"p\">   </span><span class=\"c\">2</span><span class=\"p\">       </span><span class=\"c\"># delete row 2\nDelete Rows</span><span class=\"p\">   </span><span class=\"c\">5</span><span class=\"p\">  </span><span class=\"c\">10</span><span class=\"p\">   </span><span class=\"c\"># delete rows 5-10</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">delete_rows</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">delete_rows</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Delete row or rows beginning from start row number to possible end row number.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1076
    },
    {
      "name": "Find Empty Row",
      "args": [
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Find the first empty row after existing content,\nand return the row number.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet (optional). Defaults to the active worksheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">First row number of empty row</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${next}=</span><span class=\"p\">    </span><span class=\"c\">Find empty row</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"nb\">next</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">find_empty_row</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Find the first empty row after existing content, and return the row number.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 838
    },
    {
      "name": "Get Active Worksheet",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get the name of the worksheet which is currently active.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Active worksheet name</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${Active_Worksheet}=</span><span class=\"p\">    </span><span class=\"c\">Get Active Worksheet</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">Active_Worksheet</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">get_active_worksheet</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Get the name of the worksheet which is currently active.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 487
    },
    {
      "name": "Get Cell Value",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "column",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: str | int"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get a cell value in the given worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to read, e.g. 3</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column, e.g. C or 7</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet (optional). Defaults to active worksheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Cell value</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Read header names\n${column1}=</span><span class=\"p\">    </span><span class=\"c\">Get cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">A</span><span class=\"p\">\n</span><span class=\"c\">${column2}=</span><span class=\"p\">    </span><span class=\"c\">Get cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">B</span><span class=\"p\">\n</span><span class=\"c\">${column3}=</span><span class=\"p\">    </span><span class=\"c\">Get cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">C</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Read header names</span><span class=\"w\">\n</span><span class=\"n\">column1</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">get_cell_value</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">column2</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">get_cell_value</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">column3</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">get_cell_value</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;C&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Get a cell value in the given worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 858
    },
    {
      "name": "Get Worksheet Value",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "column",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: str | int"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Alias for keyword <tt class=\"docutils literal\">Get cell value</tt>, see the original keyword\nfor documentation.</p>\n</div>\n",
      "shortdoc": "Alias for keyword ``Get cell value``, see the original keyword for documentation.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1022
    },
    {
      "name": "Hide Columns",
      "args": [
        {
          "name": "start_column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_column: int | str"
        },
        {
          "name": "end_column",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_column: int | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Hide column or columns in worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_column:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">column number or name to start from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_column:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">optional column number or name for last column</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Hide Columns</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">   </span><span class=\"c\">D</span><span class=\"p\">    </span><span class=\"c\"># hide columns A-D\nHide Columns</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">        </span><span class=\"c\"># hide column A</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">hide_columns</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">hide_columns</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Hide column or columns in worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1496
    },
    {
      "name": "Insert Columns After",
      "args": [
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "amount",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "amount: int = 1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Insert column or columns after a column number/name.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">insert after this column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param amount:</th><td class=\"field-body\">number of columns to insert, default 1</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Insert Columns After</span><span class=\"p\">   </span><span class=\"c\">C</span><span class=\"p\">      </span><span class=\"c\"># insert 1 column after column C\nInsert Columns Before</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">   </span><span class=\"c\"># insert 3 columns after column A</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_columns_after</span><span class=\"p\">(</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_columns_after</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Insert column or columns after a column number/name.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1170
    },
    {
      "name": "Insert Columns Before",
      "args": [
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "amount",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "amount: int = 1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Insert column or columns before a column number/name.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">insert before this column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param amount:</th><td class=\"field-body\">number of columns to insert, default 1</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Insert Columns Before</span><span class=\"p\">   </span><span class=\"c\">C</span><span class=\"p\">      </span><span class=\"c\"># insert 1 column before column C\nInsert Columns Before</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">   </span><span class=\"c\"># insert 3 columns before column A</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_columns_before</span><span class=\"p\">(</span><span class=\"s2\">&quot;C&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_columns_before</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Insert column or columns before a column number/name.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1141
    },
    {
      "name": "Insert Image To Worksheet",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str"
        },
        {
          "name": "path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path: str"
        },
        {
          "name": "scale",
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "1.0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "scale: float = 1.0"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Insert an image into the given cell.</p>\n<p>The <tt class=\"docutils literal\">path</tt> argument should be a local file path to the image file.</p>\n<p>By default the image is inserted in the original size, but it can\nbe scaled with the <tt class=\"docutils literal\">scale</tt> argument. It's scaled with a factor\nwhere the value <tt class=\"docutils literal\">1.0</tt> is the default.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to write</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scale:</th><td class=\"field-body\">Scale of image (optional). Default value is &quot;1.0&quot;.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet (optional). Defaults to the active worksheet.</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Insert image to worksheet</span><span class=\"p\">    </span><span class=\"c\">${last_row}</span><span class=\"p\">    </span><span class=\"c\">A</span><span class=\"p\">    </span><span class=\"c\">screenshot.png</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_image_to_worksheet</span><span class=\"p\">(</span><span class=\"n\">last_row</span><span class=\"p\">,</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;screenshot.png&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Insert an image into the given cell.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 978
    },
    {
      "name": "Insert Rows After",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "amount",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "amount: int = 1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Insert row or rows after a row number.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">insert after this row</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param amount:</th><td class=\"field-body\">number of rows to insert, default 1</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Insert Rows After</span><span class=\"p\">   </span><span class=\"c\">3</span><span class=\"p\">      </span><span class=\"c\"># insert 1 row after row 3\nInsert Rows After</span><span class=\"p\">   </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">   </span><span class=\"c\"># insert 3 rows after row 1</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_rows_after</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_rows_after</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Insert row or rows after a row number.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1225
    },
    {
      "name": "Insert Rows Before",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "amount",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "amount: int = 1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Insert row or rows before a row number.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">insert before this row</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param amount:</th><td class=\"field-body\">number of rows to insert, default 1</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Insert Rows Before</span><span class=\"p\">   </span><span class=\"c\">3</span><span class=\"p\">      </span><span class=\"c\"># insert 1 row before row 3\nInsert Rows Before</span><span class=\"p\">   </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">   </span><span class=\"c\"># insert 3 rows before row 1</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_rows_before</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">insert_rows_before</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Insert row or rows before a row number.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1199
    },
    {
      "name": "List Worksheets",
      "args": [],
      "doc": "<div class=\"document\">\n<p>List all names of worksheets in the given workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">List containing the names of the worksheets</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># List Worksheets will read the worksheet names into a list variable\n# The variable should be declared with the List type &quot;&#64;&quot; when being used\n# to store the sheet names from the List Worksets keyword\n&#64;{sheets}=</span><span class=\"p\">    </span><span class=\"c\">List Worksheets</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># List Worksheets will read the worksheet names into a list variable</span><span class=\"w\">\n</span><span class=\"c1\"># The variable should be declared with the List type &quot;&#64;&quot; when being used</span><span class=\"w\">\n</span><span class=\"c1\"># to store the sheet names from the List Worksets keyword</span><span class=\"w\">\n</span><span class=\"n\">sheets</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">list_worksheets</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "List all names of worksheets in the given workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 440
    },
    {
      "name": "Move Range",
      "args": [
        {
          "name": "range_string",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "range_string: str"
        },
        {
          "name": "rows",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "rows: int = 0"
        },
        {
          "name": "columns",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "columns: int = 0"
        },
        {
          "name": "translate",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "translate: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Move range of cells by given amount of rows and columns.</p>\n<p>Formulas are translated to match new location by default.</p>\n<p><em>Note</em>. There is a bug in the openpyxl on moving negative rows/columns.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param range_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">cell range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param rows:</th><td class=\"field-body\">number of rows to move</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">number of columns to move</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param translate:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">are formulas translated for a new location</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># move range 4 rows down\nMove Range</span><span class=\"p\">   </span><span class=\"c\">E2:E10</span><span class=\"p\">    </span><span class=\"c\">rows=4</span><span class=\"p\">\n</span><span class=\"c\"># move range 2 rows down, 2 columns right\nMove Range</span><span class=\"p\">   </span><span class=\"c\">E2:E10</span><span class=\"p\">    </span><span class=\"c\">rows=2</span><span class=\"p\">  </span><span class=\"c\">columns=2</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">move_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;E2:E10&quot;</span><span class=\"p\">,</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">move_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;E2:E10&quot;</span><span class=\"p\">,</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Move range of cells by given amount of rows and columns.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1627
    },
    {
      "name": "Open Workbook",
      "args": [
        {
          "name": "path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path: str"
        },
        {
          "name": "data_only",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "data_only: bool | None = False"
        },
        {
          "name": "read_only",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "read_only: bool | None = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Open an existing Excel workbook.</p>\n<p>Opens the workbook in memory and sets it as the active workbook.\n<strong>This library can only have one workbook open at a time, and\nany previously opened workbooks are closed first.</strong></p>\n<p>The file can be in either <tt class=\"docutils literal\">.xlsx</tt> or <tt class=\"docutils literal\">.xls</tt> format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">path to Excel file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param data_only:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">controls whether cells with formulas have either\nthe formula (default, False) or the value stored the last time Excel\nread the sheet (True). Affects only <tt class=\"docutils literal\">.xlsx</tt> files.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Workbook object</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Open workbook with only path provided\nOpen Workbook</span><span class=\"p\">    </span><span class=\"c\">path/to/file.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Open workbook with path provided and reading formulas in cells\n# as the value stored\n# Note: Can only be used with XLSX workbooks\nOpen Workbook</span><span class=\"p\">    </span><span class=\"c\">path/to/file.xlsx</span><span class=\"p\">    </span><span class=\"c\">data_only=True</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Open workbook with only path provided</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;path/to/file.xlsx&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Open workbook with path provided and reading formulas in cells</span><span class=\"w\">\n</span><span class=\"c1\"># as the value stored</span><span class=\"w\">\n</span><span class=\"c1\"># Note: Can only be used with XLSX workbooks</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;path/to/file.xlsx&quot;</span><span class=\"p\">,</span> <span class=\"n\">data_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Open an existing Excel workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 310
    },
    {
      "name": "Read Worksheet",
      "args": [
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        },
        {
          "name": "header",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "header: bool | None = False"
        },
        {
          "name": "start",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start: int | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Read the content of a worksheet into a list of dictionaries.</p>\n<p>Each key in the dictionary will be either values from the header row,\nor Excel-style column letters.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to read (optional).\nDefaults to the active worksheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If <cite>True</cite>, use the first row of the worksheet\nas headers for the rest of the rows. Default is <cite>False</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Row index to start reading data from (1-indexed).\nDefault value is row 1.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">List of dictionaries that represents the worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># The most simple form. Column keys will be Column letters.\n${rows}=</span><span class=\"p\">    </span><span class=\"c\">Read Worksheet</span><span class=\"p\">\n\n</span><span class=\"c\"># Since <span class=\"name\">header=True</span> the keys will be the header values\n${rows}=</span><span class=\"p\">    </span><span class=\"c\">Read Worksheet</span><span class=\"p\">     </span><span class=\"c\">header=True</span><span class=\"p\">\n\n</span><span class=\"c\"># Uses the header values as keys and starts reading at row 3\n${rows}=</span><span class=\"p\">    </span><span class=\"c\">Read Worksheet</span><span class=\"p\">     </span><span class=\"c\">header=True</span><span class=\"p\">    </span><span class=\"c\">start=${3}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># The most simple form. Keys will be Column letters.</span><span class=\"w\">\n</span><span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"c1\"># Since <span class=\"name\">header=True</span> the keys will be the header values</span><span class=\"w\">\n</span><span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Uses the header values as keys and starts reading at row 3</span><span class=\"w\">\n</span><span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Read the content of a worksheet into a list of dictionaries.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 621
    },
    {
      "name": "Read Worksheet As Table",
      "args": [
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        },
        {
          "name": "header",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "header: bool = False"
        },
        {
          "name": "trim",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "trim: bool = True"
        },
        {
          "name": "start",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start: int | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Read the contents of a worksheet into a Table container. Allows\nsorting/filtering/manipulating using the <tt class=\"docutils literal\">RPA.Tables</tt> library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to read (optional).\nDefaults to the active worksheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param header:</th><td class=\"field-body\">If <cite>True</cite>, use the first row of the worksheet\nas headers for the rest of the rows. Default value is False.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">Remove all empty rows from the end of the worksheet.\nDefault value is True.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param start:</th><td class=\"field-body\">Row index to start reading data from (1-indexed).\nDefault value is row 1.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Table object that represents the worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># The most simple form. Column keys will be Column letters.\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Read Worksheet As Table</span><span class=\"p\">\n\n</span><span class=\"c\"># Since <span class=\"name\">header=True</span> the keys will be the header values\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Read Worksheet As Table</span><span class=\"p\">     </span><span class=\"c\">header=True</span><span class=\"p\">\n\n</span><span class=\"c\"># Uses the header values as keys and starts reading at row 3\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Read Worksheet As Table</span><span class=\"p\">     </span><span class=\"c\">header=True</span><span class=\"p\">    </span><span class=\"c\">start=${3}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># The most simple form. Keys will be Column letters.</span><span class=\"w\">\n</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet_as_table</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"c1\"># Since <span class=\"name\">header=True</span> the keys will be the header values</span><span class=\"w\">\n</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet_as_table</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Uses the header values as keys and starts reading at row 3</span><span class=\"w\">\n</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">read_worksheet_as_table</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Read the contents of a worksheet into a Table container. Allows sorting/filtering/manipulating using the ``RPA.Tables`` library.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 667
    },
    {
      "name": "Remove Worksheet",
      "args": [
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove a worksheet from the active workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet to remove (optional).\nDefaults to the active worksheet.</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Remove last worksheet\n${sheets}=</span><span class=\"p\">       </span><span class=\"c\">List worksheets</span><span class=\"p\">\n</span><span class=\"c\">Remove worksheet</span><span class=\"p\">    </span><span class=\"c\">${sheets}[-1]</span><span class=\"p\">\n\n</span><span class=\"c\"># Remove worksheet by name\nRemove Worksheet</span><span class=\"p\">    </span><span class=\"c\">Sheet</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Remove last worksheet</span><span class=\"w\">\n</span><span class=\"n\">sheets</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">list_worksheets</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">remove_worksheet</span><span class=\"p\">(</span><span class=\"n\">sheets</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\">\n\n</span><span class=\"c1\"># Remove worksheet by name</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">remove_worksheet</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sheet&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove a worksheet from the active workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 790
    },
    {
      "name": "Rename Worksheet",
      "args": [
        {
          "name": "src_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "src_name: str"
        },
        {
          "name": "dst_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "dst_name: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Rename an existing worksheet in the active workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param src_name:</th><td class=\"field-body\">Current name of worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dst_name:</th><td class=\"field-body\">Future name of worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Rename worksheet</span><span class=\"p\">    </span><span class=\"c\">Sheet</span><span class=\"p\">    </span><span class=\"c\">Orders</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">rename_worksheet</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sheet&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;Orders&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Rename an existing worksheet in the active workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 819
    },
    {
      "name": "Save Workbook",
      "args": [
        {
          "name": "path",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Save the active workbook.</p>\n<p><strong>Note:</strong> No changes to the workbook are saved to the actual file unless\nthis keyword is called.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to save to. If not given, uses path given\nwhen opened or created.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Workbook object</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Saving the active workbook to a new location/filename or saving to\n# a new location/filename\n# Note: You cannot use Save Workbook to convert from XLSX to XLS\n# or vice-versa\nSave Workbook</span><span class=\"p\">   </span><span class=\"c\">path=${OUTPUT_DIR}${/}orders.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Saving the active workbook changes if location/filename were set\n# in Create Workbook or Open Workbook\nSave Workbook</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Saving the active workbook to a new location/filename or saving to</span><span class=\"w\">\n</span><span class=\"c1\"># a new location/filename</span><span class=\"w\">\n</span><span class=\"c1\"># Note: You cannot use Save Workbook to convert from XLSX to XLS</span><span class=\"w\">\n</span><span class=\"c1\"># or vice-versa</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./output/orders.xlsx&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Saving the active workbook changes if location/filename were set</span><span class=\"w\">\n</span><span class=\"c1\"># in Create Workbook or Open Workbook</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">save_workbook</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Save the active workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 380
    },
    {
      "name": "Set Active Worksheet",
      "args": [
        {
          "name": "value",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: str | int"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set the active worksheet.</p>\n<p>This keyword can be used to set the default worksheet for keywords,\nwhich removes the need to specify the worksheet name for each keyword.\nIt can always be overridden on a per-keyword basis.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Index or name of worksheet</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set using the name of the worksheet\nSet Active Worksheet</span><span class=\"p\">    </span><span class=\"c\">Customers</span><span class=\"p\">\n\n</span><span class=\"c\"># Set using the index of the worksheet\n# Worksheet index begings at 0\nSet Active Worksheet</span><span class=\"p\">    </span><span class=\"c\">2</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Set using the name of the worksheet</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_active_worksheet</span><span class=\"p\">(</span><span class=\"s2\">&quot;Customers&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Set using the index of the worksheet</span><span class=\"w\">\n</span><span class=\"c1\"># Worksheet index begings at 0</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_active_worksheet</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set the active worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 507
    },
    {
      "name": "Set Cell Format",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "column",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: str | int"
        },
        {
          "name": "fmt",
          "types": [
            "str",
            "float"
          ],
          "typedocs": {
            "str": "string",
            "float": "float"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "fmt: str | float"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set format for cell.</p>\n<p>Does not affect the values themselves, but changes how the values\nare displayed when opening with an external application such as\nMicrosoft Excel or LibreOffice Calc.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to write, e.g. 3</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column, e.g. C or 7</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param fmt:</th><td class=\"field-body\">Format code for cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet (optional). Defaults to active worksheet.</td>\n</tr>\n</tbody>\n</table>\n<p>The <tt class=\"docutils literal\">fmt</tt> argument accepts all format code values that\nare supported by the aforementioned applications.</p>\n<p>Some examples of valid values:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"20%\" />\n<col width=\"80%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Format</th>\n<th class=\"head\">Explanation</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>0.00</td>\n<td>Number with two decimal precision</td>\n</tr>\n<tr><td>0%</td>\n<td>Percentage without decimals</td>\n</tr>\n<tr><td>MM/DD/YY</td>\n<td>Date with month, day, and year</td>\n</tr>\n<tr><td>&#64;</td>\n<td>Text value</td>\n</tr>\n<tr><td>BOOLEAN</td>\n<td>Boolean value</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set value to have one decimal precision\nSet cell format</span><span class=\"p\">   </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">B</span><span class=\"p\">    </span><span class=\"c\">00.0</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Set value to have one decimal precision</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_cell_format</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"mf\">00.0</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set format for cell.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 930
    },
    {
      "name": "Set Cell Formula",
      "args": [
        {
          "name": "range_string",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "range_string: str"
        },
        {
          "name": "formula",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "formula: str"
        },
        {
          "name": "transpose",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "transpose: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set cell formula for given range of cells.</p>\n<p>If <cite>transpose</cite> is set then formula is set for first cell of the\nrange and the rest of cells will transpose the function to match\nto that cell.</p>\n<p>Otherwise (by default) all cells will get the same formula.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param range_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">cell range</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param formula:</th><td class=\"field-body\">formula for the cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param transpose:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on True the cell formulas will be transposed</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># all cells will have same formula\nSet Cell Formula</span><span class=\"p\">   </span><span class=\"c\">E2:E10</span><span class=\"p\">    </span><span class=\"c\">=B2+5</span><span class=\"p\">\n</span><span class=\"c\"># cells will have transposed formulas\n# E2 will have =B2+5\n# E3 will have =B3+5\n# etc\nSet Cell Formula</span><span class=\"p\">   </span><span class=\"c\">E2:E10</span><span class=\"p\">    </span><span class=\"c\">=B2+5</span><span class=\"p\">   </span><span class=\"c\">True</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_cell_formula</span><span class=\"p\">(</span><span class=\"s2\">&quot;E2:E10&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;=B2+5&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_cell_formula</span><span class=\"p\">(</span><span class=\"s2\">&quot;E2:E10&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;=B2+5&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set cell formula for given range of cells.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1574
    },
    {
      "name": "Set Cell Value",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "column",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: str | int"
        },
        {
          "name": "value",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Any"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        },
        {
          "name": "fmt",
          "types": [
            "str",
            "float",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "fmt: str | float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set a cell value in the given worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">Index of row to write, e.g. 3</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Name or index of column, e.g. C or 7</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">New value of cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet (optional). Defaults to active worksheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param fmt:</th><td class=\"field-body\">Format code for cell (optional)</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Set a value in the first row and column\nSet cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">Some value</span><span class=\"p\">\n</span><span class=\"c\">Set cell value</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">A</span><span class=\"p\">    </span><span class=\"c\">Some value</span><span class=\"p\">\n\n</span><span class=\"c\"># Set a value with cell formatting\nSet cell value</span><span class=\"p\">    </span><span class=\"c\">2</span><span class=\"p\">    </span><span class=\"c\">B</span><span class=\"p\">    </span><span class=\"c\">${value}</span><span class=\"p\">    </span><span class=\"c\">fmt=0%</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># Set a value in the first row and column</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_cell_value</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Some value&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_cell_value</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Some value&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># Set a value with cell formatting</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_cell_value</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s2\">&quot;0%&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set a cell value in the given worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 887
    },
    {
      "name": "Set Cell Values",
      "args": [
        {
          "name": "start_cell",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_cell: str"
        },
        {
          "name": "values",
          "types": [
            "list",
            "Table"
          ],
          "typedocs": {
            "list": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "values: list | Table"
        },
        {
          "name": "table_heading",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "table_heading: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set cell values given as list of lists or as a <cite>RPA.Tables.Table</cite>.</p>\n<p><em>Note.</em> Will overwrite cells if table structure causes cells to overlap.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_cell:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">starting cell in a string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\">list of lists or a Table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param table_heading:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if values are given as a Table, this parameter\ndefines if Table headings should be inserted as a row</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{all_rows}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">\n</span><span class=\"c\">${headers}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">first</span><span class=\"p\">    </span><span class=\"c\">second</span><span class=\"p\">   </span><span class=\"c\">third</span><span class=\"p\">  </span><span class=\"c\">fourth</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${num}</span><span class=\"p\">    </span><span class=\"c\">IN RANGE</span><span class=\"p\">    </span><span class=\"c\">1</span><span class=\"p\">    </span><span class=\"c\">2000</span><span class=\"p\">\n    </span><span class=\"c\">&#64;{row}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">${num}</span><span class=\"p\">    </span><span class=\"c\">${num+1}</span><span class=\"p\">    </span><span class=\"c\">${num*2}</span><span class=\"p\">    </span><span class=\"c\">${num*4}</span><span class=\"p\">\n    </span><span class=\"c\">Append To List</span><span class=\"p\">    </span><span class=\"c\">${all_rows}</span><span class=\"p\">    </span><span class=\"c\">${row}</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">#  Set Cell Values from Table (include headers)\n${table}=</span><span class=\"p\">    </span><span class=\"c\">Create Table</span><span class=\"p\">    </span><span class=\"c\">${all_rows}</span><span class=\"p\">    </span><span class=\"c\">columns=${headers}</span><span class=\"p\">\n</span><span class=\"c\">Set Cell Values</span><span class=\"p\">   </span><span class=\"c\">G1</span><span class=\"p\">   </span><span class=\"c\">${table}</span><span class=\"p\">   </span><span class=\"c\">True</span><span class=\"p\">\n</span><span class=\"c\">#  Set Cell Values from a list of lists\n# uncomment if headings should be added\n# Append To List  ${all_rows}   ${headers}\nSet Cell Values</span><span class=\"p\">   </span><span class=\"c\">M1</span><span class=\"p\">   </span><span class=\"c\">${all_rows}</span><span class=\"p\">\n\n</span><span class=\"c\"># Simplest form of adding values\n&#64;{values}=</span><span class=\"p\">    </span><span class=\"c\">Evaluate</span><span class=\"p\">    </span><span class=\"c\">[[1,2,3],[4,5,6],['a','b','c','d']]</span><span class=\"p\">\n</span><span class=\"c\">Set Cell Values</span><span class=\"p\">   </span><span class=\"c\">A1</span><span class=\"p\">   </span><span class=\"c\">${values}</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">data</span> <span class=\"o\">=</span>  <span class=\"p\">[[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">],[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">],[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"s1\">'b'</span><span class=\"p\">,</span><span class=\"s1\">'c'</span><span class=\"p\">,</span><span class=\"s1\">'d'</span><span class=\"p\">]]</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_cell_values</span><span class=\"p\">(</span><span class=\"s2\">&quot;E2&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set cell values given as list of lists or as a `RPA.Tables.Table`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1665
    },
    {
      "name": "Set Styles",
      "args": [
        {
          "name": "range_string",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "range_string: str"
        },
        {
          "name": "font_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "font_name: str | None = None"
        },
        {
          "name": "family",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "family: str | None = None"
        },
        {
          "name": "size",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "size: int | None = None"
        },
        {
          "name": "bold",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bold: bool = False"
        },
        {
          "name": "italic",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "italic: bool = False"
        },
        {
          "name": "underline",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "underline: bool = False"
        },
        {
          "name": "strikethrough",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "strikethrough: bool = False"
        },
        {
          "name": "cell_fill",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "cell_fill: str | None = None"
        },
        {
          "name": "color",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "color: str | None = None"
        },
        {
          "name": "align_horizontal",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "align_horizontal: str | None = None"
        },
        {
          "name": "align_vertical",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "align_vertical: str | None = None"
        },
        {
          "name": "number_format",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "number_format: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set styles for range of cells.</p>\n<p>Possible values for the <cite>align_horizontal</cite>:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>general</li>\n<li>left</li>\n<li>center</li>\n<li>right</li>\n<li>fill</li>\n<li>justify</li>\n<li>centerContinuous</li>\n<li>distributed</li>\n</ul>\n</blockquote>\n<p>Possible values for the <cite>align_vertical</cite>:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>top</li>\n<li>center</li>\n<li>bottom</li>\n<li>justify</li>\n<li>distributed</li>\n</ul>\n</blockquote>\n<p>Some examples for <cite>number_formats</cite>:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>General</li>\n<li>0</li>\n<li>0.00</li>\n<li>#,##0</li>\n<li>#,##0.00</li>\n<li>&quot;$&quot;#,##0_);(&quot;$&quot;#,##0)</li>\n<li>&quot;$&quot;#,##0_);[Red](&quot;$&quot;#,##0)</li>\n<li>0%</li>\n<li>0.00%</li>\n<li>0.00E+00</li>\n<li># ?/?</li>\n<li># ??/??</li>\n<li>mm-dd-yy</li>\n<li>d-mmm-yy</li>\n<li>d-mmm</li>\n<li>h:mm AM/PM</li>\n<li>h:mm:ss AM/PM</li>\n<li>h:mm</li>\n<li>h:mm:ss</li>\n<li>m/d/yy h:mm</li>\n</ul>\n</blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param range_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">single cell or range of cells</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param font_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the font</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param family:</th><td class=\"field-body\">font family name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param size:</th><td class=\"field-body\">size for the font</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param bold:</th><td class=\"field-body\">font style bold</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param italic:</th><td class=\"field-body\">font style italics</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param underline:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">font style underline</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param strikethrough:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">font style strikethrough</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param cell_fill:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">cell fill color, in hex or color name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param color:</th><td class=\"field-body\">font color, in hex or color name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param align_horizontal:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">cell horizontal alignment</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param align_vertical:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">cell vertical alignment</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">cell number format</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Styles</span><span class=\"p\">    </span><span class=\"c\">A1:D4</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">bold=True</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">cell_fill=lightblue</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">align_horizontal=center</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">number_format=h:mm AM/PM</span><span class=\"p\">\n\n</span><span class=\"c\">Set Styles</span><span class=\"p\">    </span><span class=\"c\">E2</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">strikethrough=True</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">color=FF0000</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">set_styles</span><span class=\"p\">(</span><span class=\"s2\">&quot;A1:D4&quot;</span><span class=\"p\">,</span> <span class=\"n\">bold</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">font_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Arial&quot;</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set styles for range of cells.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1295
    },
    {
      "name": "Set Worksheet Value",
      "args": [
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int"
        },
        {
          "name": "column",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: str | int"
        },
        {
          "name": "value",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Any"
        },
        {
          "name": "name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name: str | None = None"
        },
        {
          "name": "fmt",
          "types": [
            "str",
            "float",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "fmt: str | float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Alias for keyword <tt class=\"docutils literal\">Set cell value</tt>, see the original keyword\nfor documentation.</p>\n</div>\n",
      "shortdoc": "Alias for keyword ``Set cell value``, see the original keyword for documentation.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1031
    },
    {
      "name": "Unhide Columns",
      "args": [
        {
          "name": "start_column",
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_column: int | str"
        },
        {
          "name": "end_column",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_column: int | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Unhide column or columns in worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_column:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">column number or name to start from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_column:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">optional column number or name for last column</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Unhide Columns</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">   </span><span class=\"c\">D</span><span class=\"p\">    </span><span class=\"c\"># unhide columns A-D\nUnhide Columns</span><span class=\"p\">   </span><span class=\"c\">A</span><span class=\"p\">        </span><span class=\"c\"># unhide column A</span>\n</pre>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">unhide_columns</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;D&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">unhide_columns</span><span class=\"p\">(</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Unhide column or columns in worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 1526
    },
    {
      "name": "Worksheet Exists",
      "args": [
        {
          "name": "name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return True if worksheet with given name is in workbook.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of worksheet you are looking for</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if the worksheet exists, <cite>False</cite> otherwise</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># To use Worksheet Exists in a conditional statement set it to\n# a variable first, like you see here, and then compare the\n# variable to ${TRUE} or ${FALSE}\n${Does_Worksheet_Exist}=</span><span class=\"p\">    </span><span class=\"c\">Worksheet Exists</span><span class=\"p\">    </span><span class=\"c\">Sheet</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">Does_Worksheet_Exist</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">worksheet_exists</span><span class=\"p\">(</span><span class=\"s2\">&quot;Sheet&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Return True if worksheet with given name is in workbook.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Files.py",
      "lineno": 465
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Append Rows To Worksheet",
        "Create Worksheet",
        "Move Range",
        "Open Workbook",
        "Read Worksheet",
        "Read Worksheet As Table",
        "Set Cell Formula",
        "Set Cell Values",
        "Set Styles"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "float",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#float\">float</a> built-in function.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>3.14</code>, <code>2.9979e8</code>, <code>10 000.000 01</code></p>",
      "usages": [
        "Insert Image To Worksheet",
        "Set Cell Format",
        "Set Cell Value",
        "Set Worksheet Value"
      ],
      "accepts": [
        "string",
        "Real"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Append Rows To Worksheet",
        "Auto Size Columns",
        "Delete Columns",
        "Delete Rows",
        "Get Cell Value",
        "Get Worksheet Value",
        "Hide Columns",
        "Insert Columns After",
        "Insert Columns Before",
        "Insert Image To Worksheet",
        "Insert Rows After",
        "Insert Rows Before",
        "Move Range",
        "Read Worksheet",
        "Read Worksheet As Table",
        "Set Active Worksheet",
        "Set Cell Format",
        "Set Cell Value",
        "Set Styles",
        "Set Worksheet Value",
        "Unhide Columns"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Set Cell Values"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Append Rows To Worksheet",
        "Auto Size Columns",
        "Create Workbook",
        "Create Worksheet",
        "Delete Columns",
        "Delete Rows",
        "Find Empty Row",
        "Get Cell Value",
        "Get Worksheet Value",
        "Hide Columns",
        "Insert Image To Worksheet",
        "Open Workbook",
        "Read Worksheet",
        "Read Worksheet As Table",
        "Remove Worksheet",
        "Save Workbook",
        "Set Cell Format",
        "Set Cell Value",
        "Set Styles",
        "Set Worksheet Value",
        "Unhide Columns"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Append Rows To Worksheet",
        "Auto Size Columns",
        "Clear Cell Range",
        "Copy Cell Values",
        "Create Workbook",
        "Create Worksheet",
        "Delete Columns",
        "Find Empty Row",
        "Get Cell Value",
        "Get Worksheet Value",
        "Hide Columns",
        "Insert Columns After",
        "Insert Columns Before",
        "Insert Image To Worksheet",
        "Move Range",
        "Open Workbook",
        "Read Worksheet",
        "Read Worksheet As Table",
        "Remove Worksheet",
        "Rename Worksheet",
        "Save Workbook",
        "Set Active Worksheet",
        "Set Cell Format",
        "Set Cell Formula",
        "Set Cell Value",
        "Set Cell Values",
        "Set Styles",
        "Set Worksheet Value",
        "Unhide Columns",
        "Worksheet Exists"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}