{
  "specversion": 2,
  "name": "Camunda.PDF",
  "doc": "<div class=\"document\">\n<p><cite>PDF</cite> is a library for managing PDF documents.</p>\n<p>It can be used to extract text from PDFs, add watermarks to pages, and\ndecrypt/encrypt documents.</p>\n<p>Merging and splitting PDFs is supported by <tt class=\"docutils literal\">Add Files To PDF</tt> keyword. Read\nthe keyword documentation for examples.</p>\n<p>There is also limited support for updating form field values. (check\n<tt class=\"docutils literal\">Set Field Value</tt> and <tt class=\"docutils literal\">Save Field Values</tt> for more info)</p>\n<p>The input PDF file can be passed as an argument to the keywords, or it can be\nomitted if you first call <tt class=\"docutils literal\">Open PDF</tt>. A reference to the current active PDF will\nbe stored in the library instance and can be changed by using the <tt class=\"docutils literal\">Switch To PDF</tt>\nkeyword with another PDF file path, therefore you can asynchronously work with\nmultiple PDFs.</p>\n<div class=\"admonition attention\">\n<p class=\"first admonition-title\">Attention!</p>\n<p class=\"last\">Keep in mind that this library works with text-based PDFs, and it <strong>can't\nextract information from an image-based (scan)</strong> PDF file. For accurate\nresults, you have to use specialized external services wrapped by the\n<tt class=\"docutils literal\">Camunda.DocumentAI</tt> library.</p>\n</div>\n<p>Portal example with video recording demo for parsing PDF invoices:\n<a class=\"reference external\" href=\"https://github.com/robocorp/example-parse-pdf-invoice\">https://github.com/robocorp/example-parse-pdf-invoice</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">Camunda.PDF</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">String</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Extract Data From First Page</span><span class=\"p\">\n    ${</span><span class=\"nv\">text</span><span class=\"p\">} =    </span><span class=\"nf\">Get Text From PDF</span><span class=\"p\">    </span><span class=\"s\">report.pdf</span><span class=\"p\">\n    ${</span><span class=\"nv\">lines</span><span class=\"p\">} =     </span><span class=\"nf\">Get Lines Matching Regexp</span><span class=\"p\">    ${</span><span class=\"nv\">text</span><span class=\"p\">}</span><span class=\"s\">[</span><span class=\"p\">${</span><span class=\"nv\">1</span><span class=\"p\">}</span><span class=\"s\">]</span><span class=\"p\">    </span><span class=\"s\">.+pain.+</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    ${</span><span class=\"nv\">lines</span><span class=\"p\">}\n\n</span><span class=\"gu\">Get Invoice Number</span><span class=\"p\">\n    </span><span class=\"nf\">Open Pdf</span><span class=\"p\">    </span><span class=\"s\">invoice.pdf</span><span class=\"p\">\n    ${</span><span class=\"nv\">matches</span><span class=\"p\">} =  </span><span class=\"nf\">Find Text</span><span class=\"p\">    </span><span class=\"s\">Invoice Number</span><span class=\"p\">\n    </span><span class=\"nf\">Log List</span><span class=\"p\">      ${</span><span class=\"nv\">matches</span><span class=\"p\">}\n\n</span><span class=\"gu\">Fill Form Fields</span><span class=\"p\">\n    </span><span class=\"nf\">Switch To Pdf</span><span class=\"p\">    </span><span class=\"s\">form.pdf</span><span class=\"p\">\n    ${</span><span class=\"nv\">fields</span><span class=\"p\">} =     </span><span class=\"nf\">Get Input Fields</span><span class=\"p\">   </span><span class=\"s\">encoding=utf-16</span><span class=\"p\">\n    </span><span class=\"nf\">Log Dictionary</span><span class=\"p\">    ${</span><span class=\"nv\">fields</span><span class=\"p\">}\n    </span><span class=\"nf\">Set Field Value</span><span class=\"p\">    </span><span class=\"s\">Given Name Text Box</span><span class=\"p\">    </span><span class=\"s\">Mark</span><span class=\"p\">\n    </span><span class=\"nf\">Save Field Values</span><span class=\"p\">    </span><span class=\"s\">output_path=</span><span class=\"p\">${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">completed-form.pdf</span><span class=\"p\">\n    ...                  </span><span class=\"s\">use_appearances_writer=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">robot.libraries.String</span> <span class=\"kn\">import</span> <span class=\"n\">String</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">String</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">extract_data_from_first_page</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_text_from_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;report.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">get_lines_matching_regexp</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"s2\">&quot;.+pain.+&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lines</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">get_invoice_number</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;invoice.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">find_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invoice Number&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">fill_form_fields</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">switch_to_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;form.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_input_fields</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-16&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_field_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;Given Name Text Box&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;completed-form.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">use_appearances_writer</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2025-02-03T13:00:04+00:00",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/__init__.py",
  "lineno": 11,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Add Files To Pdf",
      "args": [
        {
          "name": "files",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "list",
            "None"
          ],
          "typedocs": {
            "list": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "files: list | None = None"
        },
        {
          "name": "target_document",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "target_document: str | None = None"
        },
        {
          "name": "append",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "append: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Add images and/or pdfs to new PDF document.</p>\n<p>Supports merging and splitting PDFs.</p>\n<p>Image formats supported are JPEG, PNG and GIF.</p>\n<p>The file can be added with extra properties by\ndenoting <cite>:</cite> at the end of the filename. Each\nproperty should be separated by comma.</p>\n<p>Supported extra properties for PDFs are:</p>\n<ul class=\"simple\">\n<li>page and/or page ranges</li>\n<li>no extras means that all source PDF pages are added\ninto new PDF</li>\n</ul>\n<p>Supported extra properties for images are:</p>\n<ul class=\"simple\">\n<li>format, the PDF page format, for example. Letter or A4</li>\n<li>rotate, how many degrees image is rotated counter-clockwise</li>\n<li>align, only possible value at the moment is center</li>\n<li>orientation, the PDF page orientation for the image, possible\nvalues P (portrait) or L (landscape)</li>\n<li>x/y, coordinates for adjusting image position on the page</li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Add files to pdf</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create List</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">invoice.pdf</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png:align=center</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">robot.pdf:1</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png:x=0,y=0</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">robot.pdf:2-10,15</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">approved.png</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">landscape_image.png:rotate=-90,orientation=L</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">landscape_image.png:format=Letter</span><span class=\"p\">\n    </span><span class=\"nf\">Add Files To PDF</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">newdoc.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Merge pdfs</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create List</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">invoice.pdf</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">robot.pdf:1</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">TESTDATA_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">robot.pdf:2-10,15</span><span class=\"p\">\n    </span><span class=\"nf\">Add Files To Pdf</span><span class=\"p\">    ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">merged-doc.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Split pdf</span><span class=\"p\">\n    ${</span><span class=\"nv\">files</span><span class=\"p\">}=    </span><span class=\"nf\">Create List</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">robot.pdf:2-10,15</span><span class=\"p\">\n    </span><span class=\"nf\">Add Files To Pdf</span><span class=\"p\">     ${</span><span class=\"nv\">files</span><span class=\"p\">}    </span><span class=\"s\">split-doc.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_addfiles</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">list_of_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>        <span class=\"s1\">'invoice.pdf'</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s1\">'approved.png:align=center'</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s1\">'robot.pdf:1'</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s1\">'approved.png:x=0,y=0'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"p\">]</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">add_files_to_pdf</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">list_of_files</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">target_document</span><span class=\"o\">=</span><span class=\"s2\">&quot;output/output.pdf&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_merge</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">list_of_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>        <span class=\"s1\">'invoice.pdf'</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s1\">'robot.pdf:1'</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s1\">'robot.pdf:2-10,15'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"p\">]</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">add_files_to_pdf</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">list_of_files</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">target_document</span><span class=\"o\">=</span><span class=\"s2\">&quot;output/merged-doc.pdf&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_split</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">list_of_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>        <span class=\"s1\">'robot.pdf:2-10,15'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"p\">]</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">add_files_to_pdf</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">list_of_files</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">target_document</span><span class=\"o\">=</span><span class=\"s2\">&quot;output/split-doc.pdf&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of filepaths to add into PDF (can be either images or PDFs)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_document:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param append:</th><td class=\"field-body\">appends files to existing document if <cite>append</cite> is <cite>True</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Add images and/or pdfs to new PDF document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 1204
    },
    {
      "name": "Add Watermark Image To Pdf",
      "args": [
        {
          "name": "image_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "Path",
                "typedoc": "Path",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "Path"
          ],
          "typedocs": {
            "str": "string",
            "Path": "Path"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "image_path: str | Path"
        },
        {
          "name": "output_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "Path",
                "typedoc": "Path",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "Path"
          ],
          "typedocs": {
            "str": "string",
            "Path": "Path"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "output_path: str | Path"
        },
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "Path",
                "typedoc": "Path",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "Path",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "Path": "Path",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | Path | None = None"
        },
        {
          "name": "coverage",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "0.2",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "coverage: float = 0.2"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Add an image into an existing or new PDF.</p>\n<p>If no source path is given, assume a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keyword ***</span><span class=\"p\">\n</span><span class=\"gu\">Indicate approved with watermark</span><span class=\"p\">\n    </span><span class=\"nf\">Add Watermark Image To PDF</span><span class=\"p\">\n    ...             </span><span class=\"s\">image_path=approved.png</span><span class=\"p\">\n    ...             </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...             </span><span class=\"s\">output_path=output/output.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">indicate_approved_with_watermark</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">add_watermark_image_to_pdf</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">image_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;approved.png&quot;</span><span class=\"w\">\n</span>        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"w\">\n</span>        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;output/output.pdf&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to image file to add into PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">filepath to source, if not given add image to currently\nactive PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath of target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param coverage:</th><td class=\"field-body\">how the watermark image should be scaled on page,\ndefaults to 0.2</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Add an image into an existing or new PDF.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 889
    },
    {
      "name": "Close All Pdfs",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Close all opened PDF file descriptors.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Close Multiple PDFs</span><span class=\"p\">\n    </span><span class=\"nf\">Close all pdfs</span>\n</pre>\n</div>\n",
      "shortdoc": "Close all opened PDF file descriptors.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 103
    },
    {
      "name": "Close Pdf",
      "args": [
        {
          "name": "source_pdf",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_pdf: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Close PDF file descriptor for a certain file.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Close just one pdf</span><span class=\"p\">\n    </span><span class=\"nf\">Close pdf</span><span class=\"p\">   </span><span class=\"s\">path/to/the/pdf/file.pdf</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_pdf:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if file descriptor for the file is not found.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Close PDF file descriptor for a certain file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 121
    },
    {
      "name": "Convert",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "trim",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "trim: bool = True"
        },
        {
          "name": "pagenum",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "int",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pagenum: str | int | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Parse source PDF into entities.</p>\n<p>These entities can be used for text searches or XML dumping for example. The\nconversion will be done automatically when using the dependent keywords\ndirectly.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source PDF filepath</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">trim whitespace from the text is set to True (default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pagenum:</th><td class=\"field-body\">Page number where search is performed on, defaults to <cite>None</cite>.\n(meaning all pages get converted -- numbers start from 1)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">Camunda.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Convert</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">convert</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Parse source PDF into entities.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/model.py",
      "lineno": 397
    },
    {
      "name": "Decrypt Pdf",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "source_path: str"
        },
        {
          "name": "output_path",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "output_path: str"
        },
        {
          "name": "password",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "password: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Decrypt PDF with password.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Make PDF human readable</span><span class=\"p\">\n    ${</span><span class=\"nv\">success</span><span class=\"p\">}=  </span><span class=\"nf\">Decrypt PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">make_pdf_human_readable</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">decrypt_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the decrypted pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">password as a string.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if decrypt was successful, else False or Exception.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on decryption errors.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Decrypt PDF with password.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 790
    },
    {
      "name": "Dump Pdf As Xml",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get PDFMiner format XML dump of the PDF</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">Camunda.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    ${</span><span class=\"nv\">xml</span><span class=\"p\">}=  </span><span class=\"nf\">Dump PDF as XML</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">xml</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">dump_pdf_as_xml</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">XML content as a string</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get PDFMiner format XML dump of the PDF",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/model.py",
      "lineno": 765
    },
    {
      "name": "Encrypt Pdf",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "output_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "output_path: str | None = None"
        },
        {
          "name": "user_pwd",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "user_pwd: str = "
        },
        {
          "name": "owner_pwd",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "owner_pwd: str | None = None"
        },
        {
          "name": "use_128bit",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_128bit: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Encrypt a PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Secure this PDF</span><span class=\"p\">\n    </span><span class=\"nf\">Encrypt PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Secure this PDF and set passwords</span><span class=\"p\">\n    </span><span class=\"nf\">Encrypt PDF</span><span class=\"p\">\n    ...    </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...    </span><span class=\"s\">output_path=/tmp/new/sample_encrypted.pdf</span><span class=\"p\">\n    ...    </span><span class=\"s\">user_pwd=complex_password_here</span><span class=\"p\">\n    ...    </span><span class=\"s\">owner_pwd=different_complex_password_here</span><span class=\"p\">\n    ...    </span><span class=\"s\">use_128bit=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">secure_this_pdf</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">encrypt_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the target pdf, stored by default\nin the robot output directory as <tt class=\"docutils literal\">output.pdf</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param user_pwd:</th><td class=\"field-body\">allows opening and reading PDF with restrictions.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param owner_pwd:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">allows opening PDF without any restrictions, by\ndefault same <cite>user_pwd</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_128bit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">whether to 128bit encryption, when false 40bit\nencryption is used, default True.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Encrypt a PDF document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 725
    },
    {
      "name": "Extract Pages From Pdf",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "output_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "output_path: str | None = None"
        },
        {
          "name": "pages",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "int",
            "str",
            "List[int]",
            "List[str]",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "List": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pages: int | str | List[int] | List[str] | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Extract pages from source PDF and save to a new PDF document.</p>\n<p>Page numbers start from 1.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Save PDF pages to a new document</span><span class=\"p\">\n    ${</span><span class=\"nv\">pages</span><span class=\"p\">}=    </span><span class=\"nf\">Extract Pages From PDF</span><span class=\"p\">\n    ...          </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">output_path=/tmp/output.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">pages=5</span><span class=\"p\">\n\n</span><span class=\"gu\">Save PDF pages from open PDF to a new document</span><span class=\"p\">\n    ${</span><span class=\"nv\">pages</span><span class=\"p\">}=    </span><span class=\"nf\">Extract Pages From PDF</span><span class=\"p\">\n    ...          </span><span class=\"s\">output_path=/tmp/output.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">pages=5</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">save_pdf_pages_to_a_new_document</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">extract_pages_from_pdf</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/output.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the target pdf, stored by default\nin the robot output directory as <tt class=\"docutils literal\">output.pdf</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to extract from PDF (numbers start from 1)\nif None then extracts all pages.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Extract pages from source PDF and save to a new PDF document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 597
    },
    {
      "name": "Find Text",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: str"
        },
        {
          "name": "pagenum",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pagenum: int | str = 1"
        },
        {
          "name": "direction",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "right",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "direction: str = right"
        },
        {
          "name": "closest_neighbours",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "int",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "closest_neighbours: str | int | None = 1"
        },
        {
          "name": "strict",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "strict: bool = False"
        },
        {
          "name": "regexp",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "regexp: str | None = None"
        },
        {
          "name": "trim",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "trim: bool = True"
        },
        {
          "name": "ignore_case",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "ignore_case: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Find the closest text elements near the set anchor(s) through <cite>locator</cite>.</p>\n<p>The PDF will be parsed automatically before elements can be searched.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Element to set anchor to. This can be prefixed with either\n&quot;text:&quot;, &quot;subtext:&quot;, &quot;regex:&quot; or &quot;coords:&quot; to find the anchor by text or\ncoordinates. The &quot;text&quot; strategy is assumed if no such prefix is specified.\n(text search is case-sensitive; use <cite>ignore_case</cite> param for controlling it)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pagenum:</th><td class=\"field-body\">Page number where search is performed on, defaults to 1 (first\npage).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param direction:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">In which direction to search for text elements. This can be\nany of 'top'/'up', 'bottom'/'down', 'left' or 'right'. (defaults to\n'right')</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param closest_neighbours:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">How many neighbours to return at most, sorted by the\ndistance from the current anchor.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param strict:</th><td class=\"field-body\">If element's margins should be used for matching those which are\naligned to the anchor. (turned off by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param regexp:</th><td class=\"field-body\">Expected format of the searched text value. By default all the\ncandidates in range are considered valid neighbours.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">Automatically trim leading/trailing whitespace from the text\nelements. (switched on by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param ignore_case:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do a case-insensitive search when set to <cite>True</cite>. (affects\nthe passed <cite>locator</cite> and <cite>regexp</cite> filtering)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">A list of <cite>Match</cite> objects where every match has the following\nattributes: <cite>.anchor</cite> - the matched text with the locator; <cite>.neighbours</cite> -\na list of adjacent texts found on the specified direction</td>\n</tr>\n</tbody>\n</table>\n<div class=\"admonition attention\">\n<p class=\"first admonition-title\">Attention!</p>\n<p class=\"last\">Keep in mind that this keyword works with text-based PDFs, and it <strong>can't\nextract information from an image-based (scan)</strong> PDF file. For accurate\nresults, you have to use specialized external services wrapped by the\n<tt class=\"docutils literal\">Camunda.DocumentAI</tt> library.</p>\n</div>\n<p>Portal example with video recording demo for parsing PDF invoices:\n<a class=\"reference external\" href=\"https://github.com/robocorp/example-parse-pdf-invoice\">https://github.com/robocorp/example-parse-pdf-invoice</a></p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">PDF Invoice Parsing</span><span class=\"p\">\n    </span><span class=\"c\">Open Pdf</span><span class=\"p\">    </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n    </span><span class=\"c\">${matches} =</span><span class=\"p\">  </span><span class=\"c\">Find Text</span><span class=\"p\">    </span><span class=\"c\">Invoice Number</span><span class=\"p\">\n    </span><span class=\"c\">Log List</span><span class=\"p\">      </span><span class=\"c\">${matches}</span>\n</pre>\n<pre class=\"code literal-block\">\nList has one item:\nMatch(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">pdf_invoice_parsing</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;invoice.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">find_text</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invoice Number&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">pdf_invoice_parsing</span><span class=\"p\">()</span>\n</pre>\n<pre class=\"code literal-block\">\nMatch(anchor='Invoice Number', direction='right', neighbours=['INV-3337'])\n</pre>\n</div>\n",
      "shortdoc": "Find the closest text elements near the set anchor(s) through `locator`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/finder.py",
      "lineno": 90
    },
    {
      "name": "Get All Figures",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return all figures in the PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Image fetch</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">figures</span><span class=\"p\">}=  </span><span class=\"nf\">Get All Figures</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Image fetch from open PDF</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">figures</span><span class=\"p\">}=  </span><span class=\"nf\">Get All Figures</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">image_fetch</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">figures</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_all_figures</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of figures divided into pages.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Return all figures in the PDF document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 849
    },
    {
      "name": "Get Input Fields",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "replace_none_value",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "replace_none_value: bool = False"
        },
        {
          "name": "encoding",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "iso-8859-1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str | None = iso-8859-1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get input fields in the PDF.</p>\n<p>Stores input fields internally so that they can be used without parsing the PDF\nagain.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Filepath to source, if not given use the currently active\nPDF.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param replace_none_value:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Enable this to conveniently visualize the fields. (\nreplaces the null value with field's default or its name if absent)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Use an explicit encoding for field name/value parsing. (\ndefaults to &quot;iso-8859-1&quot; but &quot;utf-8/16&quot; might be the one working for you)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">A dictionary with all the found fields. Use their key names when\nsetting values into them.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises KeyError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">If no input fields are enabled in the PDF.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"c\">${fields} =</span><span class=\"p\">     </span><span class=\"c\">Get Input Fields</span><span class=\"p\">    </span><span class=\"c\">form.pdf</span><span class=\"p\">\n    </span><span class=\"c\">Log Dictionary</span><span class=\"p\">    </span><span class=\"c\">${fields}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_input_fields</span><span class=\"p\">(</span><span class=\"s2\">&quot;form.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">example_keyword</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Get input fields in the PDF.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/model.py",
      "lineno": 501
    },
    {
      "name": "Get Number Of Pages",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get number of pages in the document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Number of pages in PDF</span><span class=\"p\">\n    ${</span><span class=\"nv\">page_count</span><span class=\"p\">}=    </span><span class=\"nf\">Get Number Of Pages</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Number of pages in opened PDF</span><span class=\"p\">\n    ${</span><span class=\"nv\">page_count</span><span class=\"p\">}=    </span><span class=\"nf\">Get Number Of Pages</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">number_of_pages_in_pdf</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">page_count</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_number_of_pages</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises PdfReadError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if file is encrypted or other restrictions are in place</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get number of pages in the document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 449
    },
    {
      "name": "Get Pdf Info",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get metadata from a PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Get PDF metadata</span><span class=\"p\">\n    ${</span><span class=\"nv\">metadata</span><span class=\"p\">}=    </span><span class=\"nf\">Get PDF Info</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Get metadata from an already opened PDF</span><span class=\"p\">\n    ${</span><span class=\"nv\">metadata</span><span class=\"p\">}=    </span><span class=\"nf\">Get PDF Info</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">get_pdf_metadata</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_pdf_info</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source PDF.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of PDF information.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get metadata from a PDF document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 350
    },
    {
      "name": "Get Text From Pdf",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "pages",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "int",
            "str",
            "List[int]",
            "List[str]",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "List": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pages: int | str | List[int] | List[str] | None = None"
        },
        {
          "name": "details",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "details: bool = False"
        },
        {
          "name": "trim",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "trim: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get text from set of pages in source PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Text extraction from PDF</span><span class=\"p\">\n    ${</span><span class=\"nv\">text</span><span class=\"p\">}=    </span><span class=\"nf\">Get Text From PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Text extraction from open PDF</span><span class=\"p\">\n    ${</span><span class=\"nv\">text</span><span class=\"p\">}=    </span><span class=\"nf\">Get Text From PDF</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">text_extraction_from_pdf</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_text_from_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to get text (numbers start from 1).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param details:</th><td class=\"field-body\">set to <cite>True</cite> to return textboxes, default <cite>False</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">set to <cite>False</cite> to return raw texts, default <cite>True</cite>\nmeans whitespace is trimmed from the text</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of pages and their texts.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get text from set of pages in source PDF document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 536
    },
    {
      "name": "Html To Pdf",
      "args": [
        {
          "name": "content",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "List[str]"
          ],
          "typedocs": {
            "str": "string",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "content: str | List[str]"
        },
        {
          "name": "output_path",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "output_path: str"
        },
        {
          "name": "encoding",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str = utf-8"
        },
        {
          "name": "margin",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "margin: float = 0"
        },
        {
          "name": "working_directory",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "working_directory: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Generate a PDF file from HTML content.</p>\n<p>Note that input must be well-formed and valid HTML.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Create PDF from HTML</span><span class=\"p\">\n    </span><span class=\"nf\">HTML to PDF</span><span class=\"p\">    ${</span><span class=\"nv\">html_content_as_string</span><span class=\"p\">}  </span><span class=\"s\">/tmp/output.pdf</span><span class=\"p\">\n\n</span><span class=\"gu\">Multi Page PDF</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">pages</span><span class=\"p\">}=    </span><span class=\"nf\">Create List</span><span class=\"p\">    ${</span><span class=\"nv\">page1_html</span><span class=\"p\">}    ${</span><span class=\"nv\">page2_html</span><span class=\"p\">}\n    </span><span class=\"nf\">HTML To PDF</span><span class=\"p\">   ${</span><span class=\"nv\">pages</span><span class=\"p\">}    </span><span class=\"s\">output.pdf</span><span class=\"p\">\n    ...  </span><span class=\"s\">margin=10</span><span class=\"p\">\n    ...  </span><span class=\"s\">working_directory=subdir</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">create_pdf_from_html</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">html_to_pdf</span><span class=\"p\">(</span><span class=\"n\">html_content_as_string</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/tmp/output.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">multi_page_pdf</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">page1_html</span><span class=\"p\">,</span> <span class=\"n\">page2_html</span><span class=\"p\">,</span> <span class=\"n\">page3_html</span><span class=\"p\">]</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">html_to_pdf</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">,</span> <span class=\"s2\">&quot;output.pdf&quot;</span><span class=\"p\">,</span> <span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"c1\"># if I have images in the HTML in the 'subdir'</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">html_to_pdf</span><span class=\"p\">(</span><span class=\"n\">pages</span><span class=\"p\">,</span> <span class=\"s2\">&quot;output.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">margin</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">working_directory</span><span class=\"o\">=</span><span class=\"s2\">&quot;subdir&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param content:</th><td class=\"field-body\">HTML content</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath where to save the PDF document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">codec used for text I/O</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param margin:</th><td class=\"field-body\">page margin, default is set to 0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param working_directory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory where to look for HTML linked\nresources, by default uses the current working directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Generate a PDF file from HTML content.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 273
    },
    {
      "name": "Is Pdf Encrypted",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Check if PDF is encrypted.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if file is encrypted.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Is PDF encrypted</span><span class=\"p\">\n    ${</span><span class=\"nv\">is_encrypted</span><span class=\"p\">}=    </span><span class=\"nf\">Is PDF Encrypted</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Is open PDF encrypted</span><span class=\"p\">\n    ${</span><span class=\"nv\">is_encrypted</span><span class=\"p\">}=    </span><span class=\"nf\">Is PDF Encrypted</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">is_encrypted</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">is_pdf_encrypted</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Check if PDF is encrypted.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 411
    },
    {
      "name": "Open Pdf",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "Path",
                "typedoc": "Path",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "Path"
          ],
          "typedocs": {
            "str": "string",
            "Path": "Path"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "source_path: str | Path"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Open a PDF document for reading.</p>\n<p>This is called automatically in the other PDF keywords\nwhen a path to the PDF file is given as an argument.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Open my pdf file</span><span class=\"p\">\n    </span><span class=\"nf\">Open PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if PDF is already open.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Open a PDF document for reading.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 153
    },
    {
      "name": "Rotate Page",
      "args": [
        {
          "name": "pages",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "int",
            "str",
            "List[int]",
            "List[str]",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "List": "list",
            "None": "None"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "pages: int | str | List[int] | List[str] | None"
        },
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "output_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "output_path: str | None = None"
        },
        {
          "name": "clockwise",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "clockwise: bool = True"
        },
        {
          "name": "angle",
          "type": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
          },
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "90",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "angle: int = 90"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Rotate pages in source PDF document and save to target PDF document.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">PDF page rotation</span><span class=\"p\">\n    </span><span class=\"nf\">Rotate Page</span><span class=\"p\">\n    ...          </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">output_path=/tmp/output.pdf</span><span class=\"p\">\n    ...          </span><span class=\"s\">pages=5</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">pdf_page_rotation</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pages</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">rotate_page</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/output.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">page numbers to extract from PDF (numbers start from 1).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the target pdf, stored by default\nin the robot output directory as <tt class=\"docutils literal\">output.pdf</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param clockwise:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directorion that page will be rotated to, default True.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param angle:</th><td class=\"field-body\">number of degrees to rotate, default 90.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Rotate pages in source PDF document and save to target PDF document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 661
    },
    {
      "name": "Save Field Values",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "output_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "output_path: str | None = None"
        },
        {
          "name": "newvals",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "dict",
            "None"
          ],
          "typedocs": {
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "newvals: dict | None = None"
        },
        {
          "name": "use_appearances_writer",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_appearances_writer: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Save field values in PDF if it has fields.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Source PDF with fields to update.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Updated target PDF.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newvals:</th><td class=\"field-body\">New values when updating many at once.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_appearances_writer:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">For some PDF documents the updated fields won't\nbe visible (or will look strange). When this happens, try to set this to\n<cite>True</cite> so the previewer will re-render these based on the actual values.\n(and viewing the output PDF in a browser might display the field values\ncorrecly then)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"c\">Open PDF</span><span class=\"p\">    </span><span class=\"c\">./tmp/sample.pdf</span><span class=\"p\">\n    </span><span class=\"c\">Set Field Value</span><span class=\"p\">    </span><span class=\"c\">phone_nr</span><span class=\"p\">    </span><span class=\"c\">077123123</span><span class=\"p\">\n    </span><span class=\"c\">Save Field Values</span><span class=\"p\">    </span><span class=\"c\">output_path=./tmp/output.pdf</span><span class=\"p\">\n\n</span><span class=\"c\">Multiple operations</span><span class=\"p\">\n    </span><span class=\"c\">&amp;{new_fields}=</span><span class=\"p\">       </span><span class=\"c\">Create Dictionary</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">                  </span><span class=\"c\">phone_nr=077123123</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">                  </span><span class=\"c\">title=dr</span><span class=\"p\">\n    </span><span class=\"c\">Save Field Values</span><span class=\"p\">    </span><span class=\"c\">source_path=./tmp/sample.pdf</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">                  </span><span class=\"c\">output_path=./tmp/output.pdf</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">                  </span><span class=\"c\">newvals=${new_fields}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_field_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;phone_nr&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;077123123&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/output.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">multiple_operations</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">new_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;phone_nr&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;077123123&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dr&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/output.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">newvals</span><span class=\"o\">=</span><span class=\"n\">new_fields</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Save field values in PDF if it has fields.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/model.py",
      "lineno": 659
    },
    {
      "name": "Save Figure As Image",
      "args": [
        {
          "name": "figure",
          "type": {
            "name": "Figure",
            "typedoc": null,
            "nested": [],
            "union": false
          },
          "types": [
            "Figure"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "figure: Figure"
        },
        {
          "name": "images_folder",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": ".",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "images_folder: str = ."
        },
        {
          "name": "file_prefix",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "file_prefix: str = "
        }
      ],
      "doc": "<div class=\"document\">\n<p>Try to save the image data from Figure object, and return\nthe file name, if successful.</p>\n<p>Figure needs to have byte <cite>stream</cite> and that needs to be recognized\nas image format for successful save.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keyword ***</span><span class=\"p\">\n</span><span class=\"gu\">Figure to Image</span><span class=\"p\">\n    ${</span><span class=\"nv\">image_file_path</span><span class=\"p\">} =     </span><span class=\"nf\">Save figure as image</span><span class=\"p\">\n    ...             </span><span class=\"s\">figure=pdf_figure_object</span><span class=\"p\">\n    ...             </span><span class=\"s\">images_folder=/tmp/images</span><span class=\"p\">\n    ...             </span><span class=\"s\">file_prefix=file_name_here</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">figure_to_image</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">image_file_path</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_figure_as_image</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">figure</span><span class=\"o\">=</span><span class=\"s2\">&quot;pdf_figure_object&quot;</span><span class=\"w\">\n</span>        <span class=\"n\">images_folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/images&quot;</span><span class=\"w\">\n</span>        <span class=\"n\">file_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;file_name_here&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param figure:</th><td class=\"field-body\">PDF Figure object which will be saved as an image.\nThe PDF Figure object can be determined from the <cite>Get All Figures</cite> keyword</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param images_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory where image files will be created</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_prefix:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">image filename prefix</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">image filepath or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Try to save the image data from Figure object, and return the file name, if successful.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 1068
    },
    {
      "name": "Save Figures As Images",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        },
        {
          "name": "images_folder",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": ".",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "images_folder: str = ."
        },
        {
          "name": "pages",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pages: str | None = None"
        },
        {
          "name": "file_prefix",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "file_prefix: str = "
        }
      ],
      "doc": "<div class=\"document\">\n<p>Save figures from given PDF document as image files.</p>\n<p>If no source path given, assumes a PDF is already opened.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keyword ***</span><span class=\"p\">\n</span><span class=\"gu\">Figures to Images</span><span class=\"p\">\n    ${</span><span class=\"nv\">image_filenames</span><span class=\"p\">} =    </span><span class=\"nf\">Save figures as images</span><span class=\"p\">\n    ...             </span><span class=\"s\">source_path=/tmp/sample.pdf</span><span class=\"p\">\n    ...             </span><span class=\"s\">images_folder=/tmp/images</span><span class=\"p\">\n    ...             </span><span class=\"s\">pages=</span><span class=\"p\">${</span><span class=\"nv\">4</span><span class=\"p\">}\n    ...             </span><span class=\"s\">file_prefix=file_name_here</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">figures_to_images</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">image_filenames</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_figures_as_image</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">source_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"w\">\n</span>        <span class=\"n\">images_folder</span><span class=\"o\">=</span><span class=\"s2\">&quot;/tmp/images&quot;</span><span class=\"w\">\n</span>        <span class=\"n\">pages</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"w\">\n</span>        <span class=\"n\">file_prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;file_name_here&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to PDF document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param images_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory where image files will be created</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pages:</th><td class=\"field-body\">target figures in the pages, can be single page or range,\ndefault <cite>None</cite> means that all pages are scanned for figures to save\n(numbers start from 1)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_prefix:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">image filename prefix</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of image filenames created</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Save figures from given PDF document as image files.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 1141
    },
    {
      "name": "Save Pdf",
      "args": [
        {
          "name": "output_path",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "output_path: str"
        },
        {
          "name": "reader",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "PdfReader",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "PdfReader",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "reader: PdfReader | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Save the contents of a pypdf reader to a new file.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keyword ***</span><span class=\"p\">\n</span><span class=\"gu\">Save changes to PDF</span><span class=\"p\">\n    </span><span class=\"nf\">Save PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/output.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">save_changes_to_pdf</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_pdf</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;output/output.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to target PDF</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param reader:</th><td class=\"field-body\">a pypdf reader (defaults to currently active document)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Save the contents of a pypdf reader to a new file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 1003
    },
    {
      "name": "Set Anchor To Element",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: str"
        },
        {
          "name": "trim",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "trim: bool = True"
        },
        {
          "name": "pagenum",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "int",
            "str"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pagenum: int | str = 1"
        },
        {
          "name": "ignore_case",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "ignore_case: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Sets main anchor point in the document for further searches.</p>\n<p>This is used internally in the library and can work with multiple anchors at\nthe same time if such are found.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Element to set anchor to. This can be prefixed with either\n&quot;text:&quot;, &quot;subtext:&quot;, &quot;regex:&quot; or &quot;coords:&quot; to find the anchor by text or\ncoordinates. The &quot;text&quot; strategy is assumed if no such prefix is specified.\n(text search is case-sensitive; use <cite>ignore_case</cite> param for controlling it)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param trim:</th><td class=\"field-body\">Automatically trim leading/trailing whitespace from the text\nelements. (switched on by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param pagenum:</th><td class=\"field-body\">Page number where search is performed on, defaults to 1 (first\npage).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param ignore_case:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do a case-insensitive search when set to <cite>True</cite>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">True if at least one anchor was found.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Example Keyword</span><span class=\"p\">\n     </span><span class=\"c\">${success} =</span><span class=\"p\">  </span><span class=\"c\">Set Anchor To Element</span><span class=\"p\">    </span><span class=\"c\">Invoice Number</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">success</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_anchor_to_element</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invoice Number&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Sets main anchor point in the document for further searches.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/finder.py",
      "lineno": 236
    },
    {
      "name": "Set Convert Settings",
      "args": [
        {
          "name": "line_margin",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "line_margin: float | None = None"
        },
        {
          "name": "word_margin",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "word_margin: float | None = None"
        },
        {
          "name": "char_margin",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "char_margin: float | None = None"
        },
        {
          "name": "boxes_flow",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "0.5",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "boxes_flow: float | None = 0.5"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Change settings for PDFMiner document conversion.</p>\n<p><cite>line_margin</cite> controls how textboxes are grouped - if conversion results in\ntexts grouped into one group then set this to lower value</p>\n<p><cite>word_margin</cite> controls how spaces are inserted between words - if conversion\nresults in text without spaces then set this to lower value</p>\n<p><cite>char_margin</cite> controls how characters are grouped into words - if conversion\nresults in individual characters instead of then set this to higher value</p>\n<p><cite>boxes_flow</cite> controls how much horizontal and vertical position of the text\nmatters when determining the order of text boxes. Value can be between range\nof -1.0 (only horizontal position matters) to +1.0 (only vertical position\nmatters). This feature (advanced layout analysis) can be disabled by setting\nvalue to <cite>None</cite> thus bottom left corner of the text box is used to determine\norder of the text boxes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param line_margin:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">relative margin between bounding lines, default 0.5</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param word_margin:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">relative margin between words, default 0.1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param char_margin:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">relative margin between characters, default 2.0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param boxes_flow:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">positioning of the text boxes based on text, default 0.5</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">Camunda.PDF</span><span class=\"p\">\n\n</span><span class=\"gh\">***Tasks***</span><span class=\"p\">\n</span><span class=\"gu\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"nf\">Set Convert Settings</span><span class=\"p\">  </span><span class=\"s\">line_margin=0.00000001</span><span class=\"p\">\n    ${</span><span class=\"nv\">texts</span><span class=\"p\">}=  </span><span class=\"nf\">Get Text From PDF</span><span class=\"p\">  </span><span class=\"s\">/tmp/sample.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_convert_settings</span><span class=\"p\">(</span><span class=\"n\">boxes_flow</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">texts</span> <span class=\"o\">=</span> <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">get_text_from_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Change settings for PDFMiner document conversion.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/model.py",
      "lineno": 799
    },
    {
      "name": "Set Field Value",
      "args": [
        {
          "name": "field_name",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "field_name: str"
        },
        {
          "name": "value",
          "type": {
            "name": "Any",
            "typedoc": "Any",
            "nested": [],
            "union": false
          },
          "types": [
            "Any"
          ],
          "typedocs": {
            "Any": "Any"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Any"
        },
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set value for field with given name on the active document.</p>\n<p>Tries to match with field's identifier directly or its label. When ticking\ncheckboxes, try with the <cite>/Yes</cite> string value as simply <cite>Yes</cite> might not work\nwith most previewing apps.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param field_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Field to update.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">New value for the field.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Source PDF file path.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">When field can't be found or more than one field matches\nthe given <cite>field_name</cite>.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Example Keyword</span><span class=\"p\">\n    </span><span class=\"c\">Open PDF</span><span class=\"p\">    </span><span class=\"c\">./tmp/sample.pdf</span><span class=\"p\">\n    </span><span class=\"c\">Set Field Value</span><span class=\"p\">    </span><span class=\"c\">phone_nr</span><span class=\"p\">    </span><span class=\"c\">077123123</span><span class=\"p\">\n    </span><span class=\"c\">Save Field Values</span><span class=\"p\">    </span><span class=\"c\">output_path=./tmp/output.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">example_keyword</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">open_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;./tmp/sample.pdf&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">set_field_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;phone_nr&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;077123123&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">save_field_values</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"s2\">&quot;./tmp/output.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set value for field with given name on the active document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/model.py",
      "lineno": 592
    },
    {
      "name": "Switch To Pdf",
      "args": [
        {
          "name": "source_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "Path",
                "typedoc": "Path",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "Path",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "Path": "Path",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_path: str | Path | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Switch library's current fileobject to already opened file\nor open a new file if not opened.</p>\n<p>This is done automatically in the PDF library keywords.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Jump to another PDF</span><span class=\"p\">\n    </span><span class=\"nf\">Switch to PDF</span><span class=\"p\">    </span><span class=\"s\">/tmp/another.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">pdf</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">jump_to_another_pdf</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">pdf</span><span class=\"o\">.</span><span class=\"n\">switch_to_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;/tmp/sample.pdf&quot;</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the source pdf.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if PDF filepath is not given and there are no active\nfile to activate.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Switch library's current fileobject to already opened file or open a new file if not opened.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 486
    },
    {
      "name": "Template Html To Pdf",
      "args": [
        {
          "name": "template",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "template: str"
        },
        {
          "name": "output_path",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "output_path: str"
        },
        {
          "name": "variables",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "dict",
            "None"
          ],
          "typedocs": {
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "variables: dict | None = None"
        },
        {
          "name": "encoding",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str = utf-8"
        },
        {
          "name": "margin",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "margin: float = 0"
        },
        {
          "name": "working_directory",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "working_directory: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Use HTML template file to generate PDF file.</p>\n<p>It provides an easy method of generating a PDF document from an HTML formatted\ntemplate file.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Create PDF from HTML template</span><span class=\"p\">\n    ${</span><span class=\"nv\">TEMPLATE</span><span class=\"p\">}=    </span><span class=\"nf\">Set Variable</span><span class=\"p\">    </span><span class=\"s\">order.template</span><span class=\"p\">\n    ${</span><span class=\"nv\">PDF</span><span class=\"p\">}=         </span><span class=\"nf\">Set Variable</span><span class=\"p\">    </span><span class=\"s\">result.pdf</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">DATA</span><span class=\"p\">}=        </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">\n    ...             </span><span class=\"s\">name=Robot Generated</span><span class=\"p\">\n    ...             </span><span class=\"s\">email=robot&#64;domain.com</span><span class=\"p\">\n    ...             </span><span class=\"s\">zip=00100</span><span class=\"p\">\n    ...             </span><span class=\"s\">items=Item 1, Item 2</span><span class=\"p\">\n    </span><span class=\"nf\">Template HTML to PDF</span><span class=\"p\">\n    ...    </span><span class=\"s\">template=</span><span class=\"p\">${</span><span class=\"nv\">TEMPLATE</span><span class=\"p\">}\n    ...    </span><span class=\"s\">output_path=</span><span class=\"p\">${</span><span class=\"nv\">PDF</span><span class=\"p\">}\n    ...    </span><span class=\"s\">variables=</span><span class=\"p\">${</span><span class=\"nv\">DATA</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">Camunda.PDF</span> <span class=\"kn\">import</span> <span class=\"n\">PDF</span><span class=\"w\">\n\n</span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PDF</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;item 1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;item 2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;item 3&quot;</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Robot Process&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;email&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;robot&#64;domain.com&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;zip&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;00100&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;items&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&lt;br/&gt;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">orders</span><span class=\"p\">),</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">template_html_to_pdf</span><span class=\"p\">(</span><span class=\"s2\">&quot;order.template&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;order.pdf&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param template:</th><td class=\"field-body\">filepath to the HTML template</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param output_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath where to save PDF document</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param variables:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dictionary of variables to fill into template, defaults to {}</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">codec used for text I/O</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param margin:</th><td class=\"field-body\">page margin, default is set to 0</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param working_directory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">directory where to look for HTML linked\nresources, by default uses the current working directory</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Use HTML template file to generate PDF file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/PDF/keywords/document.py",
      "lineno": 199
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "Any",
      "doc": "<p>Any value is accepted. No conversion is done.</p>",
      "usages": [
        "Set Field Value"
      ],
      "accepts": [
        "Any"
      ]
    },
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Add Files To Pdf",
        "Convert",
        "Encrypt Pdf",
        "Find Text",
        "Get Input Fields",
        "Get Text From Pdf",
        "Rotate Page",
        "Save Field Values",
        "Set Anchor To Element"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>If the type has nested types like <code>dict[str, int]</code>, items are converted to those types automatically. This in new in Robot Framework 6.0.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Save Field Values",
        "Template Html To Pdf"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "float",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#float\">float</a> built-in function.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>3.14</code>, <code>2.9979e8</code>, <code>10 000.000 01</code></p>",
      "usages": [
        "Add Watermark Image To Pdf",
        "Html To Pdf",
        "Set Convert Settings",
        "Template Html To Pdf"
      ],
      "accepts": [
        "string",
        "Real"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Convert",
        "Extract Pages From Pdf",
        "Find Text",
        "Get Text From Pdf",
        "Rotate Page",
        "Set Anchor To Element"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>If the type has nested types like <code>list[int]</code>, items are converted to those types automatically. This in new in Robot Framework 6.0.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Add Files To Pdf",
        "Extract Pages From Pdf",
        "Get Text From Pdf",
        "Html To Pdf",
        "Rotate Page"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Add Files To Pdf",
        "Add Watermark Image To Pdf",
        "Close Pdf",
        "Convert",
        "Dump Pdf As Xml",
        "Encrypt Pdf",
        "Extract Pages From Pdf",
        "Find Text",
        "Get All Figures",
        "Get Input Fields",
        "Get Number Of Pages",
        "Get Pdf Info",
        "Get Text From Pdf",
        "Html To Pdf",
        "Is Pdf Encrypted",
        "Rotate Page",
        "Save Field Values",
        "Save Figures As Images",
        "Save Pdf",
        "Set Convert Settings",
        "Set Field Value",
        "Switch To Pdf",
        "Template Html To Pdf"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "Path",
      "doc": "<p>Strings are converted <a href=\"https://docs.python.org/library/pathlib.html\">Path</a> objects. On Windows <code>/</code> is converted to <code>\\</code> automatically.</p>\n<p>Examples: <code>/tmp/absolute/path</code>, <code>relative/path/to/file.ext</code>, <code>name.txt</code></p>",
      "usages": [
        "Add Watermark Image To Pdf",
        "Open Pdf",
        "Switch To Pdf"
      ],
      "accepts": [
        "string",
        "PurePath"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Add Files To Pdf",
        "Add Watermark Image To Pdf",
        "Close Pdf",
        "Convert",
        "Decrypt Pdf",
        "Dump Pdf As Xml",
        "Encrypt Pdf",
        "Extract Pages From Pdf",
        "Find Text",
        "Get All Figures",
        "Get Input Fields",
        "Get Number Of Pages",
        "Get Pdf Info",
        "Get Text From Pdf",
        "Html To Pdf",
        "Is Pdf Encrypted",
        "Open Pdf",
        "Rotate Page",
        "Save Field Values",
        "Save Figure As Image",
        "Save Figures As Images",
        "Save Pdf",
        "Set Anchor To Element",
        "Set Field Value",
        "Switch To Pdf",
        "Template Html To Pdf"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}