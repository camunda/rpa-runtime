{
  "specversion": 1,
  "name": "RPA.Crypto",
  "doc": "<div class=\"document\">\n<p>Library for common encryption and hashing operations.</p>\n<p>Library uses by default the\n<a class=\"reference external\" href=\"https://github.com/fernet/spec/blob/master/Spec.md\">Fernet</a> format\nfor encryption. More specifically, it uses AES in CBC mode with\na 128-bit key for encryption and HMAC with SHA256 for authentication.</p>\n<p>Alternative encryption format for the library is\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Advanced_Encryption_Standard\">AES256</a>.</p>\n<p>To use the encryption features, generate a key with the command line\nutility <tt class=\"docutils literal\"><span class=\"pre\">rpa-crypto</span></tt> or with the keyword <tt class=\"docutils literal\">Generate Key</tt>. Store\nthe key in a secure place, such as Robocorp Vault, and load it within\nthe execution before calling encryption/decryption keywords.</p>\n<p><strong>Example usage with Robocorp Vault</strong></p>\n<p>Create an encryption key with the CLI utility:</p>\n<pre class=\"code console literal-block\">\n<span class=\"go\">&gt; rpa-crypto key\nrGx1edA07yz7uD08ChiPSunn8vaauRxw0pAbsal9zjM=</span>\n</pre>\n<p>Store the key in Robocorp Vault, in this case with the name <tt class=\"docutils literal\">EncryptionKey</tt>.</p>\n<p>Load the key from the vault before encryption operations:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">EncryptionKey</span><span class=\"p\">\n</span><span class=\"c\">${encrypted}=</span><span class=\"p\">   </span><span class=\"c\">Encrypt file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Add work item file</span><span class=\"p\">    </span><span class=\"c\">${encrypted}</span><span class=\"p\">    </span><span class=\"c\">name=Orders</span>\n</pre>\n<p>In another task, this same key can be used to decrypt the file:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">EncryptionKey</span><span class=\"p\">\n</span><span class=\"c\">${encrypted}=</span><span class=\"p\">    </span><span class=\"c\">Get work item file</span><span class=\"p\">    </span><span class=\"c\">Orders</span><span class=\"p\">\n</span><span class=\"c\">${orders}=</span><span class=\"p\">   </span><span class=\"c\">Decrypt file</span><span class=\"p\">    </span><span class=\"c\">${encrypted}</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:43",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
  "lineno": 71,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
      "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 118
    }
  ],
  "keywords": [
    {
      "name": "Decrypt File",
      "args": [
        {
          "name": "path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path: str"
        },
        {
          "name": "output",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "output: str | None = None"
        },
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Decrypt a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to encrypted input file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param output:</th><td class=\"field-body\">Path to decrypted output file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Path to the decrypted file</td>\n</tr>\n</tbody>\n</table>\n<p>If no output path is given, it will generate one from the input path.\nThe resulting output path is returned.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${path}=</span><span class=\"p\">    </span><span class=\"c\">Decrypt file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx.enc</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Path to decrypted file is: ${path}</span>\n</pre>\n</div>\n",
      "shortdoc": "Decrypt a file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 400
    },
    {
      "name": "Decrypt String",
      "args": [
        {
          "name": "data",
          "types": [
            "bytes",
            "str"
          ],
          "typedocs": {
            "bytes": "bytes",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "data: bytes | str"
        },
        {
          "name": "encoding",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str = utf-8"
        },
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Decrypt a string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param data:</th><td class=\"field-body\">Encrypted data as base64 string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Original encoding of string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Decrypted string or raw bytes, if None given as encoding</td>\n</tr>\n</tbody>\n</table>\n<p>Returns the decrypted string that is parsed with the given encoding,\nor if the encoding is <tt class=\"docutils literal\">None</tt> the raw bytes are returned.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${text}=</span><span class=\"p\">    </span><span class=\"c\">Decrypt string</span><span class=\"p\">    </span><span class=\"c\">${token}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Secret string is: ${text}</span>\n</pre>\n</div>\n",
      "shortdoc": "Decrypt a string.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 300
    },
    {
      "name": "Encrypt File",
      "args": [
        {
          "name": "path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path: str"
        },
        {
          "name": "output",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "output: str | None = None"
        },
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Encrypt a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to source input file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param output:</th><td class=\"field-body\">Path to encrypted output file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Path to the encrypted file</td>\n</tr>\n</tbody>\n</table>\n<p>If no output path is given, it will generate one from the input path.\nThe resulting output path is returned.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${path}=</span><span class=\"p\">    </span><span class=\"c\">Encrypt file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">Path to encrypted file is: ${path}</span>\n</pre>\n</div>\n",
      "shortdoc": "Encrypt a file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 355
    },
    {
      "name": "Encrypt String",
      "args": [
        {
          "name": "text",
          "types": [
            "bytes",
            "str"
          ],
          "typedocs": {
            "bytes": "bytes",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "text: bytes | str"
        },
        {
          "name": "encoding",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str = utf-8"
        },
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Encrypt a string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">Source text to encrypt</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Used text encoding</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Token of the encrypted string in bytes</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Use encryption key</span><span class=\"p\">    </span><span class=\"c\">${key}</span><span class=\"p\">\n</span><span class=\"c\">${token}=</span><span class=\"p\">    </span><span class=\"c\">Encrypt string</span><span class=\"p\">    </span><span class=\"c\">This is a secret, don't share it</span>\n</pre>\n</div>\n",
      "shortdoc": "Encrypt a string.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 266
    },
    {
      "name": "Generate Key",
      "args": [
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Generate a Fernet encryption key as base64 string.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Generated key as a string</td>\n</tr>\n</tbody>\n</table>\n<p>This key can be used for encryption/decryption operations\nwith this library.</p>\n<p><em>NOTE:</em> Store the generated key in a secure place!\nIf the key is lost, the encrypted data can not be recovered.\nIf anyone else gains access to it, they can decrypt your data.</p>\n</div>\n",
      "shortdoc": "Generate a Fernet encryption key as base64 string.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 129
    },
    {
      "name": "Hash File",
      "args": [
        {
          "name": "path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path: str"
        },
        {
          "name": "method",
          "types": [
            "Hash"
          ],
          "typedocs": {
            "Hash": "Hash"
          },
          "defaultValue": "SHA1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "method: Hash = SHA1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Calculate a hash from a file, in base64 format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param method:</th><td class=\"field-body\">The used hashing method</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Hash digest of the file</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${digest}=</span><span class=\"p\">    </span><span class=\"c\">Hash file</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">    </span><span class=\"c\">method=MD5</span><span class=\"p\">\n</span><span class=\"c\">Should not be equal</span><span class=\"p\">    </span><span class=\"c\">${digest}</span><span class=\"p\">    </span><span class=\"c\">uSlyRHlbu8NzY29YMZhDUpdErP4=</span>\n</pre>\n</div>\n",
      "shortdoc": "Calculate a hash from a file, in base64 format.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 241
    },
    {
      "name": "Hash String",
      "args": [
        {
          "name": "text",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "text: str"
        },
        {
          "name": "method",
          "types": [
            "Hash"
          ],
          "typedocs": {
            "Hash": "Hash"
          },
          "defaultValue": "SHA1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "method: Hash = SHA1"
        },
        {
          "name": "encoding",
          "types": [],
          "typedocs": {},
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding=utf-8"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Calculate a hash from a string, in base64 format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">String to hash</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param method:</th><td class=\"field-body\">Used hashing method</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">Used text encoding</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">Hash digest of the string</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${digest}=</span><span class=\"p\">    </span><span class=\"c\">Hash string</span><span class=\"p\">    </span><span class=\"c\">A value that will be hashed</span><span class=\"p\">\n</span><span class=\"c\">Should be equal</span><span class=\"p\">    </span><span class=\"c\">${digest}</span><span class=\"p\">    </span><span class=\"c\">uSlyRHlbu8NzY29YMZhDUpdErP4=</span>\n</pre>\n</div>\n",
      "shortdoc": "Calculate a hash from a string, in base64 format.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 217
    },
    {
      "name": "Use Encryption Key",
      "args": [
        {
          "name": "key",
          "types": [
            "bytes",
            "str"
          ],
          "typedocs": {
            "bytes": "bytes",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "key: bytes | str"
        },
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set key for all following encryption/decryption operations.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Encryption key as base64 string</td>\n</tr>\n</tbody>\n</table>\n<p>Assumes the given key has been generated previously using\neither the keyword <tt class=\"docutils literal\">Generate Key</tt> or with the matching command\nline utility.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${key}=</span><span class=\"p\">    </span><span class=\"c\">Read file</span><span class=\"p\">    </span><span class=\"c\">encryption.key</span><span class=\"p\">\n</span><span class=\"c\">Use encryption key</span><span class=\"p\">      </span><span class=\"c\">${key}</span>\n</pre>\n</div>\n",
      "shortdoc": "Set key for all following encryption/decryption operations.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 151
    },
    {
      "name": "Use Encryption Key From Vault",
      "args": [
        {
          "name": "name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: str"
        },
        {
          "name": "key",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "key: str | None = None"
        },
        {
          "name": "encryption_type",
          "types": [
            "str",
            "EncryptionType",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "EncryptionType": "EncryptionType",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encryption_type: str | EncryptionType | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Load an encryption key from Robocorp Vault.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of secret in Vault</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param key:</th><td class=\"field-body\">Name of encryption key in secret</td>\n</tr>\n</tbody>\n</table>\n<p>If the secret only has one value, the key argument is optional.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Secret with one value\nUse encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">Encryption</span><span class=\"p\">\n</span><span class=\"c\"># Secret with multiple values\nUse encryption key from vault</span><span class=\"p\">    </span><span class=\"c\">name=Encryption</span><span class=\"p\">    </span><span class=\"c\">key=CryptoKey</span>\n</pre>\n</div>\n",
      "shortdoc": "Load an encryption key from Robocorp Vault.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Crypto.py",
      "lineno": 180
    }
  ],
  "dataTypes": {
    "enums": [
      {
        "type": "Enum",
        "name": "EncryptionType",
        "doc": "<div class=\"document\">\n<p>Enum to specify encryption type</p>\n</div>\n",
        "members": [
          {
            "name": "FERNET",
            "value": "1"
          },
          {
            "name": "AES256",
            "value": "2"
          }
        ]
      },
      {
        "type": "Enum",
        "name": "Hash",
        "doc": "<div class=\"document\">\n<p>Supported hashing algorithms.</p>\n</div>\n",
        "members": [
          {
            "name": "MD5",
            "value": "1"
          },
          {
            "name": "SHA1",
            "value": "2"
          },
          {
            "name": "SHA224",
            "value": "3"
          },
          {
            "name": "SHA256",
            "value": "4"
          },
          {
            "name": "SHA384",
            "value": "5"
          },
          {
            "name": "SHA3_224",
            "value": "6"
          },
          {
            "name": "SHA3_256",
            "value": "7"
          },
          {
            "name": "SHA3_384",
            "value": "8"
          },
          {
            "name": "SHA3_512",
            "value": "9"
          },
          {
            "name": "SHA512",
            "value": "10"
          },
          {
            "name": "SHA512_224",
            "value": "11"
          },
          {
            "name": "SHA512_256",
            "value": "12"
          }
        ]
      }
    ],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "bytes",
      "doc": "<p>Strings are converted to bytes so that each Unicode code point below 256 is directly mapped to a matching byte. Higher code points are not allowed. Robot Framework's <code>\\xHH</code> escape syntax is convenient with bytes having non-printable values.</p>\n<p>Examples: <code>good</code>, <code>hyv\u00e4</code> (same as <code>hyv\\xE4</code>), <code>\\x00</code> (the null byte)</p>",
      "usages": [
        "Decrypt String",
        "Encrypt String",
        "Use Encryption Key"
      ],
      "accepts": [
        "string",
        "bytearray"
      ]
    },
    {
      "type": "Enum",
      "name": "EncryptionType",
      "doc": "<div class=\"document\">\n<p>Enum to specify encryption type</p>\n</div>\n",
      "usages": [
        "__init__",
        "Decrypt File",
        "Decrypt String",
        "Encrypt File",
        "Encrypt String",
        "Generate Key",
        "Use Encryption Key",
        "Use Encryption Key From Vault"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "FERNET",
          "value": "1"
        },
        {
          "name": "AES256",
          "value": "2"
        }
      ]
    },
    {
      "type": "Enum",
      "name": "Hash",
      "doc": "<div class=\"document\">\n<p>Supported hashing algorithms.</p>\n</div>\n",
      "usages": [
        "Hash File",
        "Hash String"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "MD5",
          "value": "1"
        },
        {
          "name": "SHA1",
          "value": "2"
        },
        {
          "name": "SHA224",
          "value": "3"
        },
        {
          "name": "SHA256",
          "value": "4"
        },
        {
          "name": "SHA384",
          "value": "5"
        },
        {
          "name": "SHA3_224",
          "value": "6"
        },
        {
          "name": "SHA3_256",
          "value": "7"
        },
        {
          "name": "SHA3_384",
          "value": "8"
        },
        {
          "name": "SHA3_512",
          "value": "9"
        },
        {
          "name": "SHA512",
          "value": "10"
        },
        {
          "name": "SHA512_224",
          "value": "11"
        },
        {
          "name": "SHA512_256",
          "value": "12"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "__init__",
        "Decrypt File",
        "Decrypt String",
        "Encrypt File",
        "Encrypt String",
        "Generate Key",
        "Use Encryption Key",
        "Use Encryption Key From Vault"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "__init__",
        "Decrypt File",
        "Decrypt String",
        "Encrypt File",
        "Encrypt String",
        "Generate Key",
        "Hash File",
        "Hash String",
        "Use Encryption Key",
        "Use Encryption Key From Vault"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}