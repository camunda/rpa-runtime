{
  "specversion": 1,
  "name": "RPA.DocumentAI.Nanonets",
  "doc": "<div class=\"document\">\n<p>Library to support <a class=\"reference external\" href=\"https://nanonets.com/\">Nanonets</a> service for intelligent document processing (IDP).</p>\n<p>Library requires at the minimum <cite>rpaframework</cite> version <strong>19.0.0</strong>.</p>\n<p>Service supports identifying fields in the documents, which can be given to the\nservice in multiple different file formats and via URL.</p>\n<p><strong>Robot Framework example usage</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.DocumentAI.Nanonets</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Robocorp.Vault</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Identify document</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=   </span><span class=\"nf\">Get Secret</span><span class=\"p\">  </span><span class=\"s\">nanonets-auth</span><span class=\"p\">\n    </span><span class=\"nf\">Set Authorization</span><span class=\"p\">    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[apikey]</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">}=    </span><span class=\"nf\">Predict File</span><span class=\"p\">\n    ...  ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">files</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">eckero.jpg</span><span class=\"p\">\n    ...  ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[receipts-model-id]</span><span class=\"p\">\n    ${</span><span class=\"nv\">fields</span><span class=\"p\">}=    </span><span class=\"nf\">Get Fields From Prediction Result</span><span class=\"p\">    ${</span><span class=\"nv\">result</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">field</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">fields</span><span class=\"p\">}\n        </span><span class=\"nf\">Log To Console</span><span class=\"p\">    </span><span class=\"s\">Label:</span><span class=\"p\">${</span><span class=\"nv\">field</span><span class=\"p\">}</span><span class=\"s\">[label] Text:</span><span class=\"p\">${</span><span class=\"nv\">field</span><span class=\"p\">}</span><span class=\"s\">[ocr_text]</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    ${</span><span class=\"nv\">tables</span><span class=\"p\">}=    </span><span class=\"nf\">Get Tables From Prediction Result</span><span class=\"p\">    ${</span><span class=\"nv\">result</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">table</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">tables</span><span class=\"p\">}\n        </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">rows</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    ${</span><span class=\"nv\">table</span><span class=\"p\">}</span><span class=\"s\">[rows]</span><span class=\"p\">\n            </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">row</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">rows</span><span class=\"p\">}\n                ${</span><span class=\"nv\">cells</span><span class=\"p\">}=    </span><span class=\"nf\">Evaluate</span><span class=\"p\">    </span><span class=\"s\">[cell['text'] for cell in $row]</span><span class=\"p\">\n                </span><span class=\"nf\">Log To Console</span><span class=\"p\">    </span><span class=\"s\">ROW:</span><span class=\"p\">${</span><span class=\"nv\">{&quot; | &quot;.join($cells)</span><span class=\"p\">}</span><span class=\"s\">}</span><span class=\"p\">\n            </span><span class=\"nf\">END</span><span class=\"p\">\n        </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python example usage</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.DocumentAI.Nanonets</span> <span class=\"kn\">import</span> <span class=\"n\">Nanonets</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Vault</span><span class=\"w\">\n\n</span><span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;nanonets-auth&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">nanolib</span> <span class=\"o\">=</span> <span class=\"n\">Nanonets</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">set_authorization</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">predict_file</span><span class=\"p\">(</span><span class=\"n\">file_to_scan</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;receipts-model-id&quot;</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">get_fields_from_prediction_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">fields</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Label: </span><span class=\"si\">{</span><span class=\"n\">field</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> Text: </span><span class=\"si\">{</span><span class=\"n\">field</span><span class=\"p\">[</span><span class=\"s1\">'ocr_text'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">get_tables_from_prediction_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"n\">tables</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"n\">rpatable</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">&quot;rows&quot;</span><span class=\"p\">])</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">&quot;rows&quot;</span><span class=\"p\">]:</span><span class=\"w\">\n</span>        <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"s2\">&quot;text&quot;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">]</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;ROW: </span><span class=\"si\">{</span><span class=\"s1\">' | '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:54",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Nanonets.py",
  "lineno": 12,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Get All Models",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get all available models related to the API key.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">object containing available models</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${models}=</span><span class=\"p\">  </span><span class=\"c\">Get All Models</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${model}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{models}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">  </span><span class=\"c\">Model ID: ${model}[model_id]</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">  </span><span class=\"c\">Model Type: ${model}[model_type]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">get_all_models</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">models</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;model id: </span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"s1\">'model_id'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;model type: </span><span class=\"si\">{</span><span class=\"n\">model</span><span class=\"p\">[</span><span class=\"s1\">'model_type'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Get all available models related to the API key.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Nanonets.py",
      "lineno": 160
    },
    {
      "name": "Get Fields From Prediction Result",
      "args": [
        {
          "name": "prediction",
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict[Hashable, str | int | float | bool | list | dict | None]": "dictionary",
            "List[str | int | float | bool | list | dict | None]": "list",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "prediction: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Helper keyword to get found fields from a prediction result.</p>\n<p>For example. see <tt class=\"docutils literal\">Predict File</tt> keyword</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prediction:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">prediction result dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of found fields</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Helper keyword to get found fields from a prediction result.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Nanonets.py",
      "lineno": 249
    },
    {
      "name": "Get Tables From Prediction Result",
      "args": [
        {
          "name": "prediction",
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict[Hashable, str | int | float | bool | list | dict | None]": "dictionary",
            "List[str | int | float | bool | list | dict | None]": "list",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "prediction: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Helper keyword to get found tables from a prediction result.</p>\n<p>For another example. see <tt class=\"docutils literal\">Predict File</tt> keyword</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prediction:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">prediction result dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of found tables</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># It is possible to create <span class=\"name\">`RPA.Tables</span>` compatible tables from the result\n${tables}=</span><span class=\"p\">    </span><span class=\"c\">Get Tables From Prediction Result</span><span class=\"p\">    </span><span class=\"c\">${result}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{tables}</span><span class=\"p\">\n    </span><span class=\"c\">${rpatable}=</span><span class=\"p\">    </span><span class=\"c\">Create Table</span><span class=\"p\">    </span><span class=\"c\">${table}[rows]</span><span class=\"p\">\n    </span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${row}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{rpatable}</span><span class=\"p\">\n        </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">${row}</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># It is possible to create <span class=\"name\">`RPA.Tables</span>` compatible tables from the result</span><span class=\"w\">\n</span><span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">get_tables_from_prediction_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"n\">tables</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"n\">rpatable</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">&quot;rows&quot;</span><span class=\"p\">])</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rpatable</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Helper keyword to get found tables from a prediction result.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Nanonets.py",
      "lineno": 263
    },
    {
      "name": "Ocr Fulltext",
      "args": [
        {
          "name": "filename",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filename: str"
        },
        {
          "name": "filepath",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filepath: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>OCR fulltext a given file. Returns words and full text.</p>\n<p>Filename and filepath needs to be given separately.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">name of the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filepath:</th><td class=\"field-body\">path of the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">the result in a list format</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${results}=</span><span class=\"p\">  </span><span class=\"c\">OCR Fulltext</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">${CURDIR}${/}invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${result}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{results}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">  </span><span class=\"c\">Filename: ${result}[filename]</span><span class=\"p\">\n    </span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${pagenum}</span><span class=\"p\">  </span><span class=\"c\">${page}</span><span class=\"p\">  </span><span class=\"c\">IN ENUMERATE</span><span class=\"p\">  </span><span class=\"c\">&#64;{result.pagedata}</span><span class=\"p\">   </span><span class=\"c\">start=1</span><span class=\"p\">\n        </span><span class=\"c\">Log To Console</span><span class=\"p\">  </span><span class=\"c\">Page ${pagenum} raw Text: ${page}[raw_text]</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">ocr_fulltext</span><span class=\"p\">(</span><span class=\"s2\">&quot;IMG_8277.jpeg&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;./IMG_8277.jpeg&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;FILENAME: </span><span class=\"si\">{</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s1\">'filename'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">page</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"s2\">&quot;page_data&quot;</span><span class=\"p\">]:</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Page </span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"p\">[</span><span class=\"s1\">'page'</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">page</span><span class=\"p\">[</span><span class=\"s1\">'raw_text'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "OCR fulltext a given file. Returns words and full text.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Nanonets.py",
      "lineno": 112
    },
    {
      "name": "Predict File",
      "args": [
        {
          "name": "filepath",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filepath: str"
        },
        {
          "name": "model_id",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "model_id: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get prediction result for a file by a given model id.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filepath:</th><td class=\"field-body\">filepath to the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param model_id:</th><td class=\"field-body\">id of the Nanonets model to categorize a file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">the result in a list format</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${result}=</span><span class=\"p\">  </span><span class=\"c\">Predict File</span><span class=\"p\">  </span><span class=\"c\">./document.pdf</span><span class=\"p\">   </span><span class=\"c\">${MODEL_ID}</span><span class=\"p\">\n</span><span class=\"c\">${fields}=</span><span class=\"p\">    </span><span class=\"c\">Get Fields From Prediction Result</span><span class=\"p\">    </span><span class=\"c\">${result}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${field}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{fields}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">Label:${field}[label] Text:${field}[ocr_text]</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">${tables}=</span><span class=\"p\">    </span><span class=\"c\">Get Tables From Prediction Result</span><span class=\"p\">    </span><span class=\"c\">${result}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{tables}</span><span class=\"p\">\n    </span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${rows}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">${table}[rows]</span><span class=\"p\">\n        </span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${row}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{rows}</span><span class=\"p\">\n            </span><span class=\"c\">${cells}=</span><span class=\"p\">    </span><span class=\"c\">Evaluate</span><span class=\"p\">    </span><span class=\"c\">[cell['text'] for cell in $row]</span><span class=\"p\">\n            </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">ROW:${{&quot; | &quot;.join($cells)}}</span><span class=\"p\">\n        </span><span class=\"c\">END</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">predict_file</span><span class=\"p\">(</span><span class=\"s2\">&quot;./docu.pdf&quot;</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;receipts-model-id&quot;</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">get_fields_from_prediction_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">fields</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Label: </span><span class=\"si\">{</span><span class=\"n\">field</span><span class=\"p\">[</span><span class=\"s1\">'label'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> Text: </span><span class=\"si\">{</span><span class=\"n\">field</span><span class=\"p\">[</span><span class=\"s1\">'ocr_text'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">get_tables_from_prediction_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">table</span> <span class=\"ow\">in</span> <span class=\"n\">tables</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">&quot;rows&quot;</span><span class=\"p\">]:</span><span class=\"w\">\n</span>        <span class=\"n\">cells</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"s2\">&quot;text&quot;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">]</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;ROW: </span><span class=\"si\">{</span><span class=\"s1\">' | '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">cells</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Get prediction result for a file by a given model id.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Nanonets.py",
      "lineno": 193
    },
    {
      "name": "Set Authorization",
      "args": [
        {
          "name": "apikey",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "apikey: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set Nanonets request headers with key related to API.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param apikey:</th><td class=\"field-body\">key related to the API</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${secrets}=</span><span class=\"p\">   </span><span class=\"c\">Get Secret</span><span class=\"p\">  </span><span class=\"c\">nanonets-auth</span><span class=\"p\">\n</span><span class=\"c\">Set Authorization</span><span class=\"p\">    </span><span class=\"c\">${secrets}[apikey]</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;nanonets-auth&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">nanolib</span> <span class=\"o\">=</span> <span class=\"n\">Nanonets</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">nanolib</span><span class=\"o\">.</span><span class=\"n\">set_authorization</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">])</span>\n</pre>\n</div>\n",
      "shortdoc": "Set Nanonets request headers with key related to API.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Nanonets.py",
      "lineno": 90
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Get Fields From Prediction Result",
        "Get Tables From Prediction Result"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Get Fields From Prediction Result",
        "Get Tables From Prediction Result"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "float",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#float\">float</a> built-in function.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>3.14</code>, <code>2.9979e8</code>, <code>10 000.000 01</code></p>",
      "usages": [
        "Get Fields From Prediction Result",
        "Get Tables From Prediction Result"
      ],
      "accepts": [
        "string",
        "Real"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Get Fields From Prediction Result",
        "Get Tables From Prediction Result"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Get Fields From Prediction Result",
        "Get Tables From Prediction Result"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Get Fields From Prediction Result",
        "Get Tables From Prediction Result"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Get Fields From Prediction Result",
        "Get Tables From Prediction Result",
        "Ocr Fulltext",
        "Predict File",
        "Set Authorization"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}