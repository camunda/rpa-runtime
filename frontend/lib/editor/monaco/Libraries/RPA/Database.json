{
  "specversion": 1,
  "name": "RPA.Database",
  "doc": "<div class=\"document\">\n<p><cite>Database</cite> is a library for handling different database operations.</p>\n<p>All database operations are supported. Keywords <cite>Query</cite> and <cite>Get Rows</cite>\nreturn values by default in <cite>RPA.Table</cite> format.</p>\n<p>Library is compatible with any Database API Specification 2.0 module.</p>\n<p><strong>Workaround for inserting large JSON data for Call Stored Procedure</strong></p>\n<p>Workaround is to use instead <cite>Query</cite> keyword. At the moment there is\nno known fix for the <cite>Call Stored Procedure</cite> keyword as it fails if\nJSON string is more than 8000 characters long.</p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${data}=</span><span class=\"p\">    </span><span class=\"c\">Load JSON from file</span><span class=\"p\">    </span><span class=\"c\">random_data.json</span><span class=\"p\">\n</span><span class=\"c\">${json}=</span><span class=\"p\">    </span><span class=\"c\">Convert JSON to String</span><span class=\"p\">    </span><span class=\"c\">${data}</span><span class=\"p\">\n</span><span class=\"c\"># Single quotes around ${json} string are necessary\nQuery</span><span class=\"p\">    </span><span class=\"c\">exec InsertJsonDataToSampleTable '${json}'</span>\n</pre>\n<p>References:</p>\n<ul class=\"simple\">\n<li>Database API Specification 2.0 - <a class=\"reference external\" href=\"http://www.python.org/dev/peps/pep-0249/\">http://www.python.org/dev/peps/pep-0249/</a></li>\n<li>Lists of DB API 2.0 - <a class=\"reference external\" href=\"http://wiki.python.org/moin/DatabaseInterfaces\">http://wiki.python.org/moin/DatabaseInterfaces</a></li>\n<li>Python Database Programming - <a class=\"reference external\" href=\"http://wiki.python.org/moin/DatabaseProgramming/\">http://wiki.python.org/moin/DatabaseProgramming/</a></li>\n</ul>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.Database</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get Orders From Database</span><span class=\"p\">\n    </span><span class=\"nf\">Connect To Database</span><span class=\"p\">  </span><span class=\"s\">pymysql</span><span class=\"p\">  </span><span class=\"s\">tester</span><span class=\"p\">  </span><span class=\"s\">user</span><span class=\"p\">  </span><span class=\"s\">password</span><span class=\"p\">  </span><span class=\"s\">127.0.0.1</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">orders</span><span class=\"p\">}            </span><span class=\"nf\">Query</span><span class=\"p\">    </span><span class=\"s\">Select * FROM incoming_orders</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">order</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">orders</span><span class=\"p\">}\n        </span><span class=\"nf\">Handle Order</span><span class=\"p\">  ${</span><span class=\"nv\">order</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">FileSecrets</span><span class=\"w\">\n\n</span><span class=\"n\">filesecrets</span> <span class=\"o\">=</span> <span class=\"n\">FileSecrets</span><span class=\"p\">(</span><span class=\"s2\">&quot;secrets.json&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">filesecrets</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;databasesecrets&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connect_to_database</span><span class=\"p\">(</span><span class=\"s1\">'pymysql'</span><span class=\"p\">,</span><span class=\"w\">\n</span>                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;DATABASE&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;USERNAME&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>                    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>                    <span class=\"s1\">'127.0.0.1'</span><span class=\"w\">\n</span>                    <span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">orders</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM incoming_orders&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">order</span> <span class=\"ow\">in</span> <span class=\"n\">orders</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:43",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
  "lineno": 118,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Call Stored Procedure",
      "args": [
        {
          "name": "name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: str"
        },
        {
          "name": "params",
          "types": [
            "List[str]",
            "None"
          ],
          "typedocs": {
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "params: List[str] | None = None"
        },
        {
          "name": "sanstran",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sanstran: bool | None = False"
        },
        {
          "name": "as_table",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_table: bool | None = True"
        },
        {
          "name": "multiple",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "multiple: bool | None = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Call stored procedure with name and params.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">procedure name</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param params:</th><td class=\"field-body\">parameters for the procedure as a list, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">Run the query without an implicit transaction commit or\nrollback if such additional action was detected. (turned off by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">If the result should be an instance of <cite>Table</cite>, otherwise a\n<cite>list</cite> will be returned. (defaults to <cite>True</cite>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param multiple:</th><td class=\"field-body\">Return results for one result set (default <cite>False</cite>) or multiple\nresults from all result sets (set this parameter to <cite>True</cite>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">list of results</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{params}</span><span class=\"p\">     </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">FirstParam</span><span class=\"p\">   </span><span class=\"c\">SecondParam</span><span class=\"p\">   </span><span class=\"c\">ThirdParam</span><span class=\"p\">\n</span><span class=\"c\">&#64;{results}</span><span class=\"p\">    </span><span class=\"c\">Call Stored Procedure</span><span class=\"p\">   </span><span class=\"c\">mystpr</span><span class=\"p\">  </span><span class=\"c\">${params}</span>\n</pre>\n</div>\n",
      "shortdoc": "Call stored procedure with name and params.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 419
    },
    {
      "name": "Connect To Database",
      "args": [
        {
          "name": "module_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "module_name: str | None = None"
        },
        {
          "name": "database",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "database: str | None = None"
        },
        {
          "name": "username",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "username: str | None = None"
        },
        {
          "name": "password",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "password: str | None = None"
        },
        {
          "name": "host",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "host: str | None = None"
        },
        {
          "name": "port",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "port: int | None = None"
        },
        {
          "name": "charset",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "charset: str | None = None"
        },
        {
          "name": "config_file",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "db.cfg",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "config_file: str | None = db.cfg"
        },
        {
          "name": "autocommit",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "autocommit: bool | None = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Connect to database using DB API 2.0 module.</p>\n<p><strong>Note.</strong> The SSL support had been added for <cite>mysql</cite>\nmodule in <cite>rpaframework==17.7.0</cite>. The extra configuration\nparameters can be given via configuration file. Extra\nparameters are:</p>\n<ul class=\"simple\">\n<li>ssl_ca</li>\n<li>ssl_cert</li>\n<li>ssl_key</li>\n<li>client_flags</li>\n</ul>\n<p>Example configuration file:</p>\n<pre class=\"code ini literal-block\">\n<span class=\"k\">[default]</span><span class=\"w\">\n</span><span class=\"na\">host</span><span class=\"o\">=</span><span class=\"s\">hostname.mysql.database.azure.com</span><span class=\"w\">\n</span><span class=\"na\">port</span><span class=\"o\">=</span><span class=\"s\">3306</span><span class=\"w\">\n</span><span class=\"na\">username</span><span class=\"o\">=</span><span class=\"s\">username&#64;hostname</span><span class=\"w\">\n</span><span class=\"na\">database</span><span class=\"o\">=</span><span class=\"s\">databasename</span><span class=\"w\">\n</span><span class=\"na\">client_flags</span><span class=\"o\">=</span><span class=\"s\">SSL,FOUND_ROWS</span><span class=\"w\">\n</span><span class=\"na\">ssl_ca</span><span class=\"o\">=</span><span class=\"s\">DigiCertGlobalRootG2.crt.pem</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param module_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">database module to use</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param database:</th><td class=\"field-body\">name of the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param username:</th><td class=\"field-body\">of the user accessing the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param password:</th><td class=\"field-body\">of the user accessing the database</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param host:</th><td class=\"field-body\">SQL server address</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param port:</th><td class=\"field-body\">SQL server port</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param charset:</th><td class=\"field-body\">for example, &quot;utf-8&quot;, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param config_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location of configuration file, defaults to &quot;db.cfg&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param autocommit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set autocommit value for connect</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">  </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">database</span><span class=\"p\">  </span><span class=\"c\">username</span><span class=\"p\">  </span><span class=\"c\">password</span><span class=\"p\">  </span><span class=\"c\">host</span><span class=\"p\">  </span><span class=\"c\">port</span><span class=\"p\">\n</span><span class=\"c\">Connect To Database</span><span class=\"p\">  </span><span class=\"c\">${CURDIR}${/}resources${/}dbconfig.cfg</span><span class=\"p\">\n\n</span><span class=\"c\">${secrets}=</span><span class=\"p\">    </span><span class=\"c\">Get Secret</span><span class=\"p\">    </span><span class=\"c\">azuredb</span><span class=\"p\">\n</span><span class=\"c\">Connect To Database</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">mysql.connector</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">password=${secrets}[password]</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">config_file=${CURDIR}${/}azure.cfg</span>\n</pre>\n</div>\n",
      "shortdoc": "Connect to database using DB API 2.0 module.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 198
    },
    {
      "name": "Description",
      "args": [
        {
          "name": "table",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get description of the SQL table</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">database descripton as a list</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">    </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">mydb</span><span class=\"p\">  </span><span class=\"c\">user</span><span class=\"p\">  </span><span class=\"c\">pass</span><span class=\"p\">  </span><span class=\"c\">127.0.0.1</span><span class=\"p\">\n</span><span class=\"c\">${db_description}</span><span class=\"p\">      </span><span class=\"c\">Description</span><span class=\"p\">  </span><span class=\"c\">mytable</span>\n</pre>\n</div>\n",
      "shortdoc": "Get description of the SQL table",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 486
    },
    {
      "name": "Disconnect From Database",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Close connection to SQL database</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Connect To Database</span><span class=\"p\">    </span><span class=\"c\">pymysql</span><span class=\"p\">  </span><span class=\"c\">mydb</span><span class=\"p\">  </span><span class=\"c\">user</span><span class=\"p\">  </span><span class=\"c\">pass</span><span class=\"p\">  </span><span class=\"c\">127.0.0.1</span><span class=\"p\">\n</span><span class=\"c\">${result}</span><span class=\"p\">              </span><span class=\"c\">Query</span><span class=\"p\">   </span><span class=\"c\">Select firstname, lastname FROM table</span><span class=\"p\">\n</span><span class=\"c\">Disconnect From Database</span>\n</pre>\n</div>\n",
      "shortdoc": "Close connection to SQL database",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 509
    },
    {
      "name": "Execute Sql Script",
      "args": [
        {
          "name": "filename",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filename: str"
        },
        {
          "name": "sanstran",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sanstran: bool | None = False"
        },
        {
          "name": "encoding",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str | None = utf-8"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Execute content of SQL script as SQL commands.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath to SQL script to execute</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">Run the query without an implicit transaction commit or\nrollback if such additional action was detected. (turned off by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">character encoding of file (utf-8 by default)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Execute SQL Script</span><span class=\"p\">   </span><span class=\"c\">script.sql</span>\n</pre>\n</div>\n",
      "shortdoc": "Execute content of SQL script as SQL commands.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 525
    },
    {
      "name": "Get Number Of Rows",
      "args": [
        {
          "name": "table",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table: str"
        },
        {
          "name": "conditions",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "conditions: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get number of rows in a table. Conditions can be given\nas arguments for WHERE clause.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param conditions:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">restrictions for selections, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">number or rows</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${count}</span><span class=\"p\">   </span><span class=\"c\">Get Number Of Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">\n</span><span class=\"c\">${count}</span><span class=\"p\">   </span><span class=\"c\">Get Number Of Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">column1=5 and column2='x'</span>\n</pre>\n</div>\n",
      "shortdoc": "Get number of rows in a table. Conditions can be given as arguments for WHERE clause.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 778
    },
    {
      "name": "Get Rows",
      "args": [
        {
          "name": "table",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table"
        },
        {
          "name": "columns",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "columns: str | None = None"
        },
        {
          "name": "conditions",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "conditions: str | None = None"
        },
        {
          "name": "as_table",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_table: bool | None = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get rows from table. Columns and conditions can be\nset to filter result.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">name of the SQL table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">name of columns to return, defaults to <cite>None</cite>\nmeans that all columns are returned</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param conditions:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">limiting result by WHERE clause, defaults to <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">if result should be instance of <tt class=\"docutils literal\">Table</tt>, defaults to <cite>True</cite>\n<cite>False</cite> means that return type would be <cite>list</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">table or list based on param as_table arguement</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">arvo</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">arvo</span><span class=\"p\">  </span><span class=\"c\">columns=id,name</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">columns=id</span><span class=\"p\">  </span><span class=\"c\">conditions=column1='newvalue'</span><span class=\"p\">\n</span><span class=\"c\">&#64;{res}</span><span class=\"p\">   </span><span class=\"c\">Get Rows</span><span class=\"p\">  </span><span class=\"c\">tablename</span><span class=\"p\">  </span><span class=\"c\">conditions=column2='updatedvalue'</span>\n</pre>\n</div>\n",
      "shortdoc": "Get rows from table. Columns and conditions can be set to filter result.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 744
    },
    {
      "name": "Query",
      "args": [
        {
          "name": "statement",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "statement: str"
        },
        {
          "name": "assertion",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "assertion: str | None = None"
        },
        {
          "name": "sanstran",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sanstran: bool | None = False"
        },
        {
          "name": "as_table",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_table: bool | None = True"
        },
        {
          "name": "returning",
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "returning: bool | None = None"
        },
        {
          "name": "data",
          "types": [
            "Dict",
            "Tuple",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "Tuple": "tuple",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "data: Dict | Tuple | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Execute a SQL query and optionally return the execution result.</p>\n<p>Security Warning: In order to safely include untrusted data in SQL queries\nit is advisable to use parameterized queries. For more information about\nformatting for specific databases, please see <a class=\"reference external\" href=\"https://bobby-tables.com/python\">https://bobby-tables.com/python</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param statement:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQL statement to execute.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param assertion:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Assert on query result, row_count or columns.\nWorks only for <cite>SELECT</cite> statements. (defaults to <cite>None</cite>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sanstran:</th><td class=\"field-body\">Run the query without an implicit transaction commit or\nrollback if such additional action was detected and this is set to <cite>True</cite>.\n(turned off by default, meaning that <em>commit</em> is performed on successful\nqueries and <em>rollback</em> on failing ones automatically)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_table:</th><td class=\"field-body\">If the result should be an instance of <cite>Table</cite>, otherwise a\n<cite>list</cite> will be returned. (defaults to <cite>True</cite>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param returning:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Set this to <cite>True</cite> if you want to have rows explicitly\nreturned (instead of the query result), <cite>False</cite> otherwise. (by default a\nheuristic detects if it should return or not)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param data:</th><td class=\"field-body\">The data to use if the SQL statement is parameterized</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Fetched rows when <cite>returning</cite> is <cite>True</cite> or if the heuristic decides\nthat the statement should return (raw rows or as <cite>Table</cite> if <cite>as_table</cite> is\n<cite>True</cite>), otherwise the object produced by the execution is returned.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Database</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Select Values From Table</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">rows</span><span class=\"p\">} =    </span><span class=\"nf\">Query</span><span class=\"p\">   </span><span class=\"s\">SELECT id,value FROM table</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">row</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">rows</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">   ${</span><span class=\"nv\">row</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">res</span><span class=\"p\">} =    </span><span class=\"nf\">Query</span><span class=\"p\">   </span><span class=\"s\">Select * FROM table</span><span class=\"p\">   </span><span class=\"s\">row_count &gt; </span><span class=\"p\">${</span><span class=\"nv\">EXPECTED</span><span class=\"p\">}\n    &#64;{</span><span class=\"nv\">res</span><span class=\"p\">} =    </span><span class=\"nf\">Query</span><span class=\"p\">   </span><span class=\"s\">Select * FROM table</span><span class=\"p\">   </span><span class=\"s\">'value' in columns</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">res</span><span class=\"p\">} =    </span><span class=\"nf\">Query</span><span class=\"p\">   </span><span class=\"s\">Select * FROM table</span><span class=\"p\">   </span><span class=\"s\">columns == ['id', 'value']</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">res</span><span class=\"p\">} =    </span><span class=\"nf\">Query</span><span class=\"p\">   </span><span class=\"s\">Select * FROM table WHERE value = ?</span><span class=\"p\">  </span><span class=\"s\">data=(&quot;</span><span class=\"p\">${</span><span class=\"nv\">d</span><span class=\"p\">}</span><span class=\"s\">&quot;, )</span><span class=\"p\">\n    </span><span class=\"c\"># Calling Stored Procedure with Query keyword requires that parameter\n</span><span class=\"p\">    </span><span class=\"c\"># 'returning' is set to 'True'\n</span><span class=\"p\">    &#64;{</span><span class=\"nv\">res</span><span class=\"p\">} =    </span><span class=\"nf\">Query</span><span class=\"p\">   </span><span class=\"s\">Exec stored_procedure</span><span class=\"p\">  </span><span class=\"s\">returning=True</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Database</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span><span class=\"w\">\n\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">insert_and_return_names</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">connect_to_database</span><span class=\"p\">(</span><span class=\"s2\">&quot;sqlite3&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sqlite.db&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;DROP TABLE IF EXISTS orders;&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">&quot;CREATE TABLE orders(id INTEGER PRIMARY KEY, name TEXT);&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">data1</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my-1st-order&quot;</span><span class=\"w\">\n</span>    <span class=\"n\">data2</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my-2nd-order&quot;</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"s1\">'INSERT INTO orders(id, name) VALUES(1, ?), (2, ?);'</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">data1</span><span class=\"p\">,</span> <span class=\"n\">data2</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"s1\">'SELECT * FROM orders'</span><span class=\"w\">\n</span>    <span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">])</span>  <span class=\"c1\"># ['my-1st-order', 'my-2nd-order']</span>\n</pre>\n</div>\n",
      "shortdoc": "Execute a SQL query and optionally return the execution result.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 583
    },
    {
      "name": "Set Auto Commit",
      "args": [
        {
          "name": "autocommit",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "autocommit: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set database auto commit mode.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param autocommit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">boolean value for auto commit, defaults to True</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Auto Commit</span><span class=\"p\">             </span><span class=\"c\"># auto commit is set on\nSet Auto Commit</span><span class=\"p\">   </span><span class=\"c\">False</span><span class=\"p\">     </span><span class=\"c\"># auto commit is turned off</span>\n</pre>\n</div>\n",
      "shortdoc": "Set database auto commit mode.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Database.py",
      "lineno": 729
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Call Stored Procedure",
        "Connect To Database",
        "Execute Sql Script",
        "Get Rows",
        "Query",
        "Set Auto Commit"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Query"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Connect To Database"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Call Stored Procedure"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Call Stored Procedure",
        "Connect To Database",
        "Execute Sql Script",
        "Get Number Of Rows",
        "Get Rows",
        "Query"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Call Stored Procedure",
        "Connect To Database",
        "Description",
        "Execute Sql Script",
        "Get Number Of Rows",
        "Get Rows",
        "Query"
      ],
      "accepts": [
        "Any"
      ]
    },
    {
      "type": "Standard",
      "name": "tuple",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#tuple\">tuple</a> literals. They are converted to actual tuples using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including tuples and other containers.</p>\n<p>Examples: <code>('one', 'two')</code>, <code>(('one', 1), ('two', 2))</code></p>",
      "usages": [
        "Query"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    }
  ]
}