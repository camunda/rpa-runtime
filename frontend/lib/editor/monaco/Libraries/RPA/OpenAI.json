{
  "specversion": 1,
  "name": "RPA.OpenAI",
  "doc": "<div class=\"document\">\n<p>Library to support <a class=\"reference external\" href=\"https://openai.com\">OpenAI</a> and <a class=\"reference external\" href=\"https://learn.microsoft.com/en-us/azure/cognitive-services/openai/overview\">Azure OpenAI</a> services.</p>\n<p>Library is <strong>not</strong> included in the <cite>rpaframework</cite> package, so in order to use it\nyou have to add <cite>rpaframework-openai</cite> with the desired version in your\n<em>conda.yaml</em> file.</p>\n<p><strong>Robot Framework example usage</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.Vault</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.OpenAI</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Create a text completion</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}   </span><span class=\"nf\">Get Secret</span><span class=\"p\">   </span><span class=\"s\">secret_name=OpenAI</span><span class=\"p\">\n    </span><span class=\"nf\">Authorize To OpenAI</span><span class=\"p\">   </span><span class=\"s\">api_key=</span><span class=\"p\">${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[key]</span><span class=\"p\">\n    ${</span><span class=\"nv\">completion</span><span class=\"p\">}    </span><span class=\"nf\">Completion Create</span><span class=\"p\">\n    ...     </span><span class=\"s\">Write a tagline for an ice cream shop</span><span class=\"p\">\n    ...     </span><span class=\"s\">temperature=0.6</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">   ${</span><span class=\"nv\">completion</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python example usage</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Vault</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.OpenAI</span> <span class=\"kn\">import</span> <span class=\"n\">OpenAI</span><span class=\"w\">\n\n</span><span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;OpenAI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">baselib</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">authorize_to_openai</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;key&quot;</span><span class=\"p\">])</span><span class=\"w\">\n\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">completion_create</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"n\">Create</span> <span class=\"n\">a</span> <span class=\"n\">tagline</span> <span class=\"k\">for</span> <span class=\"n\">icecream</span> <span class=\"n\">shop</span><span class=\"s1\">',</span><span class=\"w\">\n</span>    <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:10:06",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/OpenAI.py",
  "lineno": 6,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Authorize To Azure Openai",
      "args": [
        {
          "name": "api_key",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "api_key: str"
        },
        {
          "name": "api_base",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "api_base: str"
        },
        {
          "name": "api_type",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "azure",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "api_type: str | None = azure"
        },
        {
          "name": "api_version",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "2023-05-15",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "api_version: str | None = 2023-05-15"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Keyword for authorize to Azure OpenAI.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param api_key:</th><td class=\"field-body\">Your Azure OpenAI API key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param api_base:</th><td class=\"field-body\">Your Endpoint URL. Example: <a class=\"reference external\" href=\"https://docs-test-001.openai.azure.com/\">https://docs-test-001.openai.azure.com/</a></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param api_type:</th><td class=\"field-body\">&quot;azure&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param api_version:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">&quot;2023-05-15&quot;</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${secrets}</span><span class=\"p\">   </span><span class=\"c\">Get Secret</span><span class=\"p\">   </span><span class=\"c\">secret_name=AzureOpenAI</span><span class=\"p\">\n</span><span class=\"c\">Authorize To Azure Openai</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">api_key=${secrets}[api_key]</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">api_base=${secrets}[api_base]</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">api_type=azure</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">api_version=2023-05-15</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;AzureOpenAI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">baselib</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">authorize_to_azure_openai</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;api_key&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;api_base&quot;</span><span class=\"p\">],</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;azure&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-05-15&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Keyword for authorize to Azure OpenAI.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/OpenAI.py",
      "lineno": 55
    },
    {
      "name": "Authorize To Openai",
      "args": [
        {
          "name": "api_key",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "api_key: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Keyword for authorize to OpenAI with your API key obtained from your account.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param api_key:</th><td class=\"field-body\">Your OpenAI API key</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${secrets}</span><span class=\"p\">   </span><span class=\"c\">Get Secret</span><span class=\"p\">   </span><span class=\"c\">secret_name=OpenAI</span><span class=\"p\">\n</span><span class=\"c\">Authorize To OpenAI</span><span class=\"p\">   </span><span class=\"c\">api_key=${secrets}[key]</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;OpenAI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">baselib</span> <span class=\"o\">=</span> <span class=\"n\">OpenAI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">authorize_to_openai</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;key&quot;</span><span class=\"p\">])</span>\n</pre>\n</div>\n",
      "shortdoc": "Keyword for authorize to OpenAI with your API key obtained from your account.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/OpenAI.py",
      "lineno": 100
    },
    {
      "name": "Chat Completion Create",
      "args": [
        {
          "name": "user_content",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "user_content: str | None = None"
        },
        {
          "name": "conversation",
          "types": [
            "List",
            "None"
          ],
          "typedocs": {
            "List": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "conversation: List | None = None"
        },
        {
          "name": "model",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "gpt-3.5-turbo",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "model: str | None = gpt-3.5-turbo"
        },
        {
          "name": "system_content",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "system_content: str | None = None"
        },
        {
          "name": "temperature",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "temperature: int | None = 1"
        },
        {
          "name": "top_probability",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "top_probability: int | None = 1"
        },
        {
          "name": "frequency_penalty",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "frequency_penalty: int | None = 0"
        },
        {
          "name": "presence_penalty",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "presence_penalty: int | None = 0"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Keyword for creating ChatGPT text completions using OpenAI or Azure OpenAI.\nKeyword returns the response as a string and the message history as a list.</p>\n<p><strong>Note</strong>. When using <tt class=\"docutils literal\">Azure OpenAI</tt> you must provide the <tt class=\"docutils literal\">deployment_name</tt>\nas the <tt class=\"docutils literal\">model</tt> parameter instead of the model ID used with <tt class=\"docutils literal\">OpenAI</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param user_content:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Text submitted to ChatGPT to generate completions.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param conversation:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">List containing the conversation to be continued. Leave\nempty for a new conversation.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param model:</th><td class=\"field-body\">For <tt class=\"docutils literal\">OpenAI</tt> the ID of the model to use, e.g. <tt class=\"docutils literal\"><span class=\"pre\">gpt-4</span></tt>\nor <tt class=\"docutils literal\"><span class=\"pre\">gpt-3.5-turbo</span></tt>. For <tt class=\"docutils literal\">Azure OpenAI</tt> the Deployment name,\ne.g. <tt class=\"docutils literal\">myGPT4deployment</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param system_content:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The system message helps set the behavior of\nthe assistant.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param temperature:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">What sampling temperature to use between 0 to 2. Higher\nvalues means the model will take more risks.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param top_probability:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">An alternative to sampling with temperature, called\nnucleus sampling, where the model considers the results of the tokens with\ntop_p probability mass.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param frequency_penalty:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Number between -2.0 and 2.0. Positive values penalize\nnew tokens based on their existing frequency in the text so far.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param presence_penalty:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Number between -2.0 and 2.0. Positive values penalize\nnew tokens based on whether they appear in the text so far.</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Get response without conversation history.\n${response}</span><span class=\"p\">   </span><span class=\"c\">&#64;{chatgpt_conversation}=</span><span class=\"p\">     </span><span class=\"c\">Chat Completion Create</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">user_content=What is the biggest mammal?</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${response}</span><span class=\"p\">\n\n</span><span class=\"c\"># Continue the conversation by using the &quot;conversation&quot; argument.\n${response}</span><span class=\"p\">   </span><span class=\"c\">&#64;{chatgpt_conversation}=</span><span class=\"p\">     </span><span class=\"c\">Chat Completion Create</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">conversation=${chatgpt_conversation}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">user_content=How old can it live?</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${response}</span>\n</pre>\n</div>\n",
      "shortdoc": "Keyword for creating ChatGPT text completions using OpenAI or Azure OpenAI. Keyword returns the response as a string and the message history as a list.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/OpenAI.py",
      "lineno": 197
    },
    {
      "name": "Completion Create",
      "args": [
        {
          "name": "prompt",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "prompt: str"
        },
        {
          "name": "model",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "text-davinci-003",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "model: str | None = text-davinci-003"
        },
        {
          "name": "temperature",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "0.7",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "temperature: int | None = 0.7"
        },
        {
          "name": "max_tokens",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "256",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "max_tokens: int | None = 256"
        },
        {
          "name": "top_probability",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "top_probability: int | None = 1"
        },
        {
          "name": "frequency_penalty",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "frequency_penalty: int | None = 0"
        },
        {
          "name": "presence_penalty",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "presence_penalty: int | None = 0"
        },
        {
          "name": "result_format",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "string",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "result_format: str | None = string"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Keyword for creating text completions in OpenAI and Azure OpenAI.\nKeyword returns a text string.</p>\n<p><strong>Note</strong>. When using <tt class=\"docutils literal\">Azure OpenAI</tt> you must provide the <tt class=\"docutils literal\">deployment_name</tt>\nas the <tt class=\"docutils literal\">model</tt> parameter instead of the model ID used with <tt class=\"docutils literal\">OpenAI</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param prompt:</th><td class=\"field-body\">Text submitted to OpenAI for creating natural language.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param model:</th><td class=\"field-body\">For <tt class=\"docutils literal\">OpenAI</tt> the ID of the model to use, e.g. <tt class=\"docutils literal\"><span class=\"pre\">text-davinci-003</span></tt>.\nFor <tt class=\"docutils literal\">Azure OpenAI</tt> the Deployment name, e.g. <tt class=\"docutils literal\">myDavinci3deployment</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param temperature:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">What sampling temperature to use.\nHigher values means the model will take more risks..</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_tokens:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The maximum number of tokens to generate in the completion..</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param top_probability:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Controls diversity via nucleus sampling. 0.5 means half\nof all likelihood-weighted options are considered.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param frequency_penalty:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Number between -2.0 and 2.0. Positive values penalize\nnew tokens based on their existing frequency in the text so far.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param presence_penalty:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Number between -2.0 and 2.0. Positive values penalize\nnew tokens based on whether they appear in the text so far.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param result_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Result format (string / json). Return just a string or\nthe default JSON response.</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${response}</span><span class=\"p\">  </span><span class=\"c\">Completion Create</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">     </span><span class=\"c\">Write a tagline for an icecream shop.</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">     </span><span class=\"c\">temperature=0.6</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">     </span><span class=\"c\">${response}</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">completion_create</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s1\">'Create a tagline for icecream shop'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Keyword for creating text completions in OpenAI and Azure OpenAI. Keyword returns a text string.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/OpenAI.py",
      "lineno": 123
    },
    {
      "name": "Image Create",
      "args": [
        {
          "name": "prompt",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "prompt: str"
        },
        {
          "name": "size",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "512x512",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "size: str | None = 512x512"
        },
        {
          "name": "num_images",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "num_images: int | None = 1"
        },
        {
          "name": "result_format",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "list",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "result_format: str | None = list"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Keyword for creating one or more images using OpenAI.\nKeyword returns a list of urls for the images created.</p>\n<p><strong>Note</strong>. Keyword not supported in the <tt class=\"docutils literal\">Azure OpenAI</tt> service.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param prompt:</th><td class=\"field-body\">A text description of the desired image(s).\nThe maximum length is 1000 characters.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param size:</th><td class=\"field-body\">Size of the files to be created. 256x256, 512x512, 1024x1024</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param num_images:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The number of images to generate. Must be between 1 and 10.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param result_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Result format (list / json).</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${images}</span><span class=\"p\">    </span><span class=\"c\">Image Create</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">Cartoon style picture of a cute monkey skateboarding.</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">size=256x256</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">num_images=2</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${url}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{images}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${url}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">image_create</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s1\">'Cartoon style picture of a cute monkey skateboarding'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">'256x256'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">num_images</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">images</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Keyword for creating one or more images using OpenAI. Keyword returns a list of urls for the images created.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/OpenAI.py",
      "lineno": 283
    },
    {
      "name": "Image Create Variation",
      "args": [
        {
          "name": "src_image",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "src_image: str"
        },
        {
          "name": "size",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "512x512",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "size: str | None = 512x512"
        },
        {
          "name": "num_images",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "num_images: int | None = 1"
        },
        {
          "name": "result_format",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "list",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "result_format: str | None = list"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Keyword for creating one or more variations of a image. Keyword\nreturns a list of urls for the images created.\nSource file must be a valid PNG file, less than 4MB, and square.</p>\n<p><strong>Note</strong>. Keyword not supported in the <tt class=\"docutils literal\">Azure OpenAI</tt> service.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param src_image:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The image to use as the basis for the variation(s).\nMust be a valid PNG file, less than 4MB, and square.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param size:</th><td class=\"field-body\">The size of the generated images.\nMust be one of 256x256, 512x512, or 1024x1024.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param num_images:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The number of images to generate. Must be between 1 and 10</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param result_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Result format (list / json).</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${variations}</span><span class=\"p\">   </span><span class=\"c\">Image Create Variation</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">     </span><span class=\"c\">source_image.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">     </span><span class=\"c\">size=256x256</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">     </span><span class=\"c\">num_images=2</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${url}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{variations}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${url}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">variations</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">image_create_variation</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s1\">'source_image.png'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s1\">'256x256'</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">num_images</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">variations</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Keyword for creating one or more variations of a image. Keyword returns a list of urls for the images created. Source file must be a valid PNG file, less than 4MB, and square.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/OpenAI.py",
      "lineno": 343
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Chat Completion Create",
        "Completion Create",
        "Image Create",
        "Image Create Variation"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Chat Completion Create"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Authorize To Azure Openai",
        "Chat Completion Create",
        "Completion Create",
        "Image Create",
        "Image Create Variation"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Authorize To Azure Openai",
        "Authorize To Openai",
        "Chat Completion Create",
        "Completion Create",
        "Image Create",
        "Image Create Variation"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}