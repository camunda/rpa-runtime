{
  "specversion": 2,
  "name": "Camunda.Windows",
  "doc": "<div class=\"document\">\n<p>The <cite>Windows</cite> is a library that can be used for Windows desktop automation.</p>\n<p>Library is included in the <strong>rpaframework</strong> package by default, but as shown in the\nbelow example library can be also installed separately without <strong>rpaframework</strong>.</p>\n<pre class=\"code yaml literal-block\">\n<span class=\"nt\">channels</span><span class=\"p\">:</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">conda-forge</span><span class=\"w\">\n</span><span class=\"nt\">dependencies</span><span class=\"p\">:</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">python=3.9.13</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">pip=22.1.2</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">pip</span><span class=\"p\">:</span><span class=\"w\">\n    </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">rpaframework-windows==7.0.2</span><span class=\"w\"> </span><span class=\"c1\"># standalone Windows library (<span class=\"name\">rpaframework</span> includes this library)</span>\n</pre>\n<p><strong>About terminology</strong></p>\n<p><strong>ControlType</strong> is a value referred to by locator keys <cite>type:</cite> or <cite>control</cite>. Represents type of application\nobject, which can be e.g. <cite>Window</cite>, <cite>Button</cite> or <cite>ListItem</cite>.</p>\n<p><strong>Element</strong> is an entity of an application structure (e.g. certain button in a window), which can be\nidentified by a locator. (also referred as <strong>Control</strong>)</p>\n<p><strong>WindowsElement</strong> is an library container object for the <tt class=\"docutils literal\">Element</tt>. All the keywords returning elements, will in\nfact return <tt class=\"docutils literal\"><span class=\"pre\">WindowsElement<span class=\"name\">`s.</span> The ones accepting </span>`locator</tt> or <tt class=\"docutils literal\">root_element</tt> as arguments, will accept\n<tt class=\"docutils literal\">WindowsElement</tt> as an argument value. (<tt class=\"docutils literal\">locator</tt> accepts strings as well)</p>\n<p>Structure of the <tt class=\"docutils literal\">WindowsElement</tt></p>\n<pre class=\"code python literal-block\">\n<span class=\"k\">class</span> <span class=\"nc\">WindowsElement</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Control</span>        <span class=\"c1\"># <span class=\"name\">`item</span>` contains object instance of the element</span><span class=\"w\">\n</span>    <span class=\"n\">locator</span><span class=\"p\">:</span> <span class=\"nb\">str</span>         <span class=\"c1\"># <span class=\"name\">`locator</span>` that found this element</span><span class=\"w\">\n</span>    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>            <span class=\"c1\"># <span class=\"name\">`Name</span>` attribute of the element</span><span class=\"w\">\n</span>    <span class=\"n\">automation_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>   <span class=\"c1\"># <span class=\"name\">`AutomationId</span>` attribute of the element</span><span class=\"w\">\n</span>    <span class=\"n\">control_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>    <span class=\"c1\"># <span class=\"name\">`ControlTypeName</span>` attribute of the element</span><span class=\"w\">\n</span>    <span class=\"n\">class_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>      <span class=\"c1\"># <span class=\"name\">`ClassName</span>` attribute of the element</span><span class=\"w\">\n</span>    <span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"nb\">int</span>            <span class=\"c1\"># element's rectangle left coordinate</span><span class=\"w\">\n</span>    <span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"nb\">int</span>           <span class=\"c1\"># element's rectangle right coordinate</span><span class=\"w\">\n</span>    <span class=\"n\">top</span><span class=\"p\">:</span> <span class=\"nb\">int</span>             <span class=\"c1\"># element's rectangle top coordinate</span><span class=\"w\">\n</span>    <span class=\"n\">bottom</span><span class=\"p\">:</span> <span class=\"nb\">int</span>          <span class=\"c1\"># element's rectangle bottom coordinate</span><span class=\"w\">\n</span>    <span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">int</span>           <span class=\"c1\"># element's rectangle horizontal width</span><span class=\"w\">\n</span>    <span class=\"n\">height</span><span class=\"p\">:</span> <span class=\"nb\">int</span>          <span class=\"c1\"># element's rectangle vertical height</span><span class=\"w\">\n</span>    <span class=\"n\">xcenter</span><span class=\"p\">:</span> <span class=\"nb\">int</span>         <span class=\"c1\"># element's rectangle center point x coordinate</span><span class=\"w\">\n</span>    <span class=\"n\">ycenter</span><span class=\"p\">:</span> <span class=\"nb\">int</span>         <span class=\"c1\"># element's rectangle center point y coordinate</span>\n</pre>\n<p>Example of the <tt class=\"docutils literal\">WindowsElement</tt> usage</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${rows}=</span><span class=\"p\">    </span><span class=\"c\">Get Elements</span><span class=\"p\">    </span><span class=\"c\">class:DataGridRow</span><span class=\"p\">\n</span><span class=\"c\"># ${rows} is a list of <span class=\"name\">`WindowsElement</span>`s\nFOR</span><span class=\"p\">    </span><span class=\"c\">${row}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{rows}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">${row.name}</span><span class=\"p\">                </span><span class=\"c\"># access <span class=\"name\">`WindowsElement</span>`\n</span><span class=\"p\">    </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">${row.item.AutomationId}</span><span class=\"p\">   </span><span class=\"c\"># access <span class=\"name\">`WindowsElement.item</span>` directly\n</span><span class=\"p\">    </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">${row.item.Name}</span><span class=\"p\">           </span><span class=\"c\"># same as <span class=\"name\">`${row.name}</span>`\nEND</span>\n</pre>\n<p><strong>Locators</strong></p>\n<p>Locators are based on different strategies that can used identify Control object.</p>\n<p>Available strategies that can be used for the locators:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"14%\" />\n<col width=\"86%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Key</th>\n<th class=\"head\">Maps to search property</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>name</td>\n<td>Name</td>\n</tr>\n<tr><td>class</td>\n<td>ClassName</td>\n</tr>\n<tr><td>type</td>\n<td>ControlType</td>\n</tr>\n<tr><td>control</td>\n<td>ControlType</td>\n</tr>\n<tr><td>id</td>\n<td>AutomationId</td>\n</tr>\n<tr><td>automationid</td>\n<td>AutomationId</td>\n</tr>\n<tr><td>regex</td>\n<td>RegexName</td>\n</tr>\n<tr><td>subname</td>\n<td>SubName</td>\n</tr>\n<tr><td>index</td>\n<td>foundIndex (int)</td>\n</tr>\n<tr><td>offset</td>\n<td>offset coordinates (x (int), y (int)) from control center</td>\n</tr>\n<tr><td>executable</td>\n<td>target window by its executable name</td>\n</tr>\n<tr><td>handle</td>\n<td>target window handle (int)</td>\n</tr>\n<tr><td>desktop</td>\n<td><em>SPECIAL</em> target desktop, no value for the key e.g. <cite>desktop:desktop and name:Calculator</cite></td>\n</tr>\n<tr><td>process</td>\n<td><em>NOT YET SUPPORTED</em> target window by its executable's process id</td>\n</tr>\n<tr><td>depth</td>\n<td>searchDepth (int) for finding Control (default 8)</td>\n</tr>\n<tr><td>path</td>\n<td>target element by its index-based path traversal (e.g. <cite>path:2|3|8|2</cite>)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>About root element on locators</strong></p>\n<p>Locators work on currently active <cite>root element</cite>. At the start <cite>root element</cite> is the whole\ndesktop. There are different ways on changing this root element.</p>\n<p>Keyword <tt class=\"docutils literal\">Control Window</tt> is the most common method of setting certain system window\nas a root element for further actions using locators. In the absence of a provided\n<cite>root_element</cite> parameter, here's how you can control the default root element\nresolving:</p>\n<blockquote>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">Set Anchor</tt>: Sets the active anchor window from which the search begins.</li>\n<li><tt class=\"docutils literal\">Control Window</tt>: Controls and focuses on a window and marks it as the current\nactive window, from which all the subsequent searches will start from in the\nabsence of a set anchor.</li>\n<li>If there's no set anchor nor active window, then the last resort will be the\n&quot;Desktop&quot; element itself.</li>\n</ul>\n</blockquote>\n<p>Locators themselves support cascading syntax (denoted by character <cite>&gt;</cite> in the locator string),\nwhich can denote root element in &quot;parent (root) &amp; child&quot; terms.</p>\n<p>For example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click</span><span class=\"p\">  </span><span class=\"c\">id:controls &gt; id:activate</span>\n</pre>\n<p>On the above example the left side of the <cite>&gt;</cite> character, <cite>id:controls</cite>, represents the root element\n(can be called as &quot;parent element&quot; in this case). Right side of the locator string, <cite>id:activate</cite>,\nrepresents &quot;child&quot; element and it will be searched under the &quot;parent element&quot;.</p>\n<p>This way element search is more efficient, because search are restricted to certain section of element\ntree which can be quite huge especially on the desktop level and in certain applications.</p>\n<p>Keyword examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Control Window</span><span class=\"p\">    </span><span class=\"c\">name:Calculator</span><span class=\"p\">\n</span><span class=\"c\">Control Window</span><span class=\"p\">    </span><span class=\"c\">Calculator</span><span class=\"p\">  </span><span class=\"c\"># will execute search by 'name:Calculator'\nControl Window</span><span class=\"p\">    </span><span class=\"c\">executable:Spotify.exe</span>\n</pre>\n<p>some example locators, <cite>and</cite> can be omitted ie. space <span class=\"name\"> </span> between locator keys means the same thing as <cite>and</cite>:</p>\n<pre class=\"code bash literal-block\">\nid:clearButton<span class=\"w\">\n</span>type:Group<span class=\"w\"> </span>and<span class=\"w\"> </span>name:<span class=\"s2\">&quot;Number pad&quot;</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>type:Button<span class=\"w\"> </span>and<span class=\"w\"> </span>index:4<span class=\"w\">\n</span>type:Group<span class=\"w\"> </span>and<span class=\"w\"> </span>name:<span class=\"s2\">&quot;Number pad&quot;</span><span class=\"w\"> </span>&gt;<span class=\"w\"> </span>control:Button<span class=\"w\"> </span>index:5<span class=\"w\">\n</span>id:Units1<span class=\"w\"> </span>&gt;<span class=\"w\"> </span>name:<span class=\"si\">${</span><span class=\"nv\">unit</span><span class=\"si\">}</span><span class=\"w\">\n</span>class:Button<span class=\"w\"> </span>offset:370,0\n</pre>\n<p><strong>About locator restrictions</strong></p>\n<p>Visual locators are not supported in this library and they can't be used in the same chain with these\nWindows locators. Visual locators are supported by the <cite>RPA.Desktop</cite> library. Locator chaining (image and\nWindows locators) support will be added in the future.</p>\n<p>Locator syntax does not yet support OR operation (only AND operations).</p>\n<p><strong>About search depth</strong></p>\n<p>The library does element search depth by default to the level of 8. This means that locator will look into\n8 levels of elements under element tree of the root element. This can lead into situation where element\ncan't be found. To fix this it is recommended to set root element which can be found within 8 levels OR\ndefining <cite>depth</cite> in the locator string to a bigger value, e.g. <cite>id:deeplyNestedButton depth:16</cite>. Useful\nkeywords for setting root element are <tt class=\"docutils literal\">Control Window</tt>, <tt class=\"docutils literal\">Set Anchor</tt> and <tt class=\"docutils literal\">Get Element</tt>.</p>\n<p><strong>About the path strategy</strong></p>\n<p>When automation IDs and names aren't enough (or not reliable), then you can fallback\nto the positions of elements in a tree. This can be achieved using the <cite>path:</cite>\nstrategy to specify a list of element positions which indicates how to traverse the\ntree from parent to child beginning with the resolved root.</p>\n<p>Example: <cite>Calculator &gt; path:2|3|2|8|2</cite> - this locator looks for the &quot;Calculator&quot;\nwindow, then it looks for the 2nd direct child and then it looks for the 3rd one of\nthe previous child and so on until it consumes the path completely. (indexes start\nwith <cite>1</cite>)</p>\n<p>An alternative way to get the whole tree to explore it yourself would be to use the\n<tt class=\"docutils literal\">Print Tree</tt> keyword.</p>\n<p><strong>Keyboard and mouse</strong></p>\n<p>Keys for the keyboard actions are given using <tt class=\"docutils literal\">uiautomation</tt> specification.</p>\n<p>Special keys which are given within <cite>{}</cite> syntax.</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"7%\" />\n<col width=\"93%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Key</th>\n<th class=\"head\">Maps to action</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>LBUTTON</td>\n<td>Left mouse button</td>\n</tr>\n<tr><td>RBUTTON</td>\n<td>Right mouse button</td>\n</tr>\n<tr><td>CANCEL</td>\n<td>Control-break processing</td>\n</tr>\n<tr><td>MBUTTON</td>\n<td>Middle mouse button (three-button mouse)</td>\n</tr>\n<tr><td>XBUTTON1</td>\n<td>X1 mouse button</td>\n</tr>\n<tr><td>XBUTTON2</td>\n<td>X2 mouse button</td>\n</tr>\n<tr><td>BACK</td>\n<td>BACKSPACE key</td>\n</tr>\n<tr><td>TAB</td>\n<td>TAB key</td>\n</tr>\n<tr><td>CLEAR</td>\n<td>CLEAR key</td>\n</tr>\n<tr><td>RETURN</td>\n<td>ENTER key</td>\n</tr>\n<tr><td>ENTER</td>\n<td>ENTER key</td>\n</tr>\n<tr><td>SHIFT</td>\n<td>SHIFT key</td>\n</tr>\n<tr><td>CTRL</td>\n<td>CTRL key</td>\n</tr>\n<tr><td>CONTROL</td>\n<td>CTRL key</td>\n</tr>\n<tr><td>ALT</td>\n<td>ALT key</td>\n</tr>\n<tr><td>PAUSE</td>\n<td>PAUSE key</td>\n</tr>\n<tr><td>CAPITAL</td>\n<td>CAPS LOCK key</td>\n</tr>\n<tr><td>KANA</td>\n<td>IME Kana mode</td>\n</tr>\n<tr><td>HANGUEL</td>\n<td>IME Hanguel mode (maintained for compatibility; use VK_HANGUL)</td>\n</tr>\n<tr><td>HANGUL</td>\n<td>IME Hangul mode</td>\n</tr>\n<tr><td>JUNJA</td>\n<td>IME Junja mode</td>\n</tr>\n<tr><td>FINAL</td>\n<td>IME final mode</td>\n</tr>\n<tr><td>HANJA</td>\n<td>IME Hanja mode</td>\n</tr>\n<tr><td>KANJI</td>\n<td>IME Kanji mode</td>\n</tr>\n<tr><td>ESC</td>\n<td>ESC key</td>\n</tr>\n<tr><td>ESCAPE</td>\n<td>ESC key</td>\n</tr>\n<tr><td>CONVERT</td>\n<td>IME convert</td>\n</tr>\n<tr><td>NONCONVERT</td>\n<td>IME nonconvert</td>\n</tr>\n<tr><td>ACCEPT</td>\n<td>IME accept</td>\n</tr>\n<tr><td>MODECHANGE</td>\n<td>IME mode change request</td>\n</tr>\n<tr><td>SPACE</td>\n<td>SPACEBAR</td>\n</tr>\n<tr><td>PRIOR</td>\n<td>PAGE UP key</td>\n</tr>\n<tr><td>PAGEUP</td>\n<td>PAGE UP key</td>\n</tr>\n<tr><td>NEXT</td>\n<td>PAGE DOWN key</td>\n</tr>\n<tr><td>PAGEDOWN</td>\n<td>PAGE DOWN key</td>\n</tr>\n<tr><td>END</td>\n<td>END key</td>\n</tr>\n<tr><td>HOME</td>\n<td>HOME key</td>\n</tr>\n<tr><td>LEFT</td>\n<td>LEFT ARROW key</td>\n</tr>\n<tr><td>UP</td>\n<td>UP ARROW key</td>\n</tr>\n<tr><td>RIGHT</td>\n<td>RIGHT ARROW key</td>\n</tr>\n<tr><td>DOWN</td>\n<td>DOWN ARROW key</td>\n</tr>\n<tr><td>SELECT</td>\n<td>SELECT key</td>\n</tr>\n<tr><td>PRINT</td>\n<td>PRINT key</td>\n</tr>\n<tr><td>EXECUTE</td>\n<td>EXECUTE key</td>\n</tr>\n<tr><td>SNAPSHOT</td>\n<td>PRINT SCREEN key</td>\n</tr>\n<tr><td>PRINTSCREEN</td>\n<td>PRINT SCREEN key</td>\n</tr>\n<tr><td>INSERT</td>\n<td>INS key</td>\n</tr>\n<tr><td>INS</td>\n<td>INS key</td>\n</tr>\n<tr><td>DELETE</td>\n<td>DEL key</td>\n</tr>\n<tr><td>DEL</td>\n<td>DEL key</td>\n</tr>\n<tr><td>HELP</td>\n<td>HELP key</td>\n</tr>\n<tr><td>WIN</td>\n<td>Left Windows key (Natural keyboard)</td>\n</tr>\n<tr><td>LWIN</td>\n<td>Left Windows key (Natural keyboard)</td>\n</tr>\n<tr><td>RWIN</td>\n<td>Right Windows key (Natural keyboard)</td>\n</tr>\n<tr><td>APPS</td>\n<td>Applications key (Natural keyboard)</td>\n</tr>\n<tr><td>SLEEP</td>\n<td>Computer Sleep key</td>\n</tr>\n<tr><td>NUMPAD0</td>\n<td>Numeric keypad 0 key</td>\n</tr>\n<tr><td>NUMPAD1</td>\n<td>Numeric keypad 1 key</td>\n</tr>\n<tr><td>NUMPAD2</td>\n<td>Numeric keypad 2 key</td>\n</tr>\n<tr><td>NUMPAD3</td>\n<td>Numeric keypad 3 key</td>\n</tr>\n<tr><td>NUMPAD4</td>\n<td>Numeric keypad 4 key</td>\n</tr>\n<tr><td>NUMPAD5</td>\n<td>Numeric keypad 5 key</td>\n</tr>\n<tr><td>NUMPAD6</td>\n<td>Numeric keypad 6 key</td>\n</tr>\n<tr><td>NUMPAD7</td>\n<td>Numeric keypad 7 key</td>\n</tr>\n<tr><td>NUMPAD8</td>\n<td>Numeric keypad 8 key</td>\n</tr>\n<tr><td>NUMPAD9</td>\n<td>Numeric keypad 9 key</td>\n</tr>\n<tr><td>MULTIPLY</td>\n<td>Multiply key</td>\n</tr>\n<tr><td>ADD</td>\n<td>Add key</td>\n</tr>\n<tr><td>SEPARATOR</td>\n<td>Separator key</td>\n</tr>\n<tr><td>SUBTRACT</td>\n<td>Subtract key</td>\n</tr>\n<tr><td>DECIMAL</td>\n<td>Decimal key</td>\n</tr>\n<tr><td>DIVIDE</td>\n<td>Divide key</td>\n</tr>\n<tr><td>F1</td>\n<td>F1 key</td>\n</tr>\n<tr><td>F2</td>\n<td>F2 key</td>\n</tr>\n<tr><td>F3</td>\n<td>F3 key</td>\n</tr>\n<tr><td>F4</td>\n<td>F4 key</td>\n</tr>\n<tr><td>F5</td>\n<td>F5 key</td>\n</tr>\n<tr><td>F6</td>\n<td>F6 key</td>\n</tr>\n<tr><td>F7</td>\n<td>F7 key</td>\n</tr>\n<tr><td>F8</td>\n<td>F8 key</td>\n</tr>\n<tr><td>F9</td>\n<td>F9 key</td>\n</tr>\n<tr><td>F10</td>\n<td>F10 key</td>\n</tr>\n<tr><td>F11</td>\n<td>F11 key</td>\n</tr>\n<tr><td>F12</td>\n<td>F12 key</td>\n</tr>\n<tr><td>F13</td>\n<td>F13 key</td>\n</tr>\n<tr><td>F14</td>\n<td>F14 key</td>\n</tr>\n<tr><td>F15</td>\n<td>F15 key</td>\n</tr>\n<tr><td>F16</td>\n<td>F16 key</td>\n</tr>\n<tr><td>F17</td>\n<td>F17 key</td>\n</tr>\n<tr><td>F18</td>\n<td>F18 key</td>\n</tr>\n<tr><td>F19</td>\n<td>F19 key</td>\n</tr>\n<tr><td>F20</td>\n<td>F20 key</td>\n</tr>\n<tr><td>F21</td>\n<td>F21 key</td>\n</tr>\n<tr><td>F22</td>\n<td>F22 key</td>\n</tr>\n<tr><td>F23</td>\n<td>F23 key</td>\n</tr>\n<tr><td>F24</td>\n<td>F24 key</td>\n</tr>\n<tr><td>NUMLOCK</td>\n<td>NUM LOCK key</td>\n</tr>\n<tr><td>SCROLL</td>\n<td>SCROLL LOCK key</td>\n</tr>\n<tr><td>LSHIFT</td>\n<td>Left SHIFT key</td>\n</tr>\n<tr><td>RSHIFT</td>\n<td>Right SHIFT key</td>\n</tr>\n<tr><td>LCONTROL</td>\n<td>Left CONTROL key</td>\n</tr>\n<tr><td>LCTRL</td>\n<td>Left CONTROL key</td>\n</tr>\n<tr><td>RCONTROL</td>\n<td>Right CONTROL key</td>\n</tr>\n<tr><td>RCTRL</td>\n<td>Right CONTROL key</td>\n</tr>\n<tr><td>LALT</td>\n<td>Left MENU key</td>\n</tr>\n<tr><td>RALT</td>\n<td>Right MENU key</td>\n</tr>\n<tr><td>BROWSER_BACK</td>\n<td>Browser Back key</td>\n</tr>\n<tr><td>BROWSER_FORWARD</td>\n<td>Browser Forward key</td>\n</tr>\n<tr><td>BROWSER_REFRESH</td>\n<td>Browser Refresh key</td>\n</tr>\n<tr><td>BROWSER_STOP</td>\n<td>Browser Stop key</td>\n</tr>\n<tr><td>BROWSER_SEARCH</td>\n<td>Browser Search key</td>\n</tr>\n<tr><td>BROWSER_FAVORITES</td>\n<td>Browser Favorites key</td>\n</tr>\n<tr><td>BROWSER_HOME</td>\n<td>Browser Start and Home key</td>\n</tr>\n<tr><td>VOLUME_MUTE</td>\n<td>Volume Mute key</td>\n</tr>\n<tr><td>VOLUME_DOWN</td>\n<td>Volume Down key</td>\n</tr>\n<tr><td>VOLUME_UP</td>\n<td>Volume Up key</td>\n</tr>\n<tr><td>MEDIA_NEXT_TRACK</td>\n<td>Next Track key</td>\n</tr>\n<tr><td>MEDIA_PREV_TRACK</td>\n<td>Previous Track key</td>\n</tr>\n<tr><td>MEDIA_STOP</td>\n<td>Stop Media key</td>\n</tr>\n<tr><td>MEDIA_PLAY_PAUSE</td>\n<td>Play/Pause Media key</td>\n</tr>\n<tr><td>LAUNCH_MAIL</td>\n<td>Start Mail key</td>\n</tr>\n<tr><td>LAUNCH_MEDIA_SELECT</td>\n<td>Select Media key</td>\n</tr>\n<tr><td>LAUNCH_APP1</td>\n<td>Start Application 1 key</td>\n</tr>\n<tr><td>LAUNCH_APP2</td>\n<td>Start Application 2 key</td>\n</tr>\n<tr><td>OEM_1</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.For the US standard keyboard, the ';:' key</td>\n</tr>\n<tr><td>OEM_PLUS</td>\n<td>For any country/region, the '+' key</td>\n</tr>\n<tr><td>OEM_COMMA</td>\n<td>For any country/region, the ',' key</td>\n</tr>\n<tr><td>OEM_MINUS</td>\n<td>For any country/region, the '-' key</td>\n</tr>\n<tr><td>OEM_PERIOD</td>\n<td>For any country/region, the '.' key</td>\n</tr>\n<tr><td>OEM_2</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.</td>\n</tr>\n<tr><td>OEM_3</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.</td>\n</tr>\n<tr><td>OEM_4</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.</td>\n</tr>\n<tr><td>OEM_5</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.</td>\n</tr>\n<tr><td>OEM_6</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.</td>\n</tr>\n<tr><td>OEM_7</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.</td>\n</tr>\n<tr><td>OEM_8</td>\n<td>Used for miscellaneous characters; it can vary by keyboard.</td>\n</tr>\n<tr><td>OEM_102</td>\n<td>Either the angle bracket key or the backslash key on the RT 102-key keyboard</td>\n</tr>\n<tr><td>PROCESSKEY</td>\n<td>IME PROCESS key</td>\n</tr>\n<tr><td>PACKET</td>\n<td>Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KeyUp</td>\n</tr>\n<tr><td>ATTN</td>\n<td>Attn key</td>\n</tr>\n<tr><td>CRSEL</td>\n<td>CrSel key</td>\n</tr>\n<tr><td>EXSEL</td>\n<td>ExSel key</td>\n</tr>\n<tr><td>EREOF</td>\n<td>Erase EOF key</td>\n</tr>\n<tr><td>PLAY</td>\n<td>Play key</td>\n</tr>\n<tr><td>ZOOM</td>\n<td>Zoom key</td>\n</tr>\n<tr><td>NONAME</td>\n<td>Reserved</td>\n</tr>\n<tr><td>PA1</td>\n<td>PA1 key</td>\n</tr>\n<tr><td>OEM_CLEAR</td>\n<td>Clear key</td>\n</tr>\n</tbody>\n</table>\n<p>Examples.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"c1\"># {Ctrl}, {Delete} ... are special keys' name in SpecialKeyNames.</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{Ctrl}</span><span class=\"s1\">a</span><span class=\"si\">{Delete}{Ctrl}</span><span class=\"s1\">v</span><span class=\"si\">{Ctrl}</span><span class=\"s1\">s</span><span class=\"si\">{Ctrl}{Shift}</span><span class=\"s1\">s</span><span class=\"si\">{Win}</span><span class=\"s1\">e</span><span class=\"si\">{PageDown}</span><span class=\"s1\">'</span><span class=\"p\">)</span> <span class=\"c1\">#press Ctrl+a, Delete, Ctrl+v, Ctrl+s, Ctrl+Shift+s, Win+e, PageDown</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{Ctrl}</span><span class=\"s1\">(AB)(</span><span class=\"si\">{Shift}</span><span class=\"s1\">(123))'</span><span class=\"p\">)</span> <span class=\"c1\">#press Ctrl+A+B, type '(', press Shift+1+2+3, type ')', if '()' follows a hold key, hold key won't release util ')'</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{Ctrl}</span><span class=\"s1\">{a 3}'</span><span class=\"p\">)</span> <span class=\"c1\">#press Ctrl+a at the same time, release Ctrl+a, then type 'a' 2 times</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'{a 3}{B 5}'</span><span class=\"p\">)</span> <span class=\"c1\">#type 'a' 3 times, type 'B' 5 times</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'{{}Hello</span><span class=\"si\">{}</span><span class=\"s1\">}abc </span><span class=\"si\">{a}{b}{c}</span><span class=\"s1\"> test</span><span class=\"si\">{}</span><span class=\"s1\"> 3}{!}</span><span class=\"si\">{a}</span><span class=\"s1\"> (){(}{)}'</span><span class=\"p\">)</span> <span class=\"c1\">#type: '{Hello}abc abc test}}}!a ()()'</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'0123456789</span><span class=\"si\">{Enter}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ</span><span class=\"si\">{Enter}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'abcdefghijklmnopqrstuvwxyz</span><span class=\"si\">{Enter}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'`~!&#64;#$%^&amp;*()-_=+</span><span class=\"si\">{Enter}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'[]{{}</span><span class=\"si\">{}</span><span class=\"s1\">}\\|;:'</span><span class=\"s2\">&quot;,&lt;.&gt;/?</span><span class=\"si\">{Enter}</span><span class=\"s2\">')</span>\n</pre>\n<p>Using access key of the element (element property -&gt; AccessKey 'alt+s').\nThe <cite>(+s)</cite> means that previous special key is kept down until closing parenthesis is reached.</p>\n<p>On the below example this means that 'ALT' key is pressed down, then '+' and 's' keys are pressed\ndown before they are all released up.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Send Keys</span><span class=\"p\">   </span><span class=\"c\">keys={Alt}(+s)</span>\n</pre>\n<p>Mouse clicks can be executed with keywords specific for a type of a click, e.g. <tt class=\"docutils literal\">Click</tt> (normal click),\n<tt class=\"docutils literal\">Double Click</tt> and <tt class=\"docutils literal\">Right Click</tt>.</p>\n<p><strong>How to inspect</strong></p>\n<p>Most common, and recommended by Microsoft, inspector tool for Windows is <a class=\"reference external\" href=\"https://accessibilityinsights.io/\">Accessibility Insights</a> that\ncan be installed separately. Other options are tools <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/windows/win32/winauto/inspect-objects\">Inspect Object</a>  and <a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/windows/win32/winauto/ui-automation-verify\">UI Automation Verify</a>, which\ncan be accessed by installing Windows SDK.</p>\n<p>A more programmatic approach is to run <tt class=\"docutils literal\">Print Tree&nbsp;&nbsp;&nbsp; <span class=\"pre\">log_as_warnings=${True}</span></tt>\nkeyword and then observe in the logs the found elements structure starting from\nDesktop (or the currently set anchor / active window) as root. (refer to keyword's\n<a class=\"reference external\" href=\"https://robocorp.com/docs/libraries/rpa-framework/rpa-windows/keywords#print-tree\">documentation</a>\nfor more details)</p>\n<p><strong>Recording</strong></p>\n<p>The package provides some rudimentary inspecting and recording via the\n<tt class=\"docutils literal\"><span class=\"pre\">windows-record</span></tt> script, which can be started through the command line (in an\nenvironment containing the <tt class=\"docutils literal\"><span class=\"pre\">rpaframework-windows</span></tt> installation).</p>\n<p>Recording inspects elements on <strong>mouse click</strong> and can be stopped by pressing the\n<strong>ESC</strong> key. Expected console output:</p>\n<pre class=\"code winbatch literal-block\">\nC<span class=\"p\">:</span><span class=\"nl\">\\Users\\User\\robots\\</span><span class=\"c1\">&gt; windows-record -v  # or &gt; python -m RPA.Windows -v</span>\nMouse recording started. Use ESC to stop recording.\n\n--------------------------------------------------------------------------------\nCopy-paste the code below into your <span class=\"name\">*** Tasks ***</span> or <span class=\"name\">*** Keywords ***</span>\n--------------------------------------------------------------------------------\n\nControl Window    name:Calculator and type:WindowControl and class:ApplicationFrameWindow  # handle:9569486\nClick    name:Calculator and id:TitleBar and type:WindowControl and class:ApplicationFrameTitleBarWindow and path:1\nClick    name:<span class=\"s2\">&quot;Display is 0&quot;</span> and id:CalculatorResults and type:TextControl and path:2<span class=\"p\">|</span>3<span class=\"p\">|</span>2<span class=\"p\">|</span>2\nClick    name:Eight and id:num8Button and type:ButtonControl and class:Button and path:2<span class=\"p\">|</span>3<span class=\"p\">|</span>2<span class=\"p\">|</span>8<span class=\"p\">|</span>9\nClick    name:Nine and id:num9Button and type:ButtonControl and class:Button and path:2<span class=\"p\">|</span>3<span class=\"p\">|</span>2<span class=\"p\">|</span>8<span class=\"p\">|</span>10\nClick    name:Clear and id:clearButton and type:ButtonControl and class:Button and path:2<span class=\"p\">|</span>3<span class=\"p\">|</span>2<span class=\"p\">|</span>5<span class=\"p\">|</span>3\n\n--------------------------------------------------------------------------------\n</pre>\n<p>Check our Portal example in order to learn more abot the <cite>path:</cite> strategy in\nlocators and how to record elements displaying their paths:\n<a class=\"reference external\" href=\"https://robocorp.com/portal/robot/robocorp/example-windows-element-path\">https://robocorp.com/portal/robot/robocorp/example-windows-element-path</a></p>\n<p>Video recorded demo on how to run the recorder script from VSCode:\n<a class=\"reference external\" href=\"https://www.loom.com/share/2807372359f34b9cbe1bc2df9194ec68\">https://www.loom.com/share/2807372359f34b9cbe1bc2df9194ec68</a></p>\n<p><strong>Caveats</strong></p>\n<ul class=\"simple\">\n<li>Make sure your <em>display scaling</em> is set to <em>100%</em>, otherwise you might encounter\nissues when clicking or interacting with elements. (since offsets and coordinates\nget distorted)</li>\n<li>Disturbing the automation (like interacting with your mouse/keyboard) or having\nother apps obstructing the process interacting with your app of interest will\nmost probably affect the expected behaviour. In order to avoid this, try\ncontrolling the app's main window right before sending clicks or keys. And keep\ntargeting elements through <strong>string locators</strong>, as interacting with Windows\nelement objects previously retrieved will not work as expected in a future\naltered state of the app (changes under the element structure).</li>\n</ul>\n<p><strong>Example: Robot Framework</strong></p>\n<p>The library must be imported first.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Windows</span>\n</pre>\n<p>Windows Calculator automation task</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Do some calculations</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]  </span><span class=\"nf\">Windows Run</span><span class=\"p\">   </span><span class=\"s\">calc.exe</span><span class=\"p\">\n\n    </span><span class=\"nf\">Control Window</span><span class=\"p\">    </span><span class=\"s\">name:Calculator</span><span class=\"p\">\n    </span><span class=\"nf\">Click</span><span class=\"p\">    </span><span class=\"s\">id:clearButton</span><span class=\"p\">\n    </span><span class=\"nf\">Send Keys</span><span class=\"p\">   </span><span class=\"s\">keys=96+4=</span><span class=\"p\">\n    ${</span><span class=\"nv\">result</span><span class=\"p\">} =    </span><span class=\"nf\">Get Attribute</span><span class=\"p\">    </span><span class=\"s\">id:CalculatorResults</span><span class=\"p\">    </span><span class=\"s\">Name</span><span class=\"p\">\n    </span><span class=\"nf\">Log To Console</span><span class=\"p\">    ${</span><span class=\"nv\">result</span><span class=\"p\">}\n\n    &#64;{</span><span class=\"nv\">buttons</span><span class=\"p\">} =  </span><span class=\"nf\">Get Elements</span><span class=\"p\">  </span><span class=\"s\">type:Group and name:&quot;Number pad&quot; &gt; type:Button</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">button</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">buttons</span><span class=\"p\">}\n        </span><span class=\"nf\">Log To Console</span><span class=\"p\">   ${</span><span class=\"nv\">button</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n    [</span><span class=\"kn\">Teardown</span><span class=\"p\">]   </span><span class=\"nf\">Close Current Window</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">test_do_some_calculations</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">windows_run</span><span class=\"p\">(</span><span class=\"s2\">&quot;calc.exe&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">try</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">control_window</span><span class=\"p\">(</span><span class=\"s2\">&quot;name:Calculator&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">(</span><span class=\"s2\">&quot;id:clearButton&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"n\">keys</span><span class=\"o\">=</span><span class=\"s2\">&quot;96+4=&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s2\">&quot;id:CalculatorResults&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"w\">\n</span>        <span class=\"n\">buttons</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_elements</span><span class=\"p\">(</span><span class=\"w\">\n</span>            <span class=\"s1\">'type:Group and name:&quot;Number pad&quot; &gt; type:Button'</span><span class=\"w\">\n</span>        <span class=\"p\">)</span><span class=\"w\">\n</span>        <span class=\"k\">for</span> <span class=\"n\">button</span> <span class=\"ow\">in</span> <span class=\"n\">buttons</span><span class=\"p\">:</span><span class=\"w\">\n</span>            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">button</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">finally</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">close_current_window</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2025-02-03T13:00:05+00:00",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/__init__.py",
  "lineno": 24,
  "tags": [
    "action",
    "keyboard",
    "mouse",
    "window"
  ],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "locators_path",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locators_path: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
      "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/__init__.py",
      "lineno": 508
    }
  ],
  "keywords": [
    {
      "name": "Clear Anchor",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Clears control anchor set by <tt class=\"docutils literal\">Set Anchor</tt></p>\n<p>This means that all following keywords accessing elements\nwill use active window or desktop as root element.</p>\n</div>\n",
      "shortdoc": "Clears control anchor set by ``Set Anchor``",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/elements.py",
      "lineno": 47
    },
    {
      "name": "Click",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Mouse click on element matching given locator.</p>\n<p>Exception <tt class=\"docutils literal\">ActionNotPossible</tt> is raised if element does not\nallow Click action.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">time to wait after click, default is a\nlibrary <cite>wait_time</cite>, see keyword <tt class=\"docutils literal\">Set Wait Time</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds, see keyword\n<tt class=\"docutils literal\">Set Global Timeout</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">WindowsElement object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Click</span><span class=\"p\">  </span><span class=\"c\">id:button1</span><span class=\"p\">\n</span><span class=\"c\">Click</span><span class=\"p\">  </span><span class=\"c\">id:button2 offset:10,10</span><span class=\"p\">\n</span><span class=\"c\">${element}=</span><span class=\"p\">  </span><span class=\"c\">Click</span><span class=\"p\">  </span><span class=\"c\">name:SendButton</span><span class=\"p\">  </span><span class=\"c\">wait_time=5.0</span>\n</pre>\n</div>\n",
      "shortdoc": "Mouse click on element matching given locator.",
      "tags": [
        "action",
        "mouse"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 30
    },
    {
      "name": "Close Current Window",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Closes current active window or logs a warning message.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">True if close was successful, False if not</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${status}=</span><span class=\"p\">  </span><span class=\"c\">Close Current Window</span>\n</pre>\n</div>\n",
      "shortdoc": "Closes current active window or logs a warning message.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 317
    },
    {
      "name": "Close Window",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Closes identified windows or logs the problems.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or <cite>Control</cite> element.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds, see keyword\n<tt class=\"docutils literal\">Set Global Timeout</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">How many windows were found and closed.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${closed_count} =</span><span class=\"p\">     </span><span class=\"c\">Close Window</span><span class=\"p\">    </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n",
      "shortdoc": "Closes identified windows or logs the problems.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 349
    },
    {
      "name": "Control Child Window",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "foreground",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "foreground: bool = True"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get control of child window of the active window\nby locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or Control element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param foreground:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True to bring window to foreground</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">time to wait after activeting a window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds, see keyword\n<tt class=\"docutils literal\">Set Global Timeout</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">WindowsElement object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Control Window</span><span class=\"p\">   </span><span class=\"c\">subname:&quot;Sage 50&quot; type:Window</span><span class=\"p\">\n</span><span class=\"c\"># actions on the main application window\n# ...\n# get control of child window of Sage application\nControl Child Window</span><span class=\"p\">   </span><span class=\"c\">subname:&quot;Test Company&quot; depth:1</span>\n</pre>\n</div>\n",
      "shortdoc": "Get control of child window of the active window by locator.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 93
    },
    {
      "name": "Control Window",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "foreground",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "foreground: bool = True"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        },
        {
          "name": "main",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "main: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Controls the window defined by the locator.</p>\n<p>This means that this window is used as a root element\nfor all the following keywords using locators.</p>\n<p>Returns <cite>WindowsElement</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or Control element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param foreground:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">True to bring window to foreground</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">time to wait after activating a window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds, see keyword\n<tt class=\"docutils literal\">Set Global Timeout</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param main:</th><td class=\"field-body\">on <cite>True</cite> (default) starts the search from desktop level, on\n<cite>False</cite> it will continue to search for child elements given the set anchor\nor current active window</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>WindowsElement</cite> object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Control Window</span><span class=\"p\">   </span><span class=\"c\">Calculator</span><span class=\"p\">\n</span><span class=\"c\">Control Window</span><span class=\"p\">   </span><span class=\"c\">name:Calculator</span><span class=\"p\">\n</span><span class=\"c\">Control Window</span><span class=\"p\">   </span><span class=\"c\">subname:Notepad</span><span class=\"p\">\n</span><span class=\"c\">Control Window</span><span class=\"p\">   </span><span class=\"c\">regex:.*Notepad</span><span class=\"p\">\n</span><span class=\"c\">${window}=</span><span class=\"p\">  </span><span class=\"c\">Control Window</span><span class=\"p\">   </span><span class=\"c\">executable:Spotify.exe</span>\n</pre>\n</div>\n",
      "shortdoc": "Controls the window defined by the locator.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 36
    },
    {
      "name": "Disable Process Listing",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Disables process iteration in <cite>List Windows</cite> keyword.</p>\n</div>\n",
      "shortdoc": "Disables process iteration in `List Windows` keyword.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 411
    },
    {
      "name": "Double Click",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Double mouse click on element matching given locator.</p>\n<p>Exception <tt class=\"docutils literal\">ActionNotPossible</tt> is raised if element does not\nallow Click action.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">time to wait after click, default is a\nlibrary <cite>wait_time</cite>, see keyword <tt class=\"docutils literal\">Set Wait Time</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds, see keyword\n<tt class=\"docutils literal\">Set Global Timeout</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">WindowsElement object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${element}=</span><span class=\"p\">  </span><span class=\"c\">Double Click</span><span class=\"p\">  </span><span class=\"c\">name:ResetButton</span>\n</pre>\n</div>\n",
      "shortdoc": "Double mouse click on element matching given locator.",
      "tags": [
        "action",
        "mouse"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 59
    },
    {
      "name": "Drag And Drop",
      "args": [
        {
          "name": "source_element",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "source_element: WindowsElement | str"
        },
        {
          "name": "target_element",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "target_element: WindowsElement | str"
        },
        {
          "name": "speed",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "1.0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "speed: float | None = 1.0"
        },
        {
          "name": "copy",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "bool",
            "None"
          ],
          "typedocs": {
            "bool": "boolean",
            "None": "None"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "copy: bool | None = False"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "1.0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = 1.0"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Drag and drop the source element into target element.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param source:</th><td class=\"field-body\">source element for the operation</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param target:</th><td class=\"field-body\">target element for the operation</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param speed:</th><td class=\"field-body\">adjust speed of operation, bigger value means more speed</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param copy:</th><td class=\"field-body\">on True does copy drag and drop, defaults to move</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">time to wait after drop, default 1.0 seconds</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># copying a file, report.html, from source (File Explorer) window\n# into a target (File Explorer) Window\n# locator\nDrag And Drop</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name:C:\\temp type:Windows &gt; name:report.html type:ListItem</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">name:%{USERPROFILE}\\Documents\\artifacts type:Windows &gt; name:&quot;Items View&quot;</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">copy=True</span>\n</pre>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># moving *.txt files into subfolder within one (File Explorer) window\n${source_dir}=</span><span class=\"p\">    </span><span class=\"c\">Set Variable</span><span class=\"p\">    </span><span class=\"c\">%{USERPROFILE}\\Documents\\test</span><span class=\"p\">\n</span><span class=\"c\">Control Window</span><span class=\"p\">    </span><span class=\"c\">name:${source_dir}</span><span class=\"p\">\n</span><span class=\"c\">${files}=</span><span class=\"p\">    </span><span class=\"c\">Find Files</span><span class=\"p\">    </span><span class=\"c\">${source_dir}${/}*.txt</span><span class=\"p\">\n</span><span class=\"c\"># first copy files to folder2\nFOR</span><span class=\"p\">    </span><span class=\"c\">${file}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{files}</span><span class=\"p\">\n    </span><span class=\"c\">Drag And Drop</span><span class=\"p\">    </span><span class=\"c\">name:${file.name}</span><span class=\"p\">    </span><span class=\"c\">name:folder2 type:ListItem</span><span class=\"p\">    </span><span class=\"c\">copy=True</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\"># second move files to folder1\nFOR</span><span class=\"p\">    </span><span class=\"c\">${file}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{files}</span><span class=\"p\">\n    </span><span class=\"c\">Drag And Drop</span><span class=\"p\">    </span><span class=\"c\">name:${file.name}</span><span class=\"p\">    </span><span class=\"c\">name:folder1 type:ListItem</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Drag and drop the source element into target element.",
      "tags": [
        "action",
        "mouse"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 713
    },
    {
      "name": "Enable Process Listing",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Enables process iteration in <cite>List Windows</cite> keyword.</p>\n</div>\n",
      "shortdoc": "Enables process iteration in `List Windows` keyword.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 406
    },
    {
      "name": "Foreground Window",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Bring the current active window or the window defined\nby the locator to the foreground.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or Control element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">WindowsElement object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${window}=</span><span class=\"p\">  </span><span class=\"c\">Foreground Window</span><span class=\"p\">   </span><span class=\"c\">Calculator</span>\n</pre>\n</div>\n",
      "shortdoc": "Bring the current active window or the window defined by the locator to the foreground.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 135
    },
    {
      "name": "Get Attribute",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "attribute",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "attribute: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get attribute value of the element defined by the locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or Control element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attribute:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the attribute to get</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">value of attribute</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${id}=</span><span class=\"p\">   </span><span class=\"c\">Get Attribute</span><span class=\"p\">  </span><span class=\"c\">type:Edit name:firstname</span><span class=\"p\">   </span><span class=\"c\">AutomationId</span>\n</pre>\n</div>\n",
      "shortdoc": "Get attribute value of the element defined by the locator.",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/elements.py",
      "lineno": 126
    },
    {
      "name": "Get Element",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "search_depth",
          "type": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
          },
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "search_depth: int = 8"
        },
        {
          "name": "root_element",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "root_element: WindowsElement | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get a Control Windows element defined by the locator.</p>\n<p>The returned element can be used instead of a locator string for other keywords\naccepting the <cite>locator</cite> parameter.\nKeyword <tt class=\"docutils literal\">Get Attribute</tt> can be used to read element attribute values.</p>\n<p>If <cite>locator</cite> is <cite>None</cite>, then the returned element will be in this priority:</p>\n<blockquote>\n<ol class=\"arabic simple\">\n<li><cite>root_element</cite> if provided.</li>\n<li>Anchor element if that has been previously set with <tt class=\"docutils literal\">Set Anchor</tt>.</li>\n<li>Current active window if that has been set with <tt class=\"docutils literal\">Control Window</tt>.</li>\n<li>Last resort is the &quot;Desktop&quot; element.</li>\n</ol>\n</blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator as a string or as an element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_depth:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">How deep the element search will traverse. (default 8)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param root_element:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Will be used as search root element object if provided.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">After how many seconds (float) to give up on search. (see\nkeyword <tt class=\"docutils literal\">Set Global Timeout</tt>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">The identified <cite>WindowsElement</cite> object.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Set Text Into Notepad Window</span><span class=\"p\">\n    </span><span class=\"nf\">Windows Run</span><span class=\"p\">    </span><span class=\"s\">Notepad</span><span class=\"p\">\n    </span><span class=\"nf\">Control Window</span><span class=\"p\">      </span><span class=\"s\">subname:Notepad</span><span class=\"p\">\n    ${</span><span class=\"nv\">element</span><span class=\"p\">} =    </span><span class=\"nf\">Get Element</span><span class=\"p\">    </span><span class=\"s\">regex:&quot;Text (E|e)ditor&quot;</span><span class=\"p\">\n    </span><span class=\"nf\">Set Value</span><span class=\"p\">    ${</span><span class=\"nv\">element</span><span class=\"p\">}    </span><span class=\"s\">note to myself</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">windows_run</span><span class=\"p\">(</span><span class=\"s2\">&quot;calc.exe&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">one_btn</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">get_element</span><span class=\"p\">(</span><span class=\"s2\">&quot;Calculator &gt; path:2|3|2|8|2&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">close_window</span><span class=\"p\">(</span><span class=\"s2\">&quot;Calculator&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Get a Control Windows element defined by the locator.",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/locators.py",
      "lineno": 31
    },
    {
      "name": "Get Elements",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "search_depth",
          "type": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
          },
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "search_depth: int = 8"
        },
        {
          "name": "root_element",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "root_element: WindowsElement | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        },
        {
          "name": "siblings_only",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "siblings_only: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get a list of elements matching the locator.</p>\n<p>By default, only the siblings (similar elements on the same level) are taken\ninto account. In order to search globally, turn <cite>siblings_only</cite> off, but be\naware that this will take more time to process.</p>\n<p>Note that if the syntax <tt class=\"docutils literal\">parent_locator &gt; child_locator</tt> is used\nin the locator, it is assumed that <tt class=\"docutils literal\">parent_locator</tt> returns a\nsingular element - i.e. if the locator <tt class=\"docutils literal\">parent_locator</tt> returns multiple\nelements, only the first result is used for further processing, even if\n<cite>siblings_only</cite> is off.</p>\n<p>For more details on the rest of parameters, take a look at the <tt class=\"docutils literal\">Get Element</tt>\nkeyword.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Locator as a string or as an element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_depth:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">How deep the element search will traverse. (default 8)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param root_element:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Will be used as search root element object if provided.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">After how many seconds (float) to give up on search. (see\nkeyword <tt class=\"docutils literal\">Set Global Timeout</tt>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param siblings_only:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Filter for elements on the same level as the initially\nfound one. Turn it off for a global search. (<cite>True</cite> by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">A list of matching <cite>WindowsElement</cite> objects.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get Headers On Same Level</span><span class=\"p\">\n    </span><span class=\"nf\">Set Anchor</span><span class=\"p\">      </span><span class=\"s\">id:DataGrid</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">elements</span><span class=\"p\">} =   </span><span class=\"nf\">Get Elements</span><span class=\"p\">    </span><span class=\"s\">type:HeaderItem</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">element</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">elements</span><span class=\"p\">}\n        </span><span class=\"nf\">Log To Console</span><span class=\"p\">    ${</span><span class=\"nv\">element.name</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gu\">Get All Calculator Buttons Matching Expression</span><span class=\"p\">\n    </span><span class=\"nf\">Windows Run</span><span class=\"p\">    </span><span class=\"s\">Calc</span><span class=\"p\">\n    </span><span class=\"nf\">Control Window</span><span class=\"p\">    </span><span class=\"s\">subname:Calc</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">buttons</span><span class=\"p\">} =    </span><span class=\"nf\">Get Elements</span><span class=\"p\">    </span><span class=\"s\">class:Button regex:.*o.*</span><span class=\"p\">\n    ...     </span><span class=\"s\">siblings_only=</span><span class=\"p\">${</span><span class=\"nv\">False</span><span class=\"p\">}\n    </span><span class=\"nf\">Log List</span><span class=\"p\">    ${</span><span class=\"nv\">buttons</span><span class=\"p\">}\n    ${</span><span class=\"nv\">length</span><span class=\"p\">} =     </span><span class=\"nf\">Get Length</span><span class=\"p\">      ${</span><span class=\"nv\">buttons</span><span class=\"p\">}\n    </span><span class=\"nf\">Log To Console</span><span class=\"p\">      </span><span class=\"s\">Number of buttons: </span><span class=\"p\">${</span><span class=\"nv\">length</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get a list of elements matching the locator.",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/locators.py",
      "lineno": 169
    },
    {
      "name": "Get Text",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get text from Control element defined by the locator.</p>\n<p>Exception <tt class=\"docutils literal\">ActionNotPossible</tt> is raised if element does not\nallow GetWindowText action.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">value of WindowText attribute of an element</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${date} =</span><span class=\"p\">  </span><span class=\"c\">Get Text</span><span class=\"p\">   </span><span class=\"c\">type:Edit name:&quot;Date of birth&quot;</span>\n</pre>\n</div>\n",
      "shortdoc": "Get text from Control element defined by the locator.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 346
    },
    {
      "name": "Get Value",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get the value of the element defined by the provided <cite>locator</cite>.</p>\n<p>The <tt class=\"docutils literal\">ActionNotPossible</tt> exception is raised if the identified element doesn't\nsupport value retrieval.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Optionally the value of the identified element.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${value} =</span><span class=\"p\">   </span><span class=\"c\">Get Value</span><span class=\"p\">   </span><span class=\"c\">type:DataItem name:column1</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">lib_win</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">lib_win</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s2\">&quot;Rich Text Window&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Get the value of the element defined by the provided `locator`.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 379
    },
    {
      "name": "Is Selected",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get the selection state of the element defined by the provided <cite>locator</cite>.</p>\n<p>The <tt class=\"docutils literal\">ActionNotPossible</tt> exception is raised if the identified element doesn't\nsupport selection item retrieval.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Optionally the selection state of the identified element, as a boolean.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${value} =</span><span class=\"p\">   </span><span class=\"c\">Is Selected</span><span class=\"p\">   </span><span class=\"c\">type:RadioButtonControl name:Apple</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">lib_win</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">lib_win</span><span class=\"o\">.</span><span class=\"n\">is_selected</span><span class=\"p\">(</span><span class=\"s2\">&quot;type:RadioButtonControl name:Apple&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Get the selection state of the element defined by the provided `locator`.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 251
    },
    {
      "name": "List Attributes",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>List all element attributes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or Control element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of element attributes (strings)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "List all element attributes.",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/elements.py",
      "lineno": 153
    },
    {
      "name": "List Windows",
      "args": [
        {
          "name": "icons",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "icons: bool = False"
        },
        {
          "name": "icon_save_directory",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "icon_save_directory: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>List all window element on the system.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param icons:</th><td class=\"field-body\">on True dictionary will contain Base64\nstring of the icon, default False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param icon_save_directory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if set will save retrieved icons\ninto this filepath, by default icon files are not saved</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of dictionaries containing information\nabout Window elements</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${windows}=</span><span class=\"p\">  </span><span class=\"c\">List Windows</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${window}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{windows}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Window title:${window}[title]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Window process name:${window}[name]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Window process id:${window}[pid]</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Window process handle:${window}[handle]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "List all window element on the system.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 229
    },
    {
      "name": "Maximize Window",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Maximize the current active window or the window defined\nby the locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>WindowsElement</cite> object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${window} =</span><span class=\"p\">    </span><span class=\"c\">Maximize Window</span><span class=\"p\">  </span><span class=\"c\"># Current active window\nMaximize Window</span><span class=\"p\">    </span><span class=\"c\">executable:Spotify.exe</span>\n</pre>\n</div>\n",
      "shortdoc": "Maximize the current active window or the window defined by the locator.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 195
    },
    {
      "name": "Middle Click",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Right mouse click on element matching given locator.</p>\n<p>Exception <tt class=\"docutils literal\">ActionNotPossible</tt> is raised if element does not\nallow Click action.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">time to wait after click, default is a\nlibrary <cite>wait_time</cite>, see keyword <tt class=\"docutils literal\">Set Wait Time</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds, see keyword\n<tt class=\"docutils literal\">Set Global Timeout</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">WindowsElement object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${element}=</span><span class=\"p\">  </span><span class=\"c\">Middle Click</span><span class=\"p\">  </span><span class=\"c\">name:button2</span>\n</pre>\n</div>\n",
      "shortdoc": "Right mouse click on element matching given locator.",
      "tags": [
        "action",
        "mouse"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 113
    },
    {
      "name": "Minimize Window",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Minimize the current active window or the window defined\nby the locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>WindowsElement</cite> object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${window} =</span><span class=\"p\">    </span><span class=\"c\">Minimize Window</span><span class=\"p\">  </span><span class=\"c\"># Current active window\nMinimize Window</span><span class=\"p\">    </span><span class=\"c\">executable:Spotify.exe</span>\n</pre>\n</div>\n",
      "shortdoc": "Minimize the current active window or the window defined by the locator.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 178
    },
    {
      "name": "Print Tree",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "max_depth",
          "type": {
            "name": "int",
            "typedoc": "integer",
            "nested": [],
            "union": false
          },
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "max_depth: int = 8"
        },
        {
          "name": "capture_image_folder",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "capture_image_folder: str | None = None"
        },
        {
          "name": "log_as_warnings",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "log_as_warnings: bool = False"
        },
        {
          "name": "return_structure",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "return_structure: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Print a tree of control elements.</p>\n<p>A Windows application structure can contain multilevel element structure.\nUnderstanding this structure is crucial for creating locators. (based on\ncontrols' details and their parent-child relationship)</p>\n<p>This keyword can be used to output logs of application's element structure,\nstarting with the element defined by the provided <cite>locator</cite> as root. Switch\nthe <cite>return_structure</cite> parameter to <cite>True</cite> to get a tree of elements returned\nas well. (off by default to save memory)</p>\n<ul class=\"simple\">\n<li>The printed structure displays a tree prefixed with &quot;depth&quot; - &quot;position&quot; so\nyou know how deep (0 means root) in the tree you are and on what position\n(1-indexed) the child you're looking for is.</li>\n<li>The returned structure is a dictionary with all the children flattened per\ndepth level. Additionally, these <cite>WindowsElement</cite> objects contain a relevant\nlocator composed of &quot;root &gt; path&quot; which will help to identify the element in\nthe tree.</li>\n</ul>\n<p>Portal example:\n<a class=\"reference external\" href=\"https://robocorp.com/portal/robot/robocorp/example-windows-element-path\">https://robocorp.com/portal/robot/robocorp/example-windows-element-path</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">The root of the tree to output.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_depth:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Maximum depth level. (defaults to 8)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param capture_image_folder:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">If set, controls' images will be captured in this\npath.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param log_as_warnings:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Enables highlighted logs (at the beginning of the log\nfile as warnings) and increases visibility in the output console.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param return_structure:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A flattened tree with all the elements collated by\nlevel will be returned if this is enabled.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Optionally a dictionary of children per depth level when\n<cite>return_structure</cite> is enabled.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Display Element Structure</span><span class=\"p\">\n    ${</span><span class=\"nv\">tree</span><span class=\"p\">} =   </span><span class=\"nf\">Print Tree</span><span class=\"p\">      </span><span class=\"s\">Calculator &gt; path:2|3|2|8</span><span class=\"p\">\n    ...     </span><span class=\"s\">return_structure=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"nf\">Log To Console</span><span class=\"p\">      ${</span><span class=\"nv\">tree</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">print_tree</span><span class=\"p\">(</span><span class=\"s2\">&quot;Calculator &gt; path:2|3|2|8&quot;</span><span class=\"p\">,</span> <span class=\"n\">return_structure</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Print a tree of control elements.",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/elements.py",
      "lineno": 56
    },
    {
      "name": "Restore Window",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Window restore the current active window or the window\ndefined by the locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>WindowsElement</cite> object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${window} =</span><span class=\"p\">    </span><span class=\"c\">Restore Window</span><span class=\"p\">  </span><span class=\"c\"># Current active window\nRestore Window</span><span class=\"p\">    </span><span class=\"c\">executable:Spotify.exe</span>\n</pre>\n</div>\n",
      "shortdoc": "Window restore the current active window or the window defined by the locator.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 212
    },
    {
      "name": "Right Click",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = None"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Right mouse click on element matching given locator.</p>\n<p>Exception <tt class=\"docutils literal\">ActionNotPossible</tt> is raised if element does not\nallow Click action.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">time to wait after click, default is a\nlibrary <cite>wait_time</cite>, see keyword <tt class=\"docutils literal\">Set Wait Time</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds, see keyword\n<tt class=\"docutils literal\">Set Global Timeout</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">WindowsElement object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${element}=</span><span class=\"p\">  </span><span class=\"c\">Right Click</span><span class=\"p\">  </span><span class=\"c\">name:MenuButton</span>\n</pre>\n</div>\n",
      "shortdoc": "Right mouse click on element matching given locator.",
      "tags": [
        "action",
        "mouse"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 86
    },
    {
      "name": "Screenshot",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "filename",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "Path",
                "typedoc": "Path",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "Path"
          ],
          "typedocs": {
            "str": "string",
            "Path": "Path"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filename: str | Path"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Take a screenshot of the element defined by the locator.</p>\n<p>An <cite>ActionNotPossible</cite> exception is raised if the element doesn't allow being\ncaptured.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">Image file name/path. (can be absolute/relative)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ActionNotPossible:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">When the element can't be captured.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Absolute file path of the taken screenshot image.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Take Screenshots</span><span class=\"p\">\n    </span><span class=\"nf\">Screenshot</span><span class=\"p\">    </span><span class=\"s\">desktop</span><span class=\"p\">    </span><span class=\"s\">desktop.png</span><span class=\"p\">\n    </span><span class=\"nf\">Screenshot</span><span class=\"p\">    </span><span class=\"s\">subname:Notepad</span><span class=\"p\">    ${</span><span class=\"nv\">OUTPUT_DIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">notepad.png</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">take_screenshots</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">screenshot</span><span class=\"p\">(</span><span class=\"s2\">&quot;desktop&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;desktop.png&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">screenshot</span><span class=\"p\">(</span><span class=\"s2\">&quot;subname:Notepad&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;output/notepad.png&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Take a screenshot of the element defined by the locator.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 638
    },
    {
      "name": "Select",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "value",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Select a value on the passed element if such action is supported.</p>\n<p>The <tt class=\"docutils literal\">ActionNotPossible</tt> exception is raised when the element does not allow\nthe <cite>Select</cite> action. This is usually used with combo box elements.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">String value to select on Control element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">The controlled Windows element.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<blockquote>\n<p><strong>* Settings *</strong>\nLibrary     RPA.Windows</p>\n<p><strong>* Tasks *</strong>\nSet Notepad Size</p>\n<div class=\"system-message\">\n<p class=\"system-message-title\">System Message: ERROR/3 (<tt class=\"docutils\">&lt;string&gt;</tt>, line 17)</p>\nUnexpected indentation.</div>\n<blockquote>\nSelect    id:FontSizeComboBox    22</blockquote>\n</blockquote>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">set_notepad_size</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s2\">&quot;id:FontSizeComboBox&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;22&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Select a value on the passed element if such action is supported.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 205
    },
    {
      "name": "Send Keys",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "keys",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "keys: str | None = None"
        },
        {
          "name": "interval",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "0.01",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "interval: float = 0.01"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float | None = None"
        },
        {
          "name": "send_enter",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "send_enter: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Send keys to desktop, current window or to Control element\ndefined by given locator.</p>\n<p>If <tt class=\"docutils literal\">locator</tt> is <cite>None</cite> then keys are sent to desktop.</p>\n<p>Exception <tt class=\"docutils literal\">ActionNotPossible</tt> is raised if element does not\nallow SendKeys action.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">Optional string locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param keys:</th><td class=\"field-body\">The keys to send.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param interval:</th><td class=\"field-body\">Time between each sent key. (defaults to 0.01 seconds)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Time to wait after sending all the keys. (defaults to\nlibrary's set value, see keyword <tt class=\"docutils literal\">Set Wait Time</tt>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param send_enter:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">If <cite>True</cite> then the {Enter} key is pressed at the end of the\nsent keys.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">The element identified through <cite>locator</cite>.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Send Keys</span><span class=\"p\">  </span><span class=\"c\">desktop</span><span class=\"p\">   </span><span class=\"c\">{Ctrl}{F4}</span><span class=\"p\">\n</span><span class=\"c\">Send Keys</span><span class=\"p\">  </span><span class=\"c\">keys={Ctrl}{F4}</span><span class=\"p\">   </span><span class=\"c\"># locator will be NONE, keys sent to desktop\nSend Keys</span><span class=\"p\">  </span><span class=\"c\">id:input5</span><span class=\"p\">  </span><span class=\"c\">username</span><span class=\"p\">   </span><span class=\"c\">send_enter=${True}</span><span class=\"p\">\n</span><span class=\"c\">${element}=</span><span class=\"p\">   </span><span class=\"c\">Get Element</span><span class=\"p\">   </span><span class=\"c\">id:pass</span><span class=\"p\">\n</span><span class=\"c\">Send Keys</span><span class=\"p\">  </span><span class=\"c\">${element}</span><span class=\"p\">  </span><span class=\"c\">password</span><span class=\"p\">   </span><span class=\"c\">send_enter=${True}</span>\n</pre>\n</div>\n",
      "shortdoc": "Send keys to desktop, current window or to Control element defined by given locator.",
      "tags": [
        "action",
        "keyboard"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 294
    },
    {
      "name": "Set Anchor",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        },
        {
          "name": "timeout",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "float",
            "None"
          ],
          "typedocs": {
            "float": "float",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: float | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set anchor to an element specified by the locator.</p>\n<p>All following keywords using locators will use this element\nas a root element. Specific use case could be setting\nanchor to TableControl element and then getting column data\nbelonging to that TableControl element.</p>\n<p>To release anchor call <tt class=\"docutils literal\">Clear Anchor</tt> keyword.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">string locator or Control element</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">timeout in seconds for element lookup (default 10.0)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Anchor</span><span class=\"p\">  </span><span class=\"c\">type:Table name:Orders depth:16</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${row}</span><span class=\"p\">  </span><span class=\"c\">IN RANGE</span><span class=\"p\">  </span><span class=\"c\">200</span><span class=\"p\">\n    </span><span class=\"c\">${number}=</span><span class=\"p\">  </span><span class=\"c\">Get Value</span><span class=\"p\">   </span><span class=\"c\">name:number row ${row}</span><span class=\"p\">\n    </span><span class=\"c\">Exit For Loop If</span><span class=\"p\">   </span><span class=\"c\">$number == ${EMPTY}</span><span class=\"p\">\n    </span><span class=\"c\">${sum}=</span><span class=\"p\">  </span><span class=\"c\">Get Value</span><span class=\"p\">   </span><span class=\"c\">name:sum row ${row}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">   </span><span class=\"c\">Order number:${number} has sum:{sum}</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">Clear Anchor</span>\n</pre>\n</div>\n",
      "shortdoc": "Set anchor to an element specified by the locator.",
      "tags": [],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/elements.py",
      "lineno": 14
    },
    {
      "name": "Set Focus",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locator: WindowsElement | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set view focus to the element defined by the locator.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Focus</span><span class=\"p\">  </span><span class=\"c\">name:Buy type:Button</span>\n</pre>\n</div>\n",
      "shortdoc": "Set view focus to the element defined by the locator.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 694
    },
    {
      "name": "Set Global Timeout",
      "args": [
        {
          "name": "timeout",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "timeout: float"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set global timeout for element search. Applies also\nto <tt class=\"docutils literal\">Control Window</tt> keyword.</p>\n<p>By default, the library has a timeout of 10 seconds.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">float value in seconds</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">previous timeout value</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${old_timeout}=</span><span class=\"p\">  </span><span class=\"c\">Set Global Timeout</span><span class=\"p\">  </span><span class=\"c\">20</span><span class=\"p\">\n</span><span class=\"c\">${old_timeout}=</span><span class=\"p\">  </span><span class=\"c\">Set Global Timeout</span><span class=\"p\">  </span><span class=\"c\">9.5</span>\n</pre>\n</div>\n",
      "shortdoc": "Set global timeout for element search. Applies also to ``Control Window`` keyword.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 672
    },
    {
      "name": "Set Mouse Movement",
      "args": [
        {
          "name": "simulate",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "simulate: bool"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Enable or disable mouse movement simulation during clicks and other actions.</p>\n<p>Returns the previous set value as <cite>True</cite>/<cite>False</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param simulate:</th><td class=\"field-body\">Decide whether to simulate the move. (OFF by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Previous state.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Disable Mouse Move</span><span class=\"p\">\n    ${</span><span class=\"nv\">previous</span><span class=\"p\">} =   </span><span class=\"nf\">Set Mouse Movement</span><span class=\"p\">      ${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"nf\">Log To Console</span><span class=\"p\">   </span><span class=\"s\">Previous mouse simulation: </span><span class=\"p\">${</span><span class=\"nv\">previous</span><span class=\"p\">}</span><span class=\"s\"> (now enabled)</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">lib_win</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">lib_win</span><span class=\"o\">.</span><span class=\"n\">set_mouse_movement</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Previous mouse simulation: </span><span class=\"si\">{</span><span class=\"n\">previous</span><span class=\"si\">}</span><span class=\"s2\"> (now enabled)&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Enable or disable mouse movement simulation during clicks and other actions.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 777
    },
    {
      "name": "Set Value",
      "args": [
        {
          "name": "locator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "WindowsElement",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "WindowsElement",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locator: WindowsElement | str | None = None"
        },
        {
          "name": "value",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "value: str | None = None"
        },
        {
          "name": "append",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "append: bool = False"
        },
        {
          "name": "enter",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "enter: bool = False"
        },
        {
          "name": "newline",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "newline: bool = False"
        },
        {
          "name": "send_keys_fallback",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "send_keys_fallback: bool = True"
        },
        {
          "name": "validator",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Callable",
                "typedoc": null,
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Callable",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "<function set_value_validator at 0x71d1fc8cac20>",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "validator: Callable | None = <function set_value_validator at 0x71d1fc8cac20>"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set value of the element defined by the locator.</p>\n<p><em>Note:</em> An anchor will work only on element structures where you can\nrely on the stability of that root/child element tree, as remaining the same.\nUsually these kind of structures are tables. (but not restricted to)</p>\n<p><em>Note:</em> It is important to set <tt class=\"docutils literal\"><span class=\"pre\">append=${True}</span></tt> if you want to keep the\ncurrent text in the element. Other option is to read the current text into a\nvariable, then modify that value as you wish and pass it to the <tt class=\"docutils literal\">Set Value</tt>\nkeyword for a complete text replacement. (without setting the <cite>append</cite> flag)</p>\n<p>The following exceptions may be raised:</p>\n<blockquote>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">ActionNotPossible</tt> if the element does not allow the <cite>SetValue</cite> action\nto be run on it nor having <tt class=\"docutils literal\"><span class=\"pre\">send_keys_fallback=${True}</span></tt>.</li>\n<li><tt class=\"docutils literal\">ValueError</tt> if the new value to be set can't be set correctly.</li>\n</ul>\n</blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param locator:</th><td class=\"field-body\">String locator or element object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">String value to be set.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param append:</th><td class=\"field-body\"><cite>False</cite> for setting the value, <cite>True</cite> for appending it. (OFF by\ndefault)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param enter:</th><td class=\"field-body\">Set it to <cite>True</cite> to press the <em>Enter</em> key at the end of the\ninput. (nothing is pressed by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param newline:</th><td class=\"field-body\">Set it to <cite>True</cite> to add a new line at the end of the value. (no\nEOL included by default; this won't work with <cite>send_keys_fallback</cite> enabled)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param send_keys_fallback:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Tries to set the value by sending it through keys\nif the main way of setting it fails. (enabled by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param validator:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Function receiving two parameters post-setting, the expected\nand the current value, which returns <cite>True</cite> if the two values match. (by\ndefault, the keyword will raise if the values are different, set this to\n<cite>None</cite> to disable validation or pass your custom function instead)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">The element object identified through the passed <cite>locator</cite>.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Set Values In Notepad</span><span class=\"p\">\n    </span><span class=\"nf\">Set Value</span><span class=\"p\">   </span><span class=\"s\">type:DataItem name:column1</span><span class=\"p\">   </span><span class=\"s\">ab c</span><span class=\"p\">  </span><span class=\"c\"># Set value to &quot;ab c&quot;\n</span><span class=\"p\">    </span><span class=\"c\"># Press ENTER after setting the value.\n</span><span class=\"p\">    </span><span class=\"nf\">Set Value</span><span class=\"p\">    </span><span class=\"s\">type:Edit name:&quot;File name:&quot;</span><span class=\"p\">    </span><span class=\"s\">console.txt</span><span class=\"p\">   </span><span class=\"s\">enter=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n\n    </span><span class=\"c\"># Add newline (manually) at the end of the string. (Notepad example)\n</span><span class=\"p\">    </span><span class=\"nf\">Set Value</span><span class=\"p\">    </span><span class=\"s\">name:&quot;Text Editor&quot;</span><span class=\"p\">  </span><span class=\"s\">abc\\n</span><span class=\"p\">\n    </span><span class=\"c\"># Add newline with parameter.\n</span><span class=\"p\">    </span><span class=\"nf\">Set Value</span><span class=\"p\">    </span><span class=\"s\">name:&quot;Text Editor&quot;</span><span class=\"p\">  </span><span class=\"s\">abc</span><span class=\"p\">   </span><span class=\"s\">newline=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n\n    </span><span class=\"c\"># Clear Notepad window and start appending text.\n</span><span class=\"p\">    </span><span class=\"nf\">Set Anchor</span><span class=\"p\">  </span><span class=\"s\">name:&quot;Text Editor&quot;</span><span class=\"p\">\n    </span><span class=\"c\"># All the following keyword calls will use the anchor element as a\n</span><span class=\"p\">    </span><span class=\"c\">#  starting point, UNLESS they specify a locator explicitly or\n</span><span class=\"p\">    </span><span class=\"c\">#  <a href=\"#Clear%20Anchor\" class=\"name\">Clear Anchor</a> is used.\n</span><span class=\"p\">    ${</span><span class=\"nv\">time</span><span class=\"p\">} =    </span><span class=\"nf\">Get Time</span><span class=\"p\">\n    </span><span class=\"c\"># Clears with <span class=\"name\">append=${False}</span>. (default)\n</span><span class=\"p\">    </span><span class=\"nf\">Set Value</span><span class=\"p\">    </span><span class=\"s\">value=The time now is </span><span class=\"p\">${</span><span class=\"nv\">time</span><span class=\"p\">}\n    </span><span class=\"c\"># Append text and add a newline at the end.\n</span><span class=\"p\">    </span><span class=\"nf\">Set Value</span><span class=\"p\">    </span><span class=\"s\">value= and it's the task run time.</span><span class=\"p\">   </span><span class=\"s\">append=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    ...    </span><span class=\"s\">newline=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"c\"># Continue appending and ensure a new line at the end by pressing\n</span><span class=\"p\">    </span><span class=\"c\">#  the Enter key this time.\n</span><span class=\"p\">    </span><span class=\"nf\">Set Value</span><span class=\"p\">    </span><span class=\"s\">value=But this will appear on the 2nd line now.</span><span class=\"p\">\n    ...    </span><span class=\"s\">append=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}   </span><span class=\"s\">enter=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}   </span><span class=\"s\">validator=</span><span class=\"p\">${</span><span class=\"nv\">None</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n\n</span><span class=\"n\">lib_win</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">locator</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Document - WordPad &gt; Rich Text Window&quot;</span><span class=\"w\">\n</span><span class=\"n\">elem</span> <span class=\"o\">=</span> <span class=\"n\">lib_win</span><span class=\"o\">.</span><span class=\"n\">set_value</span><span class=\"p\">(</span><span class=\"n\">locator</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">&quot;My text&quot;</span><span class=\"p\">,</span> <span class=\"n\">send_keys_fallback</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">lib_win</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set value of the element defined by the locator.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 483
    },
    {
      "name": "Set Wait Time",
      "args": [
        {
          "name": "wait_time",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "wait_time: float"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set library wait time for action keywords.</p>\n<p>The wait_time is spent after each keyword performing\nmouse or keyboard action.</p>\n<p>Library default wait_time is <cite>0.5</cite></p>\n<p>Returns value of the previous wait_time value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">float value (in seconds), e.g. <cite>0.1</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">previous wait value</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${old_wait_time}=</span><span class=\"p\">  </span><span class=\"c\">Set Wait Time</span><span class=\"p\">  </span><span class=\"c\">0.2</span>\n</pre>\n</div>\n",
      "shortdoc": "Set library wait time for action keywords.",
      "tags": [
        "action"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/action.py",
      "lineno": 612
    },
    {
      "name": "Windows Run",
      "args": [
        {
          "name": "text",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "text: str"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "3.0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float = 3.0"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Use Windows Run window to launch an application.</p>\n<p>Activated by pressing <cite>Win + R</cite>. Then the app name is typed in and finally the\n&quot;Enter&quot; key is pressed.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">Text to enter into the Run input field. (e.g. <cite>Notepad</cite>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Time to sleep after the searched app is executed. (3s by\ndefault)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Run Notepad</span><span class=\"p\">\n    </span><span class=\"nf\">Windows Run</span><span class=\"p\">   </span><span class=\"s\">notepad</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Windows</span> <span class=\"kn\">import</span> <span class=\"n\">Windows</span><span class=\"w\">\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Windows</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">run_notepad</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">windows_run</span><span class=\"p\">(</span><span class=\"s2\">&quot;notepad&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Use Windows Run window to launch an application.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 258
    },
    {
      "name": "Windows Search",
      "args": [
        {
          "name": "text",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "text: str"
        },
        {
          "name": "wait_time",
          "type": {
            "name": "float",
            "typedoc": "float",
            "nested": [],
            "union": false
          },
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "3.0",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "wait_time: float = 3.0"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Use Windows search window to launch application.</p>\n<p>Activated by pressing <cite>win + s</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">text to enter into search input field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param wait_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">sleep time after search has been entered (default 3.0 seconds)</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Windows Search</span><span class=\"p\">   </span><span class=\"c\">Outlook</span>\n</pre>\n</div>\n",
      "shortdoc": "Use Windows search window to launch application.",
      "tags": [
        "window"
      ],
      "source": "/home/stamm/.local/lib/python3.10/site-packages/RPA/Windows/keywords/window.py",
      "lineno": 294
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Control Child Window",
        "Control Window",
        "Drag And Drop",
        "Get Elements",
        "List Windows",
        "Print Tree",
        "Send Keys",
        "Set Mouse Movement",
        "Set Value"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "float",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#float\">float</a> built-in function.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>3.14</code>, <code>2.9979e8</code>, <code>10 000.000 01</code></p>",
      "usages": [
        "Click",
        "Close Window",
        "Control Child Window",
        "Control Window",
        "Double Click",
        "Drag And Drop",
        "Get Element",
        "Get Elements",
        "Middle Click",
        "Right Click",
        "Send Keys",
        "Set Anchor",
        "Set Global Timeout",
        "Set Wait Time",
        "Windows Run",
        "Windows Search"
      ],
      "accepts": [
        "string",
        "Real"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Get Element",
        "Get Elements",
        "Print Tree"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "__init__",
        "Click",
        "Close Window",
        "Control Child Window",
        "Control Window",
        "Double Click",
        "Drag And Drop",
        "Foreground Window",
        "Get Element",
        "Get Elements",
        "List Windows",
        "Maximize Window",
        "Middle Click",
        "Minimize Window",
        "Print Tree",
        "Restore Window",
        "Right Click",
        "Send Keys",
        "Set Anchor",
        "Set Value"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "Path",
      "doc": "<p>Strings are converted <a href=\"https://docs.python.org/library/pathlib.html\">Path</a> objects. On Windows <code>/</code> is converted to <code>\\</code> automatically.</p>\n<p>Examples: <code>/tmp/absolute/path</code>, <code>relative/path/to/file.ext</code>, <code>name.txt</code></p>",
      "usages": [
        "Screenshot"
      ],
      "accepts": [
        "string",
        "PurePath"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "__init__",
        "Click",
        "Close Window",
        "Control Child Window",
        "Control Window",
        "Double Click",
        "Drag And Drop",
        "Foreground Window",
        "Get Attribute",
        "Get Element",
        "Get Elements",
        "Get Text",
        "Get Value",
        "Is Selected",
        "List Attributes",
        "List Windows",
        "Maximize Window",
        "Middle Click",
        "Minimize Window",
        "Print Tree",
        "Restore Window",
        "Right Click",
        "Screenshot",
        "Select",
        "Send Keys",
        "Set Anchor",
        "Set Focus",
        "Set Value",
        "Windows Run",
        "Windows Search"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}