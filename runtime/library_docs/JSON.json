{
  "specversion": 2,
  "name": "Camunda.JSON",
  "doc": "<div class=\"document\">\n<p><cite>JSON</cite> is a library for manipulating <a class=\"reference external\" href=\"http://json.org/\">JSON</a> files and strings.</p>\n<p>JSON is a common data interchange format inspired by a subset of\nthe Javascript programming language, but these days is a de facto\nstandard in modern web APIs and is language agnostic.</p>\n<div class=\"section\" id=\"serialization\">\n<h1>Serialization</h1>\n<p>The term <cite>serialization</cite> refers to the process of converting\nRobot Framework or Python types to JSON or the other way around.</p>\n<p>Basic types can be easily converted between the domains,\nand the mapping is as follows:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"65%\" />\n<col width=\"35%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">JSON</th>\n<th class=\"head\">Python</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td>object</td>\n<td>dict</td>\n</tr>\n<tr><td>array</td>\n<td>list</td>\n</tr>\n<tr><td>string</td>\n<td>str</td>\n</tr>\n<tr><td>number (int)</td>\n<td>int</td>\n</tr>\n<tr><td>number (real)</td>\n<td>float</td>\n</tr>\n<tr><td>true</td>\n<td>True</td>\n</tr>\n<tr><td>false</td>\n<td>False</td>\n</tr>\n<tr><td>null</td>\n<td>None</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"about-jsonpath\">\n<h1>About JSONPath</h1>\n<p>Reading and writing values from/to JSON serializable objects is done\nusing <a class=\"reference external\" href=\"http://goessner.net/articles/JsonPath/\">JSONPath</a>. It's a syntax designed to quickly and easily refer to\nspecific elements in a JSON structure. The specific flavor used in this\nlibrary is based on <a class=\"reference external\" href=\"https://pypi.org/project/jsonpath-ng/#description\">jsonpath-ng</a>.</p>\n<p>Compared to Python's normal dictionary access, JSONPath expressions can\ntarget multiple elements through features such as conditionals and wildcards,\nwhich can simplify many JSON-related operations. It's analogous to XPath\nfor XML structures.</p>\n<div class=\"section\" id=\"syntax-example\">\n<h2 id=\"Syntax example\">Syntax example</h2>\n<p>For this example consider the following structure:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nt\">&quot;clients&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Johnny Example&quot;</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nt\">&quot;email&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;john&#64;example.com&quot;</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nt\">&quot;orders&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Streetroad 123&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">103.20</span><span class=\"p\">},</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Streetroad 123&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">98.99</span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Jane Example&quot;</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nt\">&quot;email&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;jane&#64;example.com&quot;</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nt\">&quot;orders&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Waypath 321&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">22.00</span><span class=\"p\">},</span><span class=\"w\">\n          </span><span class=\"p\">{</span><span class=\"nt\">&quot;address&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Streetroad 123&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nt\">&quot;price&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">2330.01</span><span class=\"p\">}</span><span class=\"w\">\n      </span><span class=\"p\">]</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<p>In the simplest case JSONPath can replace nested access:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Nested access</span><span class=\"p\">\n    </span><span class=\"c\"># First order of first client, with direct dictionary access\n</span><span class=\"p\">    ${</span><span class=\"nv\">value</span><span class=\"p\">}=    </span><span class=\"nf\">Set variable</span><span class=\"p\">    ${</span><span class=\"nv\">json</span><span class=\"p\">}</span><span class=\"s\">[&quot;clients&quot;][0][&quot;orders&quot;][0]</span><span class=\"p\">\n\n    </span><span class=\"c\"># JSONPath access\n</span><span class=\"p\">    ${</span><span class=\"nv\">value</span><span class=\"p\">}=    </span><span class=\"nf\">Get value from JSON</span><span class=\"p\">    ${</span><span class=\"nv\">json</span><span class=\"p\">}    </span><span class=\"s\">$.clients[0].orders[0]</span>\n</pre>\n<p>But the power comes from complicated expressions:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Complicated expressions</span><span class=\"p\">\n    </span><span class=\"c\"># Find delivery addresses for all orders\n</span><span class=\"p\">    ${</span><span class=\"nv\">prices</span><span class=\"p\">}=        </span><span class=\"nf\">Get values from JSON</span><span class=\"p\">    </span><span class=\"s\">$..address</span><span class=\"p\">\n\n    </span><span class=\"c\"># Find orders that cost over 100\n</span><span class=\"p\">    ${</span><span class=\"nv\">expensives</span><span class=\"p\">}=    </span><span class=\"nf\">Get values from JSON</span><span class=\"p\">    </span><span class=\"s\">$..orders[?(&#64;.price&gt;100)]</span>\n</pre>\n</div>\n<div class=\"section\" id=\"supported-expressions\">\n<h2 id=\"Supported Expressions\">Supported Expressions</h2>\n<p>The supported syntax elements are:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"30%\" />\n<col width=\"70%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Element</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td><tt class=\"docutils literal\">$</tt></td>\n<td>Root object/element</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">&#64;</tt></td>\n<td>Current object/element inside expressions</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">.</tt> or <tt class=\"docutils literal\">[]</tt></td>\n<td>Child operator</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">..</tt></td>\n<td>Recursive descendant operator</td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"name\">`parent</span>`</tt></td>\n<td>Parent operator, see <a class=\"reference internal\" href=\"#functions\">functions</a></td>\n</tr>\n<tr><td><tt class=\"docutils literal\">*</tt></td>\n<td>Wilcard, any element</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">,</tt></td>\n<td>Select multiple fields</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">[n]</tt></td>\n<td>Array index</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">[a:b:c]</tt></td>\n<td>Array slice (start, end, step)</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">[a,b]</tt></td>\n<td>Union of indices or names</td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"pre\">[?()]</span></tt></td>\n<td>Apply a filter expression</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">()</tt></td>\n<td>Script expression</td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"pre\">[\\\\field]</span></tt></td>\n<td>Sort descending by <tt class=\"docutils literal\">field</tt>, cannot be combined with\nfilters.</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">[/field]</tt></td>\n<td>Sort ascending by <tt class=\"docutils literal\">field</tt>, cannot be combined with\nfilters.</td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"pre\"><span class=\"name\">`str()</span>`</span></tt></td>\n<td>Convert value to string, see <a class=\"reference internal\" href=\"#functions\">functions</a></td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"pre\"><span class=\"name\">`sub()</span>`</span></tt></td>\n<td>Regex substitution function, see <a class=\"reference internal\" href=\"#functions\">functions</a></td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"name\">`len</span>`</tt></td>\n<td>Calculate value's length, see <a class=\"reference internal\" href=\"#functions\">functions</a></td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"pre\"><span class=\"name\">`split()</span>`</span></tt></td>\n<td>String split function, see <a class=\"reference internal\" href=\"#functions\">functions</a></td>\n</tr>\n<tr><td><tt class=\"docutils literal\">+</tt> <tt class=\"docutils literal\">-</tt> <tt class=\"docutils literal\">*</tt> <tt class=\"docutils literal\">/</tt></td>\n<td>Arithmetic functions, see <a class=\"reference internal\" href=\"#functions\">functions</a></td>\n</tr>\n</tbody>\n</table>\n<div class=\"section\" id=\"functions\">\n<h3 id=\"Functions\">Functions</h3>\n<p>This library allows JSON path expressions to include certain functions\nwhich can provide additional benefit to users. These functions are\ngenerally encapsulated in backticks (<tt class=\"docutils literal\">`</tt>). Some functions require\nyou to pass arguments similar to a Python function.</p>\n<p>For example, let's say a JSON has nodes on the JSON path\n<tt class=\"docutils literal\"><span class=\"pre\">$.books[*].genres</span></tt> which are represented as strings of genres with\ncommas separating each genre. So for one book, this node might have a\nvalue like <tt class=\"docutils literal\"><span class=\"pre\">horror,young-adult</span></tt>. You can return a list of first genre\nfor each book by using the <tt class=\"docutils literal\">split</tt> function like so:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Get genres</span><span class=\"p\">\n    ${</span><span class=\"nv\">genres</span><span class=\"p\">}=  </span><span class=\"nf\">Get values from JSON</span><span class=\"p\">    </span><span class=\"s\">$.books[*].genres.<span class=\"name\">`</span>split(,, 0, -1)<span class=\"name\">`</span></span>\n</pre>\n<p>Each functions parameters are defined here:</p>\n<table border=\"1\" class=\"docutils\">\n<colgroup>\n<col width=\"44%\" />\n<col width=\"56%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr><th class=\"head\">Function</th>\n<th class=\"head\">Usage</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr><td><tt class=\"docutils literal\">str()</tt></td>\n<td>No parameters, but parenthesis are required</td>\n</tr>\n<tr><td><tt class=\"docutils literal\"><span class=\"pre\">sub(/regex/,</span> repl)</tt></td>\n<td>The regex pattern must be provided in <em>regex</em>\nand the replacement value provided in <em>repl</em></td>\n</tr>\n<tr><td><tt class=\"docutils literal\">len</tt></td>\n<td>No parameters and no parenthesis</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">split(char, segment, max_split)</tt></td>\n<td>Separator character provided as <em>char</em>, which\nindex from the resulting array to be returns\nprovided as <em>segment</em>, and maximum number of\nsplits to perform provided as <em>max_split</em>,\n<tt class=\"docutils literal\"><span class=\"pre\">-1</span></tt> for all splits.</td>\n</tr>\n<tr><td><tt class=\"docutils literal\">parent</tt></td>\n<td>No parameters, no parenthesis</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Arithmetic Functions</strong></p>\n<p>JSON Path can be written and combined to concatenate string values\nor perform arithmetic functions on numerical values. Each JSONPath\nexpression used must return the same type, and when performing\nsuch functions between returned lists, each list must be the same\nlength. An example is included in documentation for the keyword\n<tt class=\"docutils literal\">Get values from JSON</tt>.</p>\n</div>\n<div class=\"section\" id=\"additional-information\">\n<h3 id=\"Additional Information\">Additional Information</h3>\n<p>There are a multitude of different script expressions\nin addition to the elements listed above, which can\nbe seen in the <a class=\"reference external\" href=\"http://goessner.net/articles/JsonPath/\">aforementioned article</a>.</p>\n<p>For further library usage examples, see the individual keywords.</p>\n</div>\n</div>\n</div>\n</div>\n",
  "version": "",
  "generated": "2025-02-03T13:00:03+00:00",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
  "lineno": 40,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Add to JSON",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "expr",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "expr: str"
        },
        {
          "name": "value",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Add items into a JSON serializable object and return the result.</p>\n<p>If the target is a list, the values are appended to the end.\nIf the target is a dict, the keys are either added or updated.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">values to either append or update</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">JSON serializable object of the updated JSON</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Change the name value for all people</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">before</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"s\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">person</span><span class=\"p\">}=    </span><span class=\"nf\">Create dictionary</span><span class=\"p\">      </span><span class=\"s\">Name=John</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">after</span><span class=\"p\">}=     </span><span class=\"nf\">Add to JSON</span><span class=\"p\">    ${</span><span class=\"nv\">before</span><span class=\"p\">}   </span><span class=\"s\">$.People</span><span class=\"p\">    ${</span><span class=\"nv\">person</span><span class=\"p\">}</span>\n</pre>\n<p>Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n\n</span><span class=\"c1\"># Change the name value for all people</span><span class=\"w\">\n</span><span class=\"n\">js</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">convert_string_to_json</span><span class=\"p\">(</span><span class=\"s1\">'{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">js</span><span class=\"o\">.</span><span class=\"n\">add_to_json</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"p\">,</span> <span class=\"s2\">&quot;$.People&quot;</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Add items into a JSON serializable object and return the result.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 372
    },
    {
      "name": "Convert JSON to String",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Convert a JSON serializable object to a string and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">string of the JSON serializable object</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Convert to string</span><span class=\"p\">\n    ${</span><span class=\"nv\">obj</span><span class=\"p\">}=    </span><span class=\"nf\">Create dictionary</span><span class=\"p\">    </span><span class=\"s\">Key=Value</span><span class=\"p\">\n    ${</span><span class=\"nv\">json</span><span class=\"p\">}=   </span><span class=\"nf\">Convert JSON to string</span><span class=\"p\">    ${</span><span class=\"nv\">obj</span><span class=\"p\">}\n    </span><span class=\"nf\">Should be equal</span><span class=\"p\">    ${</span><span class=\"nv\">json</span><span class=\"p\">}     </span><span class=\"s\">{&quot;Key&quot;: &quot;Value&quot;}</span>\n</pre>\n<p>Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">robot.libraries.BuiltIn</span> <span class=\"kn\">import</span> <span class=\"n\">BuiltIn</span><span class=\"w\">\n\n</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Key&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Value&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">convert_json_to_string</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">BuiltIn</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">should_be_equal</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"s1\">'{&quot;Key&quot;: &quot;Value&quot;}'</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Convert a JSON serializable object to a string and return it.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 310
    },
    {
      "name": "Convert String to JSON",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Convert a string to a JSON serializable object and return it.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">JSON serializable object of the string</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Convert to json</span><span class=\"p\">\n    ${</span><span class=\"nv\">json</span><span class=\"p\">}=    </span><span class=\"nf\">Set variable</span><span class=\"p\">    </span><span class=\"s\">{&quot;Key&quot;: &quot;Value&quot;}</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">obj</span><span class=\"p\">}=     </span><span class=\"nf\">Convert string to JSON</span><span class=\"p\">    ${</span><span class=\"nv\">json</span><span class=\"p\">}\n    </span><span class=\"nf\">Should be equal</span><span class=\"p\">    ${</span><span class=\"nv\">obj.Key</span><span class=\"p\">}    </span><span class=\"s\">Value</span>\n</pre>\n<p>Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">robot.libraries.BuiltIn</span> <span class=\"kn\">import</span> <span class=\"n\">BuiltIn</span><span class=\"w\">\n\n</span><span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"s1\">'{&quot;Key&quot;: &quot;Value&quot;}'</span><span class=\"w\">\n</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">convert_string_to_json</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">BuiltIn</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">should_be_equal</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s2\">&quot;Key&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Value&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Convert a string to a JSON serializable object and return it.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 341
    },
    {
      "name": "Delete from JSON",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "expr",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "expr: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete values from a JSON serializable object and return the result.\nWill delete all values that match the expression.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">JSON serializable object with values removed</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Delete all people</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">before</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"s\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">after</span><span class=\"p\">}=     </span><span class=\"nf\">Delete from JSON</span><span class=\"p\">    ${</span><span class=\"nv\">before</span><span class=\"p\">}   </span><span class=\"s\">$.People[*]</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n\n</span><span class=\"c1\"># Delete all people</span><span class=\"w\">\n</span><span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;People&quot;</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Jane&quot;</span><span class=\"p\">}]}</span><span class=\"w\">\n</span><span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delete_from_json</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"p\">,</span> <span class=\"s2\">&quot;$.People[*]&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Delete values from a JSON serializable object and return the result. Will delete all values that match the expression.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 709
    },
    {
      "name": "Get value from JSON",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "expr",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "expr: str"
        },
        {
          "name": "default",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Any",
                "typedoc": "Any",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "Any": "Any",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "default: Any | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get a single value from a JSON serializable object that matches the given expression.</p>\n<p>Raises a ValueError if there is more than one match.\nReturns the given default argument (or None) if there\nwere no matches.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">jsonpath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">default value to return in the absence of a match</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">string containing the match OR <cite>default</cite> if there are no matches</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if more than one match is discovered</td>\n</tr>\n</tbody>\n</table>\n<p>Short Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Get the name value for the first person</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">people</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"s\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n    ${</span><span class=\"nv\">first</span><span class=\"p\">}=     </span><span class=\"nf\">Get value from JSON</span><span class=\"p\">      ${</span><span class=\"nv\">people</span><span class=\"p\">}   </span><span class=\"s\">$.People[0].Name</span>\n</pre>\n<p>Short Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n\n</span><span class=\"c1\"># Get the name value for the second person.</span><span class=\"w\">\n</span><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;People&quot;</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Jane&quot;</span><span class=\"p\">}]}</span><span class=\"w\">\n</span><span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_value_from_json</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"s2\">&quot;$.People[1].Name&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">)</span>\n</pre>\n<p>Extended Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.JSON</span><span class=\"p\">\n</span><span class=\"kn\">Suite Setup</span><span class=\"p\">     </span><span class=\"nf\">Ingest JSON</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">JSON_STRING</span><span class=\"p\">}      </span><span class=\"s\">{</span><span class=\"p\">\n...                   </span><span class=\"s\">&quot;clients&quot;: [</span><span class=\"p\">\n...                     </span><span class=\"s\">{</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;name&quot;: &quot;Johnny Example&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;email&quot;: &quot;john&#64;example.com&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;orders&quot;: [</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 103.20, &quot;id&quot;:&quot;guid-001&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 98.99, &quot;id&quot;:&quot;guid-002&quot;}</span><span class=\"p\">\n...                       </span><span class=\"s\">]</span><span class=\"p\">\n...                     </span><span class=\"s\">},</span><span class=\"p\">\n...                     </span><span class=\"s\">{</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;name&quot;: &quot;Jane Example&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;email&quot;: &quot;jane&#64;example.com&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;orders&quot;: [</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Waypath 321&quot;, &quot;state&quot;: &quot;WA&quot;, &quot;price&quot;: 22.00, &quot;id&quot;:&quot;guid-003&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 2330.01, &quot;id&quot;:&quot;guid-004&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Waypath 321&quot;, &quot;state&quot;: &quot;WA&quot;, &quot;price&quot;: 152.12, &quot;id&quot;:&quot;guid-005&quot;}</span><span class=\"p\">\n...                       </span><span class=\"s\">]</span><span class=\"p\">\n...                     </span><span class=\"s\">}</span><span class=\"p\">\n...                   </span><span class=\"s\">]</span><span class=\"p\">\n...                 </span><span class=\"s\">}</span><span class=\"p\">\n${</span><span class=\"nv\">ID</span><span class=\"p\">}               </span><span class=\"s\">guid-003</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get email for specific order id</span><span class=\"p\">\n    ${</span><span class=\"nv\">email</span><span class=\"p\">}=    </span><span class=\"nf\">Get value from json</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}    </span><span class=\"s\">$.clients[?(&#64;..id==&quot;</span><span class=\"p\">${</span><span class=\"nv\">ID</span><span class=\"p\">}</span><span class=\"s\">&quot;)].email</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">\\nOUTPUT IS\\n </span><span class=\"p\">${</span><span class=\"nv\">email</span><span class=\"p\">}    </span><span class=\"s\">console=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"nf\">Should be equal as strings</span><span class=\"p\">    ${</span><span class=\"nv\">email</span><span class=\"p\">}    </span><span class=\"s\">jane&#64;example.com</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Ingest JSON</span><span class=\"p\">\n    ${</span><span class=\"nv\">doc</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to json</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_STRING</span><span class=\"p\">}\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}    ${</span><span class=\"nv\">doc</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get a single value from a JSON serializable object that matches the given expression.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 417
    },
    {
      "name": "Get values from JSON",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "expr",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "expr: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get all values from a JSON serializable object that match the given expression.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of values that match</td>\n</tr>\n</tbody>\n</table>\n<p>Short Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Get all the names for all people</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">people</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"s\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">names</span><span class=\"p\">}=     </span><span class=\"nf\">Get values from JSON</span><span class=\"p\">     ${</span><span class=\"nv\">people</span><span class=\"p\">}   </span><span class=\"s\">$.People[*].Name</span>\n</pre>\n<p>Short Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n\n</span><span class=\"c1\"># Get all the names for all people</span><span class=\"w\">\n</span><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;People&quot;</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Jane&quot;</span><span class=\"p\">}]}</span><span class=\"w\">\n</span><span class=\"n\">names</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_values_from_json</span><span class=\"p\">(</span><span class=\"n\">people</span><span class=\"p\">,</span> <span class=\"s2\">&quot;$.People[*].Name&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">)</span>\n</pre>\n<p>Extended Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.JSON</span><span class=\"p\">\n</span><span class=\"kn\">Suite Setup</span><span class=\"p\">     </span><span class=\"nf\">Ingest JSON</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">JSON_STRING</span><span class=\"p\">}      </span><span class=\"s\">{</span><span class=\"p\">\n...                   </span><span class=\"s\">&quot;clients&quot;: [</span><span class=\"p\">\n...                     </span><span class=\"s\">{</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;name&quot;: &quot;Johnny Example&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;email&quot;: &quot;john&#64;example.com&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;orders&quot;: [</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 103.20, &quot;id&quot;:&quot;guid-001&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 98.99, &quot;id&quot;:&quot;guid-002&quot;}</span><span class=\"p\">\n...                       </span><span class=\"s\">]</span><span class=\"p\">\n...                     </span><span class=\"s\">},</span><span class=\"p\">\n...                     </span><span class=\"s\">{</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;name&quot;: &quot;Jane Example&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;email&quot;: &quot;jane&#64;example.com&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;orders&quot;: [</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Waypath 321&quot;, &quot;state&quot;: &quot;WA&quot;, &quot;price&quot;: 22.00, &quot;id&quot;:&quot;guid-003&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 2330.01, &quot;id&quot;:&quot;guid-004&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Waypath 321&quot;, &quot;state&quot;: &quot;WA&quot;, &quot;price&quot;: 152.12, &quot;id&quot;:&quot;guid-005&quot;}</span><span class=\"p\">\n...                       </span><span class=\"s\">]</span><span class=\"p\">\n...                     </span><span class=\"s\">}</span><span class=\"p\">\n...                   </span><span class=\"s\">]</span><span class=\"p\">\n...                 </span><span class=\"s\">}</span><span class=\"p\">\n${</span><span class=\"nv\">ID</span><span class=\"p\">}               </span><span class=\"s\">guid-003</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Get All Prices and Order Ids</span><span class=\"p\">\n    </span><span class=\"c\"># Arithmetic operations only work when lists are of equal lengths and types.\n</span><span class=\"p\">    ${</span><span class=\"nv\">prices</span><span class=\"p\">}=    </span><span class=\"nf\">Get values from json</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}\n    ...    </span><span class=\"s\">$.clients[*].orders[*].id + &quot; has price &quot; + $.clients[*].orders[*].price.<span class=\"name\">`</span>str()<span class=\"name\">`</span></span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">\\nOUTPUT IS\\n </span><span class=\"p\">${</span><span class=\"nv\">prices</span><span class=\"p\">}    </span><span class=\"s\">console=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"nf\">Should be equal as strings</span><span class=\"p\">    ${</span><span class=\"nv\">prices</span><span class=\"p\">}\n    ...    </span><span class=\"s\">['guid-001 has price 103.2', 'guid-002 has price 98.99', 'guid-003 has price 22.0', 'guid-004 has price 2330.01', 'guid-005 has price 152.12']</span><span class=\"p\">\n\n</span><span class=\"gu\">Find Only Valid Emails With Regex</span><span class=\"p\">\n    </span><span class=\"c\"># The regex used in this example is simplistic and\n</span><span class=\"p\">    </span><span class=\"c\"># will not work with all email addresses\n</span><span class=\"p\">    ${</span><span class=\"nv\">emails</span><span class=\"p\">}=    </span><span class=\"nf\">Get values from json</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}\n    ...    </span><span class=\"s\">$.clients[?(&#64;.email =~ &quot;[a-zA-Z]+&#64;[a-zA-Z]+\\.[a-zA-Z]+&quot;)].email</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">\\nOUTPUT IS\\n </span><span class=\"p\">${</span><span class=\"nv\">emails</span><span class=\"p\">}    </span><span class=\"s\">console=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"nf\">Should be equal as strings</span><span class=\"p\">    ${</span><span class=\"nv\">emails</span><span class=\"p\">}    </span><span class=\"s\">['john&#64;example.com', 'jane&#64;example.com']</span><span class=\"p\">\n\n</span><span class=\"gu\">Find Orders From Texas Over 100</span><span class=\"p\">\n    </span><span class=\"c\"># The regex used in this example is simplistic and\n</span><span class=\"p\">    </span><span class=\"c\"># will not work with all email addresses\n</span><span class=\"p\">    ${</span><span class=\"nv\">orders</span><span class=\"p\">}=    </span><span class=\"nf\">Get values from json</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}\n    ...    </span><span class=\"s\">$.clients[*].orders[?(&#64;.price &gt; 100 &amp; &#64;.state == &quot;TX&quot;)]</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">\\nOUTPUT IS\\n </span><span class=\"p\">${</span><span class=\"nv\">orders</span><span class=\"p\">}    </span><span class=\"s\">console=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"nf\">Should be equal as strings</span><span class=\"p\">    ${</span><span class=\"nv\">orders</span><span class=\"p\">}\n    ...    </span><span class=\"s\">[{'address': 'Streetroad 123', 'state': 'TX', 'price': 103.2, 'id': 'guid-001'}, {'address': 'Streetroad 123', 'state': 'TX', 'price': 2330.01, 'id': 'guid-004'}]</span><span class=\"p\">\n\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Ingest JSON</span><span class=\"p\">\n    ${</span><span class=\"nv\">doc</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to json</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_STRING</span><span class=\"p\">}\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}    ${</span><span class=\"nv\">doc</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get all values from a JSON serializable object that match the given expression.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 508
    },
    {
      "name": "Load JSON from file",
      "args": [
        {
          "name": "filename",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filename: str"
        },
        {
          "name": "encoding",
          "type": null,
          "types": [],
          "typedocs": {},
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding=utf-8"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Load JSON data from a file, and return it as JSON serializable object.\nDepending on the input file the object can be either a dictionary,\na list, or a scalar value.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to input file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">file character encoding</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">JSON serializable object of the JSON file</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Task ***</span><span class=\"p\">\n</span><span class=\"gu\">Load json</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">auth</span><span class=\"p\">}=    </span><span class=\"nf\">Load JSON from file</span><span class=\"p\">    </span><span class=\"s\">auth.json</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">Current auth token: </span><span class=\"p\">${</span><span class=\"nv\">auth.token</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Load JSON data from a file, and return it as JSON serializable object. Depending on the input file the object can be either a dictionary, a list, or a scalar value.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 238
    },
    {
      "name": "Save JSON to file",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "filename",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filename: str"
        },
        {
          "name": "indent",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "indent: int | None = None"
        },
        {
          "name": "encoding",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "utf-8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "encoding: str = utf-8"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Save a JSON serializable object or a string containing\na JSON value into a file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON serializable object or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to output file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param indent:</th><td class=\"field-body\">if given this value is used for json file indent</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param encoding:</th><td class=\"field-body\">file character encoding</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Save dictionary to file</span><span class=\"p\">\n    ${</span><span class=\"nv\">john</span><span class=\"p\">}=    </span><span class=\"nf\">Create dictionary</span><span class=\"p\">    </span><span class=\"s\">name=John</span><span class=\"p\">    </span><span class=\"s\">mail=john&#64;example.com</span><span class=\"p\">\n    </span><span class=\"nf\">Save JSON to file</span><span class=\"p\">    ${</span><span class=\"nv\">john</span><span class=\"p\">}    </span><span class=\"s\">john.json</span><span class=\"p\">\n\n</span><span class=\"gu\">Save string to file</span><span class=\"p\">\n    ${</span><span class=\"nv\">mark</span><span class=\"p\">}=    </span><span class=\"nf\">Set variable</span><span class=\"p\">    </span><span class=\"s\">{&quot;name&quot;: &quot;Mark&quot;, &quot;mail&quot;: &quot;mark&#64;example.com&quot;}</span><span class=\"p\">\n    </span><span class=\"nf\">Save JSON to file</span><span class=\"p\">    ${</span><span class=\"nv\">mark</span><span class=\"p\">}    </span><span class=\"s\">mark.json</span>\n</pre>\n<p>Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n\n</span><span class=\"c1\"># Save dictionary to file.</span><span class=\"w\">\n</span><span class=\"n\">john</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mail&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;john&#64;example.com&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save_json_to_file</span><span class=\"p\">(</span><span class=\"n\">john</span><span class=\"p\">,</span> <span class=\"s2\">&quot;john.json&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Save a JSON serializable object or a string containing a JSON value into a file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 262
    },
    {
      "name": "Update value to JSON",
      "args": [
        {
          "name": "doc",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "doc: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "expr",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "expr: str"
        },
        {
          "name": "value",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "Dict",
                "typedoc": "dictionary",
                "nested": [
                  {
                    "name": "Hashable",
                    "typedoc": null,
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "int",
                        "typedoc": "integer",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "float",
                        "typedoc": "float",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "bool",
                        "typedoc": "boolean",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "list",
                        "typedoc": "list",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "dict",
                        "typedoc": "dictionary",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "None",
                        "typedoc": "None",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              },
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "float",
                "typedoc": "float",
                "nested": [],
                "union": false
              },
              {
                "name": "bool",
                "typedoc": "boolean",
                "nested": [],
                "union": false
              },
              {
                "name": "list",
                "typedoc": "list",
                "nested": [],
                "union": false
              },
              {
                "name": "dict",
                "typedoc": "dictionary",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Update existing values in a JSON serializable object and return the result.\nWill change all values that match the expression.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param doc:</th><td class=\"field-body\">JSON or string</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param expr:</th><td class=\"field-body\">JSONPath expression</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">New value for the matching item(s)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">JSON serializable object with updated results</td>\n</tr>\n</tbody>\n</table>\n<p>Short Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Change the name key for all people</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">before</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to JSON</span><span class=\"p\">   </span><span class=\"s\">{&quot;People&quot;: [{&quot;Name&quot;: &quot;Mark&quot;}, {&quot;Name&quot;: &quot;Jane&quot;}]}</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">after</span><span class=\"p\">}=     </span><span class=\"nf\">Update value to JSON</span><span class=\"p\">     ${</span><span class=\"nv\">before</span><span class=\"p\">}   </span><span class=\"s\">$.People[*].Name</span><span class=\"p\">    </span><span class=\"s\">JohnMalkovich</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.JSON</span> <span class=\"kn\">import</span> <span class=\"n\">JSON</span><span class=\"w\">\n\n</span><span class=\"c1\"># Change the name key for all people</span><span class=\"w\">\n</span><span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;People&quot;</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mark&quot;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Jane&quot;</span><span class=\"p\">}]}</span><span class=\"w\">\n</span><span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">JSON</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">update_value_to_json</span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"p\">,</span> <span class=\"s2\">&quot;$.People[*].Name&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;JohnMalkovich&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"p\">)</span>\n</pre>\n<p>Extended Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">RPA.JSON</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">Collections</span><span class=\"p\">\n</span><span class=\"kn\">Suite Setup</span><span class=\"p\">     </span><span class=\"nf\">Ingest JSON</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">JSON_STRING</span><span class=\"p\">}      </span><span class=\"s\">{</span><span class=\"p\">\n...                   </span><span class=\"s\">&quot;clients&quot;: [</span><span class=\"p\">\n...                     </span><span class=\"s\">{</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;name&quot;: &quot;Johnny Example&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;email&quot;: &quot;john&#64;example.com&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;id&quot;: &quot;user-001&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;orders&quot;: [</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 103.20, &quot;id&quot;:&quot;guid-001&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 98.99, &quot;id&quot;:&quot;guid-002&quot;}</span><span class=\"p\">\n...                       </span><span class=\"s\">]</span><span class=\"p\">\n...                     </span><span class=\"s\">},</span><span class=\"p\">\n...                     </span><span class=\"s\">{</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;name&quot;: &quot;Jane Example&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;email&quot;: &quot;jane&#64;example.com&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;id&quot;: &quot;user-002&quot;,</span><span class=\"p\">\n...                       </span><span class=\"s\">&quot;orders&quot;: [</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Waypath 321&quot;, &quot;state&quot;: &quot;WA&quot;, &quot;price&quot;: 22.00, &quot;id&quot;:&quot;guid-003&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Streetroad 123&quot;, &quot;state&quot;: &quot;TX&quot;, &quot;price&quot;: 2330.01, &quot;id&quot;:&quot;guid-004&quot;},</span><span class=\"p\">\n...                         </span><span class=\"s\">{&quot;address&quot;: &quot;Waypath 321&quot;, &quot;state&quot;: &quot;WA&quot;, &quot;price&quot;: 152.12, &quot;id&quot;:&quot;guid-005&quot;}</span><span class=\"p\">\n...                       </span><span class=\"s\">]</span><span class=\"p\">\n...                     </span><span class=\"s\">}</span><span class=\"p\">\n...                   </span><span class=\"s\">]</span><span class=\"p\">\n...                 </span><span class=\"s\">}</span><span class=\"p\">\n${</span><span class=\"nv\">ID</span><span class=\"p\">}               </span><span class=\"s\">guid-003</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Update user email</span><span class=\"p\">\n    ${</span><span class=\"nv\">updated_doc</span><span class=\"p\">}=    </span><span class=\"nf\">Update value to json</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}\n    ...    </span><span class=\"s\">$.clients[?(&#64;.id==&quot;user-001&quot;)].email</span><span class=\"p\">\n    ...    </span><span class=\"s\">johnny&#64;example.com</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">\\nNEW JSON IS\\n </span><span class=\"p\">${</span><span class=\"nv\">updated_doc</span><span class=\"p\">}    </span><span class=\"s\">console=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    ${</span><span class=\"nv\">new_email</span><span class=\"p\">}=    </span><span class=\"nf\">Get value from json</span><span class=\"p\">    ${</span><span class=\"nv\">updated_doc</span><span class=\"p\">}    </span><span class=\"s\">$.clients[?(&#64;.id==&quot;user-001&quot;)].email</span><span class=\"p\">\n    </span><span class=\"nf\">Should be equal as strings</span><span class=\"p\">    ${</span><span class=\"nv\">new_email</span><span class=\"p\">}    </span><span class=\"s\">johnny&#64;example.com</span><span class=\"p\">\n\n</span><span class=\"gu\">Add additional charge to all prices in WA</span><span class=\"p\">\n    </span><span class=\"c\"># This example also shows how the update keyword changes the original JSON doc in memory.\n</span><span class=\"p\">    ${</span><span class=\"nv\">id_price</span><span class=\"p\">}=    </span><span class=\"nf\">Get values from json</span><span class=\"p\">\n    ...    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}\n    ...    </span><span class=\"s\">$.clients[*].orders[?(&#64;.state==&quot;WA&quot;)].id,price</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">order_id</span><span class=\"p\">}    ${</span><span class=\"nv\">price</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">id_price</span><span class=\"p\">}\n        </span><span class=\"nf\">Update value to json</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}    </span><span class=\"s\">$.clients[*].orders[?(&#64;.id==&quot;</span><span class=\"p\">${</span><span class=\"nv\">order_id</span><span class=\"p\">}</span><span class=\"s\">&quot;)].price</span><span class=\"p\">    ${</span><span class=\"nv\">{</span><span class=\"p\">${</span><span class=\"nv\">price</span><span class=\"p\">}</span><span class=\"nv\"> * 1.06</span><span class=\"p\">}</span><span class=\"s\">}</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">\\nNEW JSON IS\\n </span><span class=\"p\">${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}    </span><span class=\"s\">console=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    ${</span><span class=\"nv\">one_price</span><span class=\"p\">}=    </span><span class=\"nf\">Get value from json</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}    </span><span class=\"s\">$..orders[?(&#64;.id==</span><span class=\"p\">${</span><span class=\"nv\">ID</span><span class=\"p\">}</span><span class=\"s\">)].price</span><span class=\"p\">\n    </span><span class=\"nf\">Should be equal as numbers</span><span class=\"p\">    ${</span><span class=\"nv\">one_price</span><span class=\"p\">}    </span><span class=\"s\">23.32</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Ingest JSON</span><span class=\"p\">\n    ${</span><span class=\"nv\">doc</span><span class=\"p\">}=    </span><span class=\"nf\">Convert string to json</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_STRING</span><span class=\"p\">}\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">JSON_DOC</span><span class=\"p\">}    ${</span><span class=\"nv\">doc</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Update existing values in a JSON serializable object and return the result. Will change all values that match the expression.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/JSON.py",
      "lineno": 607
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "Any",
      "doc": "<p>Any value is accepted. No conversion is done.</p>",
      "usages": [
        "Get value from JSON"
      ],
      "accepts": [
        "Any"
      ]
    },
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Add to JSON",
        "Convert JSON to String",
        "Delete from JSON",
        "Get value from JSON",
        "Get values from JSON",
        "Save JSON to file",
        "Update value to JSON"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>If the type has nested types like <code>dict[str, int]</code>, items are converted to those types automatically. This in new in Robot Framework 6.0.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Add to JSON",
        "Convert JSON to String",
        "Delete from JSON",
        "Get value from JSON",
        "Get values from JSON",
        "Save JSON to file",
        "Update value to JSON"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "float",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#float\">float</a> built-in function.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>3.14</code>, <code>2.9979e8</code>, <code>10 000.000 01</code></p>",
      "usages": [
        "Add to JSON",
        "Convert JSON to String",
        "Delete from JSON",
        "Get value from JSON",
        "Get values from JSON",
        "Save JSON to file",
        "Update value to JSON"
      ],
      "accepts": [
        "string",
        "Real"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Add to JSON",
        "Convert JSON to String",
        "Delete from JSON",
        "Get value from JSON",
        "Get values from JSON",
        "Save JSON to file",
        "Update value to JSON"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>If the type has nested types like <code>list[int]</code>, items are converted to those types automatically. This in new in Robot Framework 6.0.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Add to JSON",
        "Convert JSON to String",
        "Delete from JSON",
        "Get value from JSON",
        "Get values from JSON",
        "Save JSON to file",
        "Update value to JSON"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Add to JSON",
        "Convert JSON to String",
        "Delete from JSON",
        "Get value from JSON",
        "Get values from JSON",
        "Save JSON to file",
        "Update value to JSON"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Add to JSON",
        "Convert JSON to String",
        "Convert String to JSON",
        "Delete from JSON",
        "Get value from JSON",
        "Get values from JSON",
        "Load JSON from file",
        "Save JSON to file",
        "Update value to JSON"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}