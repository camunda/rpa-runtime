{
  "specversion": 1,
  "name": "RPA.DocumentAI.Base64AI",
  "doc": "<div class=\"document\">\n<p>Library to support <a class=\"reference external\" href=\"https://base64.ai/\">Base64.ai</a> service for intelligent\ndocument processing (IDP).</p>\n<p>Library requires at the minimum <cite>rpaframework</cite> version <strong>19.0.0</strong>.</p>\n<p>Service supports identifying fields in the documents, which can be given to the\nservice in multiple different file formats and via URL.</p>\n<p><strong>Robot Framework example usage</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.DocumentAI.Base64AI</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Robocorp.Vault</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Identify document</span><span class=\"p\">\n    ${</span><span class=\"nv\">secrets</span><span class=\"p\">}=   </span><span class=\"nf\">Get Secret</span><span class=\"p\">  </span><span class=\"s\">base64ai-auth</span><span class=\"p\">\n    </span><span class=\"nf\">Set Authorization</span><span class=\"p\">  ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[email-address]</span><span class=\"p\">   ${</span><span class=\"nv\">secrets</span><span class=\"p\">}</span><span class=\"s\">[apikey]</span><span class=\"p\">\n    ${</span><span class=\"nv\">results</span><span class=\"p\">}=  </span><span class=\"nf\">Scan Document File</span><span class=\"p\">\n    ...   ${</span><span class=\"nv\">CURDIR</span><span class=\"p\">}${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">invoice.pdf</span><span class=\"p\">\n    ...   </span><span class=\"s\">model_types=finance/check/usa,finance/invoice/usa</span><span class=\"p\">\n    </span><span class=\"c\"># Scan response contains list of detected models in the document\n</span><span class=\"p\">    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">result</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">results</span><span class=\"p\">}\n        </span><span class=\"nf\">Log To Console</span><span class=\"p\">  </span><span class=\"s\">Model: </span><span class=\"p\">${</span><span class=\"nv\">result</span><span class=\"p\">}</span><span class=\"s\">[model]</span><span class=\"p\">\n        </span><span class=\"nf\">Log To Console</span><span class=\"p\">  </span><span class=\"s\">Field keys: </span><span class=\"p\">${</span><span class=\"nv\">{','.join($result['fields'].keys())</span><span class=\"p\">}</span><span class=\"s\">}</span><span class=\"p\">\n        </span><span class=\"nf\">Log To Console</span><span class=\"p\">  </span><span class=\"s\">Fields: </span><span class=\"p\">${</span><span class=\"nv\">result</span><span class=\"p\">}</span><span class=\"s\">[fields]</span><span class=\"p\">\n        </span><span class=\"nf\">Log To Console</span><span class=\"p\">  </span><span class=\"s\">Text (OCR): </span><span class=\"p\">${</span><span class=\"nv\">result</span><span class=\"p\">}</span><span class=\"s\">[ocr]</span><span class=\"p\">\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python example usage</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.DocumentAI.Base64AI</span> <span class=\"kn\">import</span> <span class=\"n\">Base64AI</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Vault</span><span class=\"w\">\n\n</span><span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;base64ai-auth&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">baselib</span> <span class=\"o\">=</span> <span class=\"n\">Base64AI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">set_authorization</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;email-address&quot;</span><span class=\"p\">],</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">scan_document_file</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;invoice.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">model_types</span><span class=\"o\">=</span><span class=\"s2\">&quot;finance/invoice,finance/check/usa&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Model: </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'model'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;FIELD </span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Text (OCR): </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'ocr'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n<p>Portal example: <a class=\"reference external\" href=\"https://github.com/robocorp/example-idp-base64\">https://github.com/robocorp/example-idp-base64</a></p>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:53",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
  "lineno": 16,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Filter Matching Signatures",
      "args": [
        {
          "name": "match_response",
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict[Hashable, str | int | float | bool | list | dict | None]": "dictionary",
            "List[str | int | float | bool | list | dict | None]": "list",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "match_response: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "confidence_threshold",
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "0.8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "confidence_threshold: float = 0.8"
        },
        {
          "name": "similarity_threshold",
          "types": [
            "float"
          ],
          "typedocs": {
            "float": "float"
          },
          "defaultValue": "0.8",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "similarity_threshold: float = 0.8"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Gets through all the recognized signatures in the queried image and returns\nonly the ones passing the confidence &amp; similarity thresholds.</p>\n<p>Additionally, this keyword simplifies the original input <cite>match_response</cite>\nstructure and returns a dictionary with all the detected and accepted reference\nsignatures as keys, and lists of similar enough query signatures as values.</p>\n<ul class=\"simple\">\n<li>Each reference signature (key) is a tuple of <cite>(index, coordinates)</cite>.</li>\n<li>Each query signature (sub-value) is a dictionary of <cite>{index, coords,\nsimilarity}</cite>.</li>\n<li>The coordinates describe the bounding-box enclosing the detected signature\nportion from the original image, as follows: <cite>(left, top, right, bottom)</cite>\ncorners.</li>\n</ul>\n<p>Use the original <cite>match_response</cite> object and the indexes from here if you need\nto retrieve extra details not found here (e.g. confidence score). Use the\n<tt class=\"docutils literal\">Get Signature Image</tt> to save and preview the image crop belonging to the\nsignature of choice.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param match_response:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The raw JSON-like response retrieved with the\n<tt class=\"docutils literal\">Get Matching Signatures</tt> keyword.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param confidence_threshold:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The minimum accepted confidence score (0.0-1.0)\nfor a candidate to be considered a signature. (to avoid false-positives)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param similarity_threshold:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The minimum accepted similarity score (0.0-1.0)\nfor a query signature to be considered an alike signature. (to discard\ndifferent or fraudulent signatures)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">A dictionary of accepted reference signatures and their similar ones\nfound in the queried image.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Match Signatures</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">matches</span><span class=\"p\">} =   </span><span class=\"nf\">Filter Matching Signatures</span><span class=\"p\">      ${</span><span class=\"nv\">sigs</span><span class=\"p\">}\n    </span><span class=\"nf\">Log Dictionary</span><span class=\"p\">    ${</span><span class=\"nv\">matches</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">filter_matching_signatures</span><span class=\"p\">(</span><span class=\"n\">sigs</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Gets through all the recognized signatures in the queried image and returns only the ones passing the confidence & similarity thresholds.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 379
    },
    {
      "name": "Get Fields From Prediction Result",
      "args": [
        {
          "name": "prediction",
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict[Hashable, str | int | float | bool | list | dict | None]": "dictionary",
            "List[str | int | float | bool | list | dict | None]": "list",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "prediction: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Helper keyword to get found fields from a prediction result.\nFor example see <tt class=\"docutils literal\">Scan Document File</tt> or <tt class=\"docutils literal\">Scan Document URL</tt> keyword.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prediction:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">prediction result dictionary</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of found fields</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Helper keyword to get found fields from a prediction result. For example see ``Scan Document File`` or ``Scan Document URL`` keyword.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 241
    },
    {
      "name": "Get Matching Signatures",
      "args": [
        {
          "name": "reference_image",
          "types": [
            "Path",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "reference_image: Path | str"
        },
        {
          "name": "query_image",
          "types": [
            "Path",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "query_image: Path | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Returns a list of matching signatures found from the reference into the\nqueried image.</p>\n<p>The input images can be paths to the files or URLs.</p>\n<p>The output JSON-like dictionary contains all the details from the API, like the\ndetected signatures in both the reference and query image and for every such\nsignature, its bounding-box geometry, confidence and similarity score.\nUse the <tt class=\"docutils literal\">Filter Matching Signatures</tt> over this value to get a simpler\nstructure.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param reference_image:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The reference image (jpg/png) to check query signatures\nagainst. (e.g. driving license, ID card)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param query_image:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The query image containing signatures similar to the ones\nfrom the reference image. (e.g. signed contract, bank check)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">A JSON-like dictionary revealing recognized signatures and how much\nthey resemble with each other.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Match Signatures</span><span class=\"p\">\n    ${</span><span class=\"nv\">ref_image</span><span class=\"p\">} =  </span><span class=\"nf\">Set Variable</span><span class=\"p\">    </span><span class=\"s\">driving-license.jpg</span><span class=\"p\">\n    ${</span><span class=\"nv\">query_image</span><span class=\"p\">} =  </span><span class=\"nf\">Set Variable</span><span class=\"p\">    </span><span class=\"s\">signed-check.png</span><span class=\"p\">\n    ${</span><span class=\"nv\">sigs</span><span class=\"p\">} =   </span><span class=\"nf\">Get Matching Signatures</span><span class=\"p\">     ${</span><span class=\"nv\">ref_image</span><span class=\"p\">}    ${</span><span class=\"nv\">query_image</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.DocumentAI.Base64AI</span> <span class=\"kn\">import</span> <span class=\"n\">Base64AI</span><span class=\"w\">\n\n</span><span class=\"n\">lib</span> <span class=\"o\">=</span> <span class=\"n\">Base64AI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">sigs</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">get_matching_signatures</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;driving-license.jpg&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;signed-check.png&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span>\n</pre>\n<p>Portal example: <a class=\"reference external\" href=\"https://github.com/robocorp/example-signature-match-assistant\">https://github.com/robocorp/example-signature-match-assistant</a></p>\n</div>\n",
      "shortdoc": "Returns a list of matching signatures found from the reference into the queried image.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 315
    },
    {
      "name": "Get Signature Image",
      "args": [
        {
          "name": "match_response",
          "types": [
            "Dict[Hashable, str | int | float | bool | list | dict | None]",
            "List[str | int | float | bool | list | dict | None]",
            "str",
            "int",
            "float",
            "bool",
            "list",
            "dict",
            "None"
          ],
          "typedocs": {
            "Dict[Hashable, str | int | float | bool | list | dict | None]": "dictionary",
            "List[str | int | float | bool | list | dict | None]": "list",
            "str": "string",
            "int": "integer",
            "float": "float",
            "bool": "boolean",
            "list": "list",
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "match_response: Dict[Hashable, str | int | float | bool | list | dict | None] | List[str | int | float | bool | list | dict | None] | str | int | float | bool | list | dict | None"
        },
        {
          "name": "",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "NAMED_ONLY_MARKER",
          "required": false,
          "repr": "*"
        },
        {
          "name": "index",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "NAMED_ONLY",
          "required": true,
          "repr": "index: int"
        },
        {
          "name": "reference",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "reference: bool = False"
        },
        {
          "name": "path",
          "types": [
            "Path",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "path: Path | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Retrieves and saves locally the image cut belonging to the provided <cite>index</cite>.</p>\n<p>The image data itself is provided with the original <cite>match_response</cite> object as\nbase64 encoded content. This utility keyword retrieves, decodes and saves it\non the local disk customized with the <cite>path</cite> parameter. By default, the\nsearched <cite>index</cite> is considered a query image, switch to the reference type by\nenabling it with the <cite>reference</cite> parameter.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param match_response:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The raw JSON-like response retrieved with the\n<tt class=\"docutils literal\">Get Matching Signatures</tt> keyword.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">The image ID (numeric) found along the coordinates in the output\nof the <tt class=\"docutils literal\">Filter Matching Signatures</tt> keyword. (the list order is stable)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param reference:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Set this to <cite>True</cite> if you're looking for a reference (not\nquery) image instead. (off by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Set an explicit output path (including file name) for the locally\nsaved image. (uses the output directory as default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">The image path of the locally saved file.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Match Signatures</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">ref_sigs</span><span class=\"p\">} =   </span><span class=\"nf\">Get Dictionary Keys</span><span class=\"p\">    ${</span><span class=\"nv\">matches</span><span class=\"p\">}\n    &#64;{</span><span class=\"nv\">qry_sigs</span><span class=\"p\">} =    </span><span class=\"nf\">Get From Dictionary</span><span class=\"p\">    ${</span><span class=\"nv\">matches</span><span class=\"p\">}    ${</span><span class=\"nv\">ref_sigs</span><span class=\"p\">}</span><span class=\"s\">[</span><span class=\"p\">${</span><span class=\"nv\">0</span><span class=\"p\">}</span><span class=\"s\">]</span><span class=\"p\">\n    &amp;{</span><span class=\"nv\">qry_sig</span><span class=\"p\">} =    </span><span class=\"nf\">Set Variable</span><span class=\"p\">    ${</span><span class=\"nv\">qry_sigs</span><span class=\"p\">}</span><span class=\"s\">[</span><span class=\"p\">${</span><span class=\"nv\">0</span><span class=\"p\">}</span><span class=\"s\">]</span><span class=\"p\">\n    ${</span><span class=\"nv\">path</span><span class=\"p\">} =   </span><span class=\"nf\">Get Signature Image</span><span class=\"p\">     ${</span><span class=\"nv\">sigs</span><span class=\"p\">}     </span><span class=\"s\">index=</span><span class=\"p\">${</span><span class=\"nv\">qry_sig</span><span class=\"p\">}</span><span class=\"s\">[index]</span><span class=\"p\">\n    </span><span class=\"nf\">Log To Console</span><span class=\"p\">    </span><span class=\"s\">Preview query signature image crop: </span><span class=\"p\">${</span><span class=\"nv\">path</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">qry_sig</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">get_signature_image</span><span class=\"p\">(</span><span class=\"n\">sigs</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">qry_sig</span><span class=\"p\">[</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Preview query signature image crop: &quot;</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Retrieves and saves locally the image cut belonging to the provided `index`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 475
    },
    {
      "name": "Get User Data",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get user data including details on credits used and credits remaining\nfor the Base64 service.</p>\n<p>Returned user data contains following keys:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>givenName</li>\n<li>familyName</li>\n<li>email</li>\n<li>hasWorkEmail</li>\n<li>companyName</li>\n<li>numberOfCredits</li>\n<li>numberOfPages</li>\n<li>numberOfUploads</li>\n<li>numberOfCreditsSpentOnDocuments (visible if used)</li>\n<li>numberOfCreditsSpentOnFaceDetection (visible if used)</li>\n<li>numberOfCreditsSpentOnFaceRecognition (visible if used)</li>\n<li>hasActiveAwsContract</li>\n<li>subscriptionType</li>\n<li>subscriptionPeriod</li>\n<li>tags</li>\n<li>ccEmails</li>\n<li>status</li>\n<li>remainingCredits (calculated by the keyword)</li>\n</ul>\n</blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">object containing details on the API user</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${userdata}=</span><span class=\"p\">   </span><span class=\"c\">Get User Data</span><span class=\"p\">\n</span><span class=\"c\">Log To Console</span><span class=\"p\">  </span><span class=\"c\">I have still ${userdata}[remainingCredits] credits left</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">userdata</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">get_user_data</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;I have still </span><span class=\"si\">{</span><span class=\"n\">userdata</span><span class=\"p\">[</span><span class=\"s1\">'remainingCredits'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\"> credits left&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Get user data including details on credits used and credits remaining for the Base64 service.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 252
    },
    {
      "name": "Scan Document File",
      "args": [
        {
          "name": "file_path",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "file_path: str"
        },
        {
          "name": "model_types",
          "types": [
            "str",
            "List[str]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "model_types: str | List[str] | None = None"
        },
        {
          "name": "mock",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "mock: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Scan a document file. Can be given a <tt class=\"docutils literal\">model_types</tt> to\nspecifically target certain models.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to the file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param model_types:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">single model type or list of model types</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param mock:</th><td class=\"field-body\">set to True to use /mock/scan endpoint instead of /scan</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">result of the document scan</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${results}=</span><span class=\"p\">    </span><span class=\"c\">Scan Document File</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">${CURDIR}${/}files${/}IMG_8277.jpeg</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">model_types=finance/check/usa,finance/invoice</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${result}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{results}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">Model: ${result}[model]</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">Fields: ${result}[fields]</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">Text (OCR): ${result}[ocr]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">scan_document_file</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;./files/Invoice-1120.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">model_types</span><span class=\"o\">=</span><span class=\"s2\">&quot;finance/invoice,finance/check/usa&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Model: </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'model'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">val</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Text (OCR): </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'ocr'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Scan a document file. Can be given a ``model_types`` to specifically target certain models.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 154
    },
    {
      "name": "Scan Document Url",
      "args": [
        {
          "name": "url",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "url: str"
        },
        {
          "name": "model_types",
          "types": [
            "str",
            "List[str]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "model_types: str | List[str] | None = None"
        },
        {
          "name": "mock",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "mock: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Scan a document URL. Can be given a <tt class=\"docutils literal\">model_types</tt> to\nspecifically target certain models.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param url:</th><td class=\"field-body\">valid url to a file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param model_types:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">single model type or list of model types</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param mock:</th><td class=\"field-body\">set to True to use /mock/scan endpoint instead of /scan</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">result of the document scan</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${results}=</span><span class=\"p\">    </span><span class=\"c\">Scan Document URL</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">https://base64.ai/static/content/features/data-extraction/models//2.png</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${result}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{results}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">Model: ${result}[model]</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">Fields: ${result}[fields]</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">Text (OCR): ${result}[ocr]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">scan_document_url</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;https://base64.ai/static/content/features/data-extraction/models//2.png&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Model: </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'model'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">props</span> <span class=\"ow\">in</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;FIELD </span><span class=\"si\">{</span><span class=\"n\">key</span><span class=\"si\">}</span><span class=\"s2\">: </span><span class=\"si\">{</span><span class=\"n\">props</span><span class=\"p\">[</span><span class=\"s1\">'value'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Text (OCR): </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"s1\">'ocr'</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Scan a document URL. Can be given a ``model_types`` to specifically target certain models.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 199
    },
    {
      "name": "Set Authorization",
      "args": [
        {
          "name": "api_email",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "api_email: str"
        },
        {
          "name": "api_key",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "api_key: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set Base64 AI request headers with email and key related to API.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param api_email:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">email address related to the API</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param api_key:</th><td class=\"field-body\">key related to the API</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${secrets}=</span><span class=\"p\">   </span><span class=\"c\">Get Secret</span><span class=\"p\">  </span><span class=\"c\">base64ai-auth</span><span class=\"p\">\n</span><span class=\"c\">Set Authorization</span><span class=\"p\">    </span><span class=\"c\">${secrets}[email-address]</span><span class=\"p\">    </span><span class=\"c\">${secrets}[apikey]</span>\n</pre>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">secrets</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;base64ai-auth&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">baselib</span> <span class=\"o\">=</span> <span class=\"n\">Base64AI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">baselib</span><span class=\"o\">.</span><span class=\"n\">set_authorization</span><span class=\"p\">(</span><span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;email-address&quot;</span><span class=\"p\">],</span> <span class=\"n\">secrets</span><span class=\"p\">[</span><span class=\"s2\">&quot;apikey&quot;</span><span class=\"p\">])</span>\n</pre>\n</div>\n",
      "shortdoc": "Set Base64 AI request headers with email and key related to API.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/Base64AI.py",
      "lineno": 85
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Filter Matching Signatures",
        "Get Fields From Prediction Result",
        "Get Signature Image",
        "Scan Document File",
        "Scan Document Url"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Filter Matching Signatures",
        "Get Fields From Prediction Result",
        "Get Signature Image"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "float",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#float\">float</a> built-in function.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>3.14</code>, <code>2.9979e8</code>, <code>10 000.000 01</code></p>",
      "usages": [
        "Filter Matching Signatures",
        "Get Fields From Prediction Result",
        "Get Signature Image"
      ],
      "accepts": [
        "string",
        "Real"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Filter Matching Signatures",
        "Get Fields From Prediction Result",
        "Get Signature Image"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Filter Matching Signatures",
        "Get Fields From Prediction Result",
        "Get Signature Image",
        "Scan Document File",
        "Scan Document Url"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Filter Matching Signatures",
        "Get Fields From Prediction Result",
        "Get Signature Image",
        "Scan Document File",
        "Scan Document Url"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Filter Matching Signatures",
        "Get Fields From Prediction Result",
        "Get Matching Signatures",
        "Get Signature Image",
        "Scan Document File",
        "Scan Document Url",
        "Set Authorization"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}