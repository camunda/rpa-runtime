{
  "specversion": 1,
  "name": "RPA.Robocorp.WorkItems",
  "doc": "<div class=\"document\">\n<p>A library for interacting with Control Room work items.</p>\n<p>Work items are used for managing data that go through multiple\nsteps and tasks inside a process. Each step of a process receives\ninput work items from the previous step, and creates output work items for\nthe next step.</p>\n<p><strong>Item structure</strong></p>\n<p>A work item's data payload is JSON and allows storing anything that is\nserializable. This library by default interacts with payloads that\nare a dictionary of key-value pairs, which it treats as individual\nvariables. These variables can be exposed to the Robot Framework task\nto be used directly.</p>\n<p>In addition to the data section, a work item can also contain files,\nwhich are stored by default in Robocorp Control Room. Adding and using\nfiles with work items requires no additional setup from the user.</p>\n<p><strong>Loading inputs</strong></p>\n<p>The library automatically loads the first input work item, if the\nlibrary input argument <tt class=\"docutils literal\">autoload</tt> is truthy (default).</p>\n<p>After an input has been loaded its payload and files can be accessed\nthrough corresponding keywords, and optionally these values can be modified.</p>\n<p><strong>E-mail triggering</strong></p>\n<p>Since a process can be started in Control Room by sending an e-mail, a body\nin Text/JSON/YAML/HTML format can be sent as well and this gets attached to the\ninput work item with the <tt class=\"docutils literal\">rawEmail</tt> payload variable. This library automatically\nparses the content of it and saves into <tt class=\"docutils literal\">parsedEmail</tt> the dictionary\ntransformation of the original e-mail.</p>\n<p>If &quot;Parse email&quot; Control Room configuration option is enabled (recommended), then\nyour e-mail is automatically parsed in the work item under the <tt class=\"docutils literal\">email</tt> payload\nvariable, which is a dictionary containing a <tt class=\"docutils literal\">body</tt> holding the final parsed form\nof the interpreted e-mail body. The payload variable <tt class=\"docutils literal\">parsedEmail</tt> is still\navailable for backwards compatibility reasons and holds the very same body inside\nthe <tt class=\"docutils literal\">parsedEmail[Body]</tt>.</p>\n<p>E-mail attachments will be added into the work item as files. Read more on:\n<a class=\"reference external\" href=\"https://robocorp.com/docs/control-room/attended-or-unattended/email-trigger\">https://robocorp.com/docs/control-room/attended-or-unattended/email-trigger</a></p>\n<p>Example:</p>\n<p>After starting the process by sending an e-mail with a body like:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;message&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Hello world!&quot;</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<p>The robot can use the parsed e-mail body's dictionary:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Using Parsed Emails</span><span class=\"p\">\n    ${</span><span class=\"nv\">mail</span><span class=\"p\">} =    </span><span class=\"nf\">Get Work Item Variable</span><span class=\"p\">    </span><span class=\"s\">email</span><span class=\"p\">\n    </span><span class=\"nf\">Set Work Item Variables</span><span class=\"p\">    &amp;{</span><span class=\"nv\">mail</span><span class=\"p\">}[</span><span class=\"nv\">body</span><span class=\"p\">]\n    ${</span><span class=\"nv\">message</span><span class=\"p\">} =     </span><span class=\"nf\">Get Work Item Variable</span><span class=\"p\">     </span><span class=\"s\">message</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    ${</span><span class=\"nv\">message</span><span class=\"p\">}    </span><span class=\"c\"># will print &quot;Hello world!&quot;</span>\n</pre>\n<p>The behaviour can be disabled by loading the library with\n<tt class=\"docutils literal\"><span class=\"pre\">auto_parse_email=${None}</span></tt> or altered by providing to it a dictionary with one\n&quot;key: value&quot; where the key is usually &quot;email.text&quot; (deprecated &quot;rawEmail&quot;, the\nvariable set by Control Room, which acts as source for the parsed (deprecated raw)\ne-mail data) and the value can be &quot;email.body&quot; (deprecated &quot;parsedEmail&quot;, where the\nparsed e-mail data gets stored into), value which can be customized and retrieved\nwith <tt class=\"docutils literal\">Get Work Item Variable</tt>.</p>\n<p><strong>Creating outputs</strong></p>\n<p>It's possible to create multiple new work items as an output from a\ntask. With the keyword <tt class=\"docutils literal\">Create Output Work Item</tt> a new empty item\nis created as a child for the currently loaded input.</p>\n<p>All created output items are sent into the input queue of the next\nstep in the process.</p>\n<p><strong>Active work item</strong></p>\n<p>Keywords that read or write from a work item always operate on the currently\nactive work item. Usually that is the input item that has been automatically\nloaded when the execution started, but the currently active item is changed\nwhenever the keywords <tt class=\"docutils literal\">Create Output Work Item</tt> or <tt class=\"docutils literal\">Get Input Work Item</tt>\nare called. It's also possible to change the active item manually with the\nkeyword <tt class=\"docutils literal\">Set current work item</tt>.</p>\n<p><strong>Saving changes</strong></p>\n<p>While a work item is loaded automatically when a suite starts, changes are\nnot automatically reflected back to the source. The work item will be modified\nlocally and then saved when the keyword <tt class=\"docutils literal\">Save Work Item</tt> is called.\nThis also applies to created output work items.</p>\n<p>It is recommended to defer saves until all changes have been made to prevent\nleaving work items in a half-modified state in case of failures.</p>\n<p><strong>Local Development</strong></p>\n<p>While Control Room is the default implementation, it can also be replaced\nwith a custom adapter. The selection is based on either the <tt class=\"docutils literal\">default_adapter</tt>\nargument for the library, or the <tt class=\"docutils literal\">RPA_WORKITEMS_ADAPTER</tt> environment\nvariable. The library has a built-in alternative adapter called FileAdapter for\nstoring work items to disk.</p>\n<p>The FileAdapter uses a local JSON file for input work items.\nIt's a list of work items, each of which has a data payload and files.</p>\n<p>An example of a local file with one work item:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;payload&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;variable1&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;a-string-value&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;variable2&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;list&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">&quot;value&quot;</span><span class=\"p\">]</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;files&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;file1&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;path/to/file.ext&quot;</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">]</span>\n</pre>\n<p>Output work items (if any) are saved to an adjacent file\nwith the same name, but with the extension <tt class=\"docutils literal\">.output.json</tt>. You can specify\nthrough the &quot;RPA_OUTPUT_WORKITEM_PATH&quot; env var a different path and name for this\nfile.</p>\n<p><strong>Simulating the Cloud with Robocorp Code VSCode Extension</strong></p>\n<p>If you are developing in VSCode with the <a class=\"reference external\" href=\"https://robocorp.com/docs/setup/development-environment#visual-studio-code-with-robocorp-extensions\">Robocorp Code extension</a>, you can\nutilize the built in local development features described in the\n<a class=\"reference external\" href=\"https://robocorp.com/docs/development-guide/control-room/work-items#developing-with-work-items-locally\">Developing with work items locally</a> section of the\n<a class=\"reference external\" href=\"https://robocorp.com/docs/development-guide/control-room/work-items\">Using work items</a> development guide.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<p>In the following example a task creates an output work item,\nand attaches some variables to it.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.WorkItems</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Save variables to Control Room</span><span class=\"p\">\n    </span><span class=\"nf\">Create Output Work Item</span><span class=\"p\">\n    </span><span class=\"nf\">Set work item variables</span><span class=\"p\">    </span><span class=\"s\">user=Dude</span><span class=\"p\">    </span><span class=\"s\">mail=address&#64;company.com</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n<p>In the next step of the process inside a different robot, we can use\npreviously saved work item variables. Also note how the input work item is\nloaded implicitly when the suite starts.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Robocorp.WorkItems</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Use variables from Control Room</span><span class=\"p\">\n    </span><span class=\"nf\">Set task variables from work item</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Variables are now available: s</span><span class=\"p\">${</span><span class=\"nv\">user</span><span class=\"p\">}</span><span class=\"s\">, </span><span class=\"p\">${</span><span class=\"nv\">mail</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python</strong></p>\n<p>The library can also be used through Python, but it does not implicitly\nload the first work item.</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">list_variables</span><span class=\"p\">(</span><span class=\"n\">item_id</span><span class=\"p\">):</span><span class=\"w\">\n</span>    <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n</span>    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n\n</span>    <span class=\"n\">variables</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_work_item_variables</span><span class=\"p\">()</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">variables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span><span class=\"w\">\n</span>        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">variable</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:10:07",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
  "lineno": 729,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "autoload",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "autoload: bool = True"
        },
        {
          "name": "root",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "root: str | None = None"
        },
        {
          "name": "default_adapter",
          "types": [
            "Type[BaseAdapter]",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "<class 'RPA.Robocorp.WorkItems.RobocorpAdapter'>",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "default_adapter: Type[BaseAdapter] | str = <class 'RPA.Robocorp.WorkItems.RobocorpAdapter'>"
        },
        {
          "name": "auto_parse_email",
          "types": [
            "Dict[str | Tuple[str, Ellipsis], str | Tuple[str, Ellipsis]]",
            "None"
          ],
          "typedocs": {
            "Dict[str | Tuple[str, Ellipsis], str | Tuple[str, Ellipsis]]": "dictionary",
            "None": "None"
          },
          "defaultValue": "{('email.text', '__mail.html'): ('email.body', 'parsedEmail.Body'), 'rawEmail': 'parsedEmail'}",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "auto_parse_email: Dict[str | Tuple[str, Ellipsis], str | Tuple[str, Ellipsis]] | None = {('email.text', '__mail.html'): ('email.body', 'parsedEmail.Body'), 'rawEmail': 'parsedEmail'}"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
      "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 935
    }
  ],
  "keywords": [
    {
      "name": "Add Work Item File",
      "args": [
        {
          "name": "path",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "path"
        },
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "name=None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Add given file to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Path to file on disk</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Destination name for file. If not given, current name\nof local file is used.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not uploaded before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Add work item file</span><span class=\"p\">    </span><span class=\"s\">output.xls</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n</div>\n",
      "shortdoc": "Add given file to work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1591
    },
    {
      "name": "Add Work Item Files",
      "args": [
        {
          "name": "pattern",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "pattern"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Add all files that match given pattern to work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Path wildcard pattern</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Add work item files</span><span class=\"p\">    %{</span><span class=\"nv\">ROBOT_ROOT</span><span class=\"p\">}</span><span class=\"s\">/generated/*.csv</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n</div>\n",
      "shortdoc": "Add all files that match given pattern to work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1665
    },
    {
      "name": "Clear Work Item",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Remove all data and files in the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Clearing a work item</span><span class=\"p\">\n    </span><span class=\"nf\">Clear work item</span><span class=\"p\">\n    </span><span class=\"nf\">Save work item</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"n\">wi</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">clear_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">save_work_item</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove all data and files in the current work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1302
    },
    {
      "name": "Create Output Work Item",
      "args": [
        {
          "name": "variables",
          "types": [
            "dict",
            "None"
          ],
          "typedocs": {
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "variables: dict | None = None"
        },
        {
          "name": "files",
          "types": [
            "str",
            "List[str]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "files: str | List[str] | None = None"
        },
        {
          "name": "save",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "save: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create a new output work item with optional variables and files.</p>\n<p>An output work item is always created as a child for an input item, therefore\na non-released input is required to be loaded first.\nAll changes to the work item are done locally and are sent to the output queue\nafter the keyword <tt class=\"docutils literal\">Save Work Item</tt> is called only, except when <cite>save</cite> is\n<cite>True</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param variables:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Optional dictionary with variables to be set into the new\noutput work item.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">Optional list or comma separated paths to files to be included\ninto the new output work item.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param save:</th><td class=\"field-body\">Automatically call <tt class=\"docutils literal\">Save Work Item</tt> over the newly created\noutput work item.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">The newly created output work item object.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Create output items with variables then save</span><span class=\"p\">\n    ${</span><span class=\"nv\">customers</span><span class=\"p\">} =  </span><span class=\"nf\">Load customer data</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">     ${</span><span class=\"nv\">customer</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">customers</span><span class=\"p\">}\n        </span><span class=\"nf\">Create Output Work Item</span><span class=\"p\">\n        </span><span class=\"nf\">Set Work Item Variables</span><span class=\"p\">    </span><span class=\"s\">id=</span><span class=\"p\">${</span><span class=\"nv\">customer.id</span><span class=\"p\">}\n        ...     </span><span class=\"s\">name=</span><span class=\"p\">${</span><span class=\"nv\">customer.name</span><span class=\"p\">}\n        </span><span class=\"nf\">Save Work Item</span><span class=\"p\">\n    </span><span class=\"nf\">END</span><span class=\"p\">\n\n</span><span class=\"gu\">Create and save output items with variables and files in one go</span><span class=\"p\">\n    ${</span><span class=\"nv\">customers</span><span class=\"p\">} =  </span><span class=\"nf\">Load customer data</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">     ${</span><span class=\"nv\">customer</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">customers</span><span class=\"p\">}\n        &amp;{</span><span class=\"nv\">customer_vars</span><span class=\"p\">} =    </span><span class=\"nf\">Create Dictionary</span><span class=\"p\">    </span><span class=\"s\">id=</span><span class=\"p\">${</span><span class=\"nv\">customer.id</span><span class=\"p\">}\n        ...     </span><span class=\"s\">name=</span><span class=\"p\">${</span><span class=\"nv\">customer.name</span><span class=\"p\">}\n        </span><span class=\"nf\">Create Output Work Item</span><span class=\"p\">     </span><span class=\"s\">variables=</span><span class=\"p\">${</span><span class=\"nv\">customer_vars</span><span class=\"p\">}\n        ...     </span><span class=\"s\">files=devdata</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">report.csv</span><span class=\"p\">   </span><span class=\"s\">save=</span><span class=\"p\">${</span><span class=\"nv\">True</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"n\">wi</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">get_work_item_variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;customers&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">customer</span> <span class=\"ow\">in</span> <span class=\"n\">customers</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">create_output_work_item</span><span class=\"p\">(</span><span class=\"n\">customer</span><span class=\"p\">,</span> <span class=\"n\">save</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Create a new output work item with optional variables and files.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1204
    },
    {
      "name": "Delete Work Item Variables",
      "args": [
        {
          "name": "names",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*names"
        },
        {
          "name": "force",
          "types": [],
          "typedocs": {},
          "defaultValue": "True",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "force=True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete variable(s) from the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param names:</th><td class=\"field-body\">Names of variables to remove</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param force:</th><td class=\"field-body\">Ignore variables that don't exist in work item</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Delete work item variables</span><span class=\"p\">    </span><span class=\"s\">username</span><span class=\"p\">    </span><span class=\"s\">email</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n</div>\n",
      "shortdoc": "Delete variable(s) from the current work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1509
    },
    {
      "name": "For Each Input Work Item",
      "args": [
        {
          "name": "keyword_or_func",
          "types": [
            "str",
            "Callable"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "keyword_or_func: str | Callable"
        },
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        },
        {
          "name": "items_limit",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "0",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "items_limit: int = 0"
        },
        {
          "name": "return_results",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "NAMED_ONLY",
          "required": false,
          "repr": "return_results: bool = True"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Run a keyword or function for each work item in the input queue.</p>\n<p>Automatically collects and returns a list of results, switch\n<tt class=\"docutils literal\">return_results</tt> to <tt class=\"docutils literal\">False</tt> for avoiding this.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param keyword_or_func:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The RF keyword or Py function you want to map through\nall the work items</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">Variable list of arguments that go into the called keyword/function</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">Variable list of keyword arguments that go into the called\nkeyword/function</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param items_limit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Limit the queue item retrieval to a certain amount,\notherwise all the items are retrieved from the queue until depletion</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param return_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Collect and return a list of results given each\nkeyword/function call if truthy</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Log Payloads</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">lengths</span><span class=\"p\">} =     </span><span class=\"nf\">For Each Input Work Item</span><span class=\"p\">    </span><span class=\"s\">Log Payload</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">   </span><span class=\"s\">Payload lengths: </span><span class=\"p\">&#64;{</span><span class=\"nv\">lengths</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Log Payload</span><span class=\"p\">\n    ${</span><span class=\"nv\">payload</span><span class=\"p\">} =     </span><span class=\"nf\">Get Work Item Payload</span><span class=\"p\">\n    </span><span class=\"nf\">Log To Console</span><span class=\"p\">    ${</span><span class=\"nv\">payload</span><span class=\"p\">}\n    ${</span><span class=\"nv\">len</span><span class=\"p\">} =     </span><span class=\"nf\">Get Length</span><span class=\"p\">    ${</span><span class=\"nv\">payload</span><span class=\"p\">}\n    [</span><span class=\"kn\">Return</span><span class=\"p\">]    ${</span><span class=\"nv\">len</span><span class=\"p\">}</span>\n</pre>\n<p>OR</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">log_payload</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_work_item_payload</span><span class=\"p\">()</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">log_payloads</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span>    <span class=\"n\">lengths</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">for_each_input_work_item</span><span class=\"p\">(</span><span class=\"n\">log_payload</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">&quot;Payload lengths: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">lengths</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"n\">log_payloads</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Run a keyword or function for each work item in the input queue.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1733
    },
    {
      "name": "Get Current Work Item",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get the currently active work item.</p>\n<p>The current work item is used as the target by other keywords\nin this library.</p>\n<p>Keywords <tt class=\"docutils literal\">Get Input Work Item</tt> and <tt class=\"docutils literal\">Create Output Work Item</tt>\nset the active work item automatically, and return the created\ninstance.</p>\n<p>With this keyword the active work item can be retrieved manually.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">input</span><span class=\"p\">} =    </span><span class=\"nf\">Get Current Work Item</span><span class=\"p\">\n    ${</span><span class=\"nv\">output</span><span class=\"p\">} =   </span><span class=\"nf\">Create Output Work Item</span><span class=\"p\">\n    </span><span class=\"nf\">Set Current Work Item</span><span class=\"p\">    ${</span><span class=\"nv\">input</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get the currently active work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1945
    },
    {
      "name": "Get Input Work Item",
      "args": [
        {
          "name": "_internal_call",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "_internal_call: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Load the next work item from the input queue, and set it as the active work\nitem.</p>\n<p>Each time this is called, the previous input work item is released (as DONE)\nprior to reserving the next one.\nIf the library import argument <tt class=\"docutils literal\">autoload</tt> is truthy (default),\nthis is called automatically when the Robot Framework suite\nstarts.</p>\n</div>\n",
      "shortdoc": "Load the next work item from the input queue, and set it as the active work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1174
    },
    {
      "name": "Get Work Item File",
      "args": [
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        },
        {
          "name": "path",
          "types": [],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "path=None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get attached file from work item to disk.\nReturns the absolute path to the created file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param path:</th><td class=\"field-body\">Destination path of file. If not given, current\nworking directory is used.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">path</span><span class=\"p\">}=    </span><span class=\"nf\">Get work item file</span><span class=\"p\">    </span><span class=\"s\">input.xls</span><span class=\"p\">\n    </span><span class=\"nf\">Open workbook</span><span class=\"p\">    ${</span><span class=\"nv\">path</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get attached file from work item to disk. Returns the absolute path to the created file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1569
    },
    {
      "name": "Get Work Item Files",
      "args": [
        {
          "name": "pattern",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "pattern"
        },
        {
          "name": "dirname",
          "types": [],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "dirname=None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get files attached to work item that match given pattern.\nReturns a list of absolute paths to the downloaded files.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param dirname:</th><td class=\"field-body\">Destination directory, if not given robot root is used</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">paths</span><span class=\"p\">}=    </span><span class=\"nf\">Get work item files</span><span class=\"p\">    </span><span class=\"s\">customer_*.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">  ${</span><span class=\"nv\">path</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">  &#64;{</span><span class=\"nv\">paths</span><span class=\"p\">}\n        </span><span class=\"nf\">Handle customer file</span><span class=\"p\">    ${</span><span class=\"nv\">path</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Get files attached to work item that match given pattern. Returns a list of absolute paths to the downloaded files.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1634
    },
    {
      "name": "Get Work Item Payload",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get the full JSON payload for a work item.</p>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">payload</span><span class=\"p\">}=    </span><span class=\"nf\">Get work item payload</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Entire payload as dictionary: </span><span class=\"p\">${</span><span class=\"nv\">payload</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get the full JSON payload for a work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1327
    },
    {
      "name": "Get Work Item Variable",
      "args": [
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        },
        {
          "name": "default",
          "types": [],
          "typedocs": {},
          "defaultValue": "<object object at 0x76778478a250>",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "default=<object object at 0x76778478a250>"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return a single variable value from the work item,\nor default value if defined and key does not exist.</p>\n<p>If key does not exist and default is not defined, raises <cite>KeyError</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Default value if key does not exist</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Using a work item</span><span class=\"p\">\n    ${</span><span class=\"nv\">username</span><span class=\"p\">}=    </span><span class=\"nf\">Get work item variable</span><span class=\"p\">    </span><span class=\"s\">username</span><span class=\"p\">    </span><span class=\"s\">default=guest</span>\n</pre>\n<p>Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"n\">wi</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">get_work_item_variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;customers&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">customers</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Return a single variable value from the work item, or default value if defined and key does not exist.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1385
    },
    {
      "name": "Get Work Item Variables",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Read all variables from the current work item and\nreturn their names and values as a dictionary.</p>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">variables</span><span class=\"p\">}=    </span><span class=\"nf\">Get work item variables</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Username: </span><span class=\"p\">${</span><span class=\"nv\">variables</span><span class=\"p\">}</span><span class=\"s\">[username], Email: </span><span class=\"p\">${</span><span class=\"nv\">variables</span><span class=\"p\">}</span><span class=\"s\">[email]</span>\n</pre>\n<p>Python Example:</p>\n<blockquote>\nfrom RPA.Robocorp.WorkItems import WorkItems\nwi = WorkItems()\nwi.get_input_work_item()\ninput_wi = wi.get_work_item_variables()\nprint(input_wi[&quot;username&quot;])\nprint(input_wi[&quot;email&quot;])</blockquote>\n</div>\n",
      "shortdoc": "Read all variables from the current work item and return their names and values as a dictionary.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1423
    },
    {
      "name": "List Work Item Files",
      "args": [],
      "doc": "<div class=\"document\">\n<p>List the names of files attached to the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">names</span><span class=\"p\">}=    </span><span class=\"nf\">List work item files</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Work item has files with names: </span><span class=\"p\">${</span><span class=\"nv\">names</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "List the names of files attached to the current work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1554
    },
    {
      "name": "List Work Item Variables",
      "args": [],
      "doc": "<div class=\"document\">\n<p>List the variable names for the current work item.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">variables</span><span class=\"p\">}=    </span><span class=\"nf\">List work item variables</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Available variables in work item: </span><span class=\"p\">${</span><span class=\"nv\">variables</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "List the variable names for the current work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1369
    },
    {
      "name": "Release Input Work Item",
      "args": [
        {
          "name": "state",
          "types": [
            "State",
            "str"
          ],
          "typedocs": {
            "State": "State",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "state: State | str"
        },
        {
          "name": "exception_type",
          "types": [
            "Error",
            "str",
            "None"
          ],
          "typedocs": {
            "Error": "Error",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "exception_type: Error | str | None = None"
        },
        {
          "name": "code",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "code: str | None = None"
        },
        {
          "name": "message",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "message: str | None = None"
        },
        {
          "name": "_internal_release",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "_internal_release: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Release the lastly retrieved input work item and set its state.</p>\n<p>This can be released with DONE or FAILED states. With the FAILED state, an\nadditional exception can be sent to Control Room describing the problem that\nyou encountered by specifying a type and optionally a code and/or message.\nAfter this has been called, no more output work items can be created\nunless a new input work item has been loaded again.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param state:</th><td class=\"field-body\">The status on the last processed input work item</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param exception_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Error type (BUSINESS, APPLICATION). If this is not\nspecified, then the cloud will assume UNSPECIFIED</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param code:</th><td class=\"field-body\">Optional error code identifying the exception for future\nfiltering, grouping and custom retrying behaviour in the cloud</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">Optional human-friendly error message supplying additional\ndetails regarding the sent exception</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Login into portal</span><span class=\"p\">\n        ${</span><span class=\"nv\">user</span><span class=\"p\">} =     </span><span class=\"nf\">Get Work Item Variable</span><span class=\"p\">    </span><span class=\"s\">user</span><span class=\"p\">\n        ${</span><span class=\"nv\">doc</span><span class=\"p\">} =    </span><span class=\"nf\">Get Work Item Variable</span><span class=\"p\">    </span><span class=\"s\">doc</span><span class=\"p\">\n        </span><span class=\"nf\">TRY</span><span class=\"p\">\n            </span><span class=\"nf\">Login Keyword</span><span class=\"p\">    ${</span><span class=\"nv\">user</span><span class=\"p\">}\n            </span><span class=\"nf\">Upload Doc Keyword</span><span class=\"p\">    ${</span><span class=\"nv\">doc</span><span class=\"p\">}\n\n        </span><span class=\"nf\">EXCEPT</span><span class=\"p\">    </span><span class=\"s\">Login Failed</span><span class=\"p\">\n            </span><span class=\"nf\">Release Input Work Item</span><span class=\"p\">     </span><span class=\"s\">FAILED</span><span class=\"p\">\n            ...    </span><span class=\"s\">exception_type=APPLICATION</span><span class=\"p\">\n            ...    </span><span class=\"s\">code=LOGIN_PORTAL_DOWN</span><span class=\"p\">\n            ...    </span><span class=\"s\">message=Unable to login, retry again later.</span><span class=\"p\">\n\n        </span><span class=\"nf\">EXCEPT</span><span class=\"p\">    </span><span class=\"s\">Format Error</span><span class=\"p\">    </span><span class=\"s\">AS</span><span class=\"p\">    ${</span><span class=\"nv\">err</span><span class=\"p\">}\n            ${</span><span class=\"nv\">message</span><span class=\"p\">} =    </span><span class=\"nf\">Catenate</span><span class=\"p\">\n            ...    </span><span class=\"s\">Document format is not correct and cannot be uploaded.</span><span class=\"p\">\n            ...    </span><span class=\"s\">Correct the format in this work item and try again.</span><span class=\"p\">\n            ...    </span><span class=\"s\">Full error message received: </span><span class=\"p\">${</span><span class=\"nv\">err</span><span class=\"p\">}\n            </span><span class=\"nf\">Release Input Work Item</span><span class=\"p\">     </span><span class=\"s\">FAILED</span><span class=\"p\">\n            ...    </span><span class=\"s\">exception_type=BUSINESS</span><span class=\"p\">\n            ...    </span><span class=\"s\">code=DOC_FORMAT_ERROR</span><span class=\"p\">\n            ...    </span><span class=\"s\">message=</span><span class=\"p\">${</span><span class=\"nv\">message</span><span class=\"p\">}\n\n        </span><span class=\"nf\">END</span>\n</pre>\n<p>OR</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">State</span><span class=\"p\">,</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">def</span> <span class=\"nf\">process_and_set_state</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span>    <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">release_input_work_item</span><span class=\"p\">(</span><span class=\"n\">State</span><span class=\"o\">.</span><span class=\"n\">DONE</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"p\">)</span>  <span class=\"c1\"># would print &quot;State.DONE&quot;</span><span class=\"w\">\n\n</span><span class=\"n\">process_and_set_state</span><span class=\"p\">()</span>\n</pre>\n</div>\n",
      "shortdoc": "Release the lastly retrieved input work item and set its state.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1825
    },
    {
      "name": "Remove Work Item File",
      "args": [
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        },
        {
          "name": "missing_ok",
          "types": [],
          "typedocs": {},
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "missing_ok=True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Remove attached file from work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of attached file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Files are not deleted before work item is saved</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Remove work item file</span><span class=\"p\">    </span><span class=\"s\">input.xls</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n</div>\n",
      "shortdoc": "Remove attached file from work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1613
    },
    {
      "name": "Remove Work Item Files",
      "args": [
        {
          "name": "pattern",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "pattern"
        },
        {
          "name": "missing_ok",
          "types": [],
          "typedocs": {},
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "missing_ok=True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Removes files attached to work item that match the given pattern.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param pattern:</th><td class=\"field-body\">Filename wildcard pattern</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param missing_ok:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Do not raise exception if file doesn't exist</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Remove work item files</span><span class=\"p\">    </span><span class=\"s\">*.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n</div>\n",
      "shortdoc": "Removes files attached to work item that match the given pattern.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1690
    },
    {
      "name": "Save Work Item",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Save the current data and files in the work item. If not saved,\nall changes are discarded when the library goes out of scope.</p>\n</div>\n",
      "shortdoc": "Save the current data and files in the work item. If not saved, all changes are discarded when the library goes out of scope.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1295
    },
    {
      "name": "Set Current Work Item",
      "args": [
        {
          "name": "item",
          "types": [
            "WorkItem"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "item: WorkItem"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set the currently active work item.</p>\n<p>The current work item is used as the target by other keywords\nin this library.</p>\n<p>Keywords <tt class=\"docutils literal\">Get Input Work Item</tt> and <tt class=\"docutils literal\">Create Output Work Item</tt>\nset the active work item automatically, and return the created\ninstance.</p>\n<p>With this keyword the active work item can be set manually.</p>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Creating outputs</span><span class=\"p\">\n    ${</span><span class=\"nv\">input</span><span class=\"p\">}=    </span><span class=\"nf\">Get Input Work Item</span><span class=\"p\">\n    ${</span><span class=\"nv\">output</span><span class=\"p\">}=   </span><span class=\"nf\">Create Output Work Item</span><span class=\"p\">\n    </span><span class=\"nf\">Set current work item</span><span class=\"p\">    ${</span><span class=\"nv\">input</span><span class=\"p\">}</span>\n</pre>\n<p>Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"n\">wi</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">parent_wi</span> <span class=\"o\">=</span> <span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">child_wi</span> <span class=\"o\">=</span> <span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">create_output_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">set_current_work_item</span><span class=\"p\">(</span><span class=\"n\">parent_wi</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set the currently active work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1137
    },
    {
      "name": "Set Task Variables From Work Item",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Convert all variables in the current work item to\nRobot Framework task variables, see <a class=\"reference external\" href=\"https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#variable-scopes\">variable scopes</a>.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"c\"># Work item has variable INPUT_URL\n</span><span class=\"p\">    </span><span class=\"nf\">Set task variables from work item</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">The variable is now available: </span><span class=\"p\">${</span><span class=\"nv\">INPUT_URL</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Convert all variables in the current work item to Robot Framework task variables, see `variable scopes`_.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1533
    },
    {
      "name": "Set Work Item Payload",
      "args": [
        {
          "name": "payload",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "payload"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set the full JSON payload for a work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param payload:</th><td class=\"field-body\">Content of payload, must be JSON-serializable</td>\n</tr>\n</tbody>\n</table>\n<p><strong>NOTE</strong>: Most use cases should prefer higher-level keywords.\nUsing this keyword may cause errors when getting the payload via\nthe normal <tt class=\"docutils literal\">Get work item variable</tt> and\n<tt class=\"docutils literal\">Get work item variables</tt> keywords if you do not set the payload\nto a <tt class=\"docutils literal\">dict</tt>.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    ${</span><span class=\"nv\">output</span><span class=\"p\">}=    </span><span class=\"nf\">Create dictionary</span><span class=\"p\">    </span><span class=\"s\">url=example.com</span><span class=\"p\">    </span><span class=\"s\">username=Mark</span><span class=\"p\">\n    </span><span class=\"nf\">Set work item payload</span><span class=\"p\">    ${</span><span class=\"nv\">output</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Set the full JSON payload for a work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1344
    },
    {
      "name": "Set Work Item Variable",
      "args": [
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        },
        {
          "name": "value",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set a single variable value in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">Value of variable</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Set work item variable</span><span class=\"p\">    </span><span class=\"s\">username</span><span class=\"p\">    </span><span class=\"s\">MarkyMark</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n<p>Python Example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.WorkItems</span> <span class=\"kn\">import</span> <span class=\"n\">WorkItems</span><span class=\"w\">\n\n</span><span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Apple&quot;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Microsoft&quot;</span><span class=\"p\">}]</span><span class=\"w\">\n</span><span class=\"n\">wi</span> <span class=\"o\">=</span> <span class=\"n\">WorkItems</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">get_input_work_item</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">wi</span><span class=\"o\">.</span><span class=\"n\">set_work_item_variable</span><span class=\"p\">(</span><span class=\"s2\">&quot;customers&quot;</span><span class=\"p\">,</span> <span class=\"n\">customers</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Set a single variable value in the current work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1458
    },
    {
      "name": "Set Work Item Variables",
      "args": [
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set multiple variables in the current work item.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">Pairs of variable names and values</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Example task</span><span class=\"p\">\n    </span><span class=\"nf\">Set work item variables</span><span class=\"p\">    </span><span class=\"s\">username=MarkyMark</span><span class=\"p\">    </span><span class=\"s\">email=mark&#64;example.com</span><span class=\"p\">\n    </span><span class=\"nf\">Save Work Item</span>\n</pre>\n</div>\n",
      "shortdoc": "Set multiple variables in the current work item.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Robocorp/WorkItems.py",
      "lineno": 1489
    }
  ],
  "dataTypes": {
    "enums": [
      {
        "type": "Enum",
        "name": "Error",
        "doc": "<div class=\"document\">\n<p>Failed work item error type.</p>\n</div>\n",
        "members": [
          {
            "name": "BUSINESS",
            "value": "BUSINESS"
          },
          {
            "name": "APPLICATION",
            "value": "APPLICATION"
          }
        ]
      },
      {
        "type": "Enum",
        "name": "State",
        "doc": "<div class=\"document\">\n<p>Work item state. (set when released)</p>\n</div>\n",
        "members": [
          {
            "name": "DONE",
            "value": "COMPLETED"
          },
          {
            "name": "FAILED",
            "value": "FAILED"
          }
        ]
      }
    ],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "__init__",
        "Create Output Work Item",
        "For Each Input Work Item",
        "Get Input Work Item",
        "Release Input Work Item"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "__init__",
        "Create Output Work Item"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Enum",
      "name": "Error",
      "doc": "<div class=\"document\">\n<p>Failed work item error type.</p>\n</div>\n",
      "usages": [
        "Release Input Work Item"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "BUSINESS",
          "value": "BUSINESS"
        },
        {
          "name": "APPLICATION",
          "value": "APPLICATION"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "For Each Input Work Item"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Create Output Work Item"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "__init__",
        "Create Output Work Item",
        "Release Input Work Item"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Enum",
      "name": "State",
      "doc": "<div class=\"document\">\n<p>Work item state. (set when released)</p>\n</div>\n",
      "usages": [
        "Release Input Work Item"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "DONE",
          "value": "COMPLETED"
        },
        {
          "name": "FAILED",
          "value": "FAILED"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "__init__",
        "Create Output Work Item",
        "For Each Input Work Item",
        "Release Input Work Item"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}