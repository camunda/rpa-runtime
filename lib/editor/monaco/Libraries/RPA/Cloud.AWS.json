{
  "specversion": 1,
  "name": "RPA.Cloud.AWS",
  "doc": "<div class=\"document\">\n<p><cite>AWS</cite> is a library for operating with Amazon AWS services S3, SQS,\nTextract and Comprehend.</p>\n<p>Services are initialized with keywords like <tt class=\"docutils literal\">Init S3 Client</tt> for S3.</p>\n<p><strong>AWS authentication</strong></p>\n<p>Authentication for AWS is set with <cite>key id</cite> and <cite>access key</cite> which can be given to the library\nin three different ways.</p>\n<ul class=\"simple\">\n<li>Method 1 as environment variables, <tt class=\"docutils literal\">AWS_KEY_ID</tt> and <tt class=\"docutils literal\">AWS_KEY</tt>.</li>\n<li>Method 2 as keyword parameters to <tt class=\"docutils literal\">Init Textract Client</tt> for example.</li>\n<li>Method 3 as Robocorp vault secret. The vault name needs to be given in library init or\nwith keyword <tt class=\"docutils literal\">Set Robocorp Vault</tt>. Secret keys are expected to match environment variable\nnames.</li>\n</ul>\n<p><strong>Note.</strong> Starting from <cite>rpaframework-aws</cite> <strong>1.0.3</strong> <cite>region</cite> can be given as environment\nvariable <tt class=\"docutils literal\">AWS_REGION</tt> or include as Robocorp Vault secret with the same key name.</p>\n<p><strong>Redshift Data authentication:</strong> Depending on the authorization method, use\none of the following combinations of request parameters, which can only\nbe passed via method 2:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>Secrets Manager - when connecting to a cluster, specify the Amazon\nResource Name (ARN) of the secret, the database name, and the\ncluster identifier that matches the cluster in the secret. When\nconnecting to a serverless endpoint, specify the Amazon Resource\nName (ARN) of the secret and the database name.</li>\n<li>Temporary credentials - when connecting to a cluster, specify the\ncluster identifier, the database name, and the database user name.\nAlso, permission to call the <tt class=\"docutils literal\">redshift:GetClusterCredentials</tt>\noperation is required. When connecting to a serverless endpoint,\nspecify the database name.</li>\n</ul>\n</blockquote>\n<p><strong>Role Assumption:</strong> With the use of the STS service client, you are able\nto assume another role, which will return temporary credentials. The\ntemporary credentials will include an access key and session token, see\nkeyword documentation for <tt class=\"docutils literal\">Assume Role</tt> for details of how the\ncredentials are returned. You can use these temporary credentials\nas part of method 2, but you must also include the session token.</p>\n<p>Method 1. credentials using environment variable</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"c\"># NO parameters for client, expecting to get credentials\n</span><span class=\"p\">    </span><span class=\"c\"># with AWS_KEY, AWS_KEY_ID and AWS_REGION environment variables\n</span><span class=\"p\">    </span><span class=\"nf\">Init S3 Client</span>\n</pre>\n<p>Method 2. credentials with keyword parameter</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">   </span><span class=\"s\">region=us-east-1</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">  </span><span class=\"s\">aws_key_id=</span><span class=\"p\">${</span><span class=\"nv\">AWS_KEY_ID</span><span class=\"p\">}  </span><span class=\"s\">aws_key=</span><span class=\"p\">${</span><span class=\"nv\">AWS_KEY</span><span class=\"p\">}</span>\n</pre>\n<p>Method 3. setting Robocorp Vault in the library init</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">  </span><span class=\"s\">robocorp_vault_name=aws</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">  </span><span class=\"s\">use_robocorp_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p>Method 3. setting Robocorp Vault with keyword</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Init AWS services</span><span class=\"p\">\n    </span><span class=\"nf\">Set Robocorp Vault</span><span class=\"p\">     </span><span class=\"s\">vault_name=aws</span><span class=\"p\">\n    </span><span class=\"nf\">Init Textract Client</span><span class=\"p\">    </span><span class=\"s\">use_robocorp_vault=</span><span class=\"p\">${</span><span class=\"nv\">TRUE</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Requirements</strong></p>\n<p>The default installation depends on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/index.html\">boto3</a> library. Due to the size of the\ndependency, this library is available separate package <tt class=\"docutils literal\"><span class=\"pre\">rpaframework-aws</span></tt> but can\nalso be installed as an optional package for <tt class=\"docutils literal\">rpaframework</tt>.</p>\n<p>Recommended installation is <cite>rpaframework-aws</cite> plus <cite>rpaframework</cite> package.\nRemember to check latest versions from <a class=\"reference external\" href=\"https://github.com/robocorp/rpaframework\">rpaframework Github repository</a>.</p>\n<pre class=\"code yaml literal-block\">\n<span class=\"nt\">channels</span><span class=\"p\">:</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">conda-forge</span><span class=\"w\">\n</span><span class=\"nt\">dependencies</span><span class=\"p\">:</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">python=3.7.5</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">pip=20.1</span><span class=\"w\">\n  </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">pip</span><span class=\"p\">:</span><span class=\"w\">\n    </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">rpaframework==13.0.2</span><span class=\"w\">\n    </span><span class=\"p-Indicator\">-</span><span class=\"w\"> </span><span class=\"l-Scalar-Plain\">rpaframework-aws==1.0.3</span>\n</pre>\n<p><strong>Example</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">   </span><span class=\"nn\">RPA.Cloud.AWS</span><span class=\"p\">   </span><span class=\"s\">region=us-east-1</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}        </span><span class=\"s\">testbucket12213123123</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Upload a file into S3 bucket</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]   </span><span class=\"nf\">Init S3 Client</span><span class=\"p\">\n    </span><span class=\"nf\">Upload File</span><span class=\"p\">      ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}   ${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">path</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">to</span><span class=\"p\">${</span><span class=\"nv\">/</span><span class=\"p\">}</span><span class=\"s\">file.pdf</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}         </span><span class=\"nf\">List Files</span><span class=\"p\">   ${</span><span class=\"nv\">BUCKET_NAME</span><span class=\"p\">}\n    </span><span class=\"nf\">FOR</span><span class=\"p\">   ${</span><span class=\"nv\">file</span><span class=\"p\">}  </span><span class=\"s\">IN</span><span class=\"p\">   &#64;{</span><span class=\"nv\">files</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">  ${</span><span class=\"nv\">file</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:42",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
  "lineno": 1884,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "region",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "eu-west-1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "region: str = eu-west-1"
        },
        {
          "name": "robocorp_vault_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "robocorp_vault_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize self.  See help(type(self)) for accurate signature.</p>\n</div>\n",
      "shortdoc": "Initialize self.  See help(type(self)) for accurate signature.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 2028
    }
  ],
  "keywords": [
    {
      "name": "Analyze Document",
      "args": [
        {
          "name": "image_file",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "image_file: str | None = None"
        },
        {
          "name": "json_file",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "json_file: str | None = None"
        },
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        },
        {
          "name": "model",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "model: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Analyzes an input document for relationships between detected items</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath (or object name) of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to resulting json file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then using <cite>image_file</cite> from the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param model:</th><td class=\"field-body\">set <cite>True</cite> to return Textract Document model, default <cite>False</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response in json or TextractDocument model</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Analyze Document</span><span class=\"p\">    </span><span class=\"c\">${filename}</span><span class=\"p\">    </span><span class=\"c\">model=True</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{response.pages}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.tables}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n    </span><span class=\"c\">Log Lines</span><span class=\"p\">    </span><span class=\"c\">${page.lines}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Analyzes an input document for relationships between detected items",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 618
    },
    {
      "name": "Assume Role",
      "args": [
        {
          "name": "role_arn",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "role_arn: str"
        },
        {
          "name": "role_session_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "role_session_name: str"
        },
        {
          "name": "policy_arns",
          "types": [
            "List[Dict]",
            "None"
          ],
          "typedocs": {
            "List[Dict]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "policy_arns: List[Dict] | None = None"
        },
        {
          "name": "policy",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "policy: str | None = None"
        },
        {
          "name": "duration",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "900",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "duration: int = 900"
        },
        {
          "name": "tags",
          "types": [
            "List[Dict]",
            "None"
          ],
          "typedocs": {
            "List[Dict]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "tags: List[Dict] | None = None"
        },
        {
          "name": "transitive_tag_keys",
          "types": [
            "List[str]",
            "None"
          ],
          "typedocs": {
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "transitive_tag_keys: List[str] | None = None"
        },
        {
          "name": "external_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "external_id: str | None = None"
        },
        {
          "name": "serial_number",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "serial_number: str | None = None"
        },
        {
          "name": "token_code",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "token_code: str | None = None"
        },
        {
          "name": "source_identity",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "source_identity: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Returns a set of temporary security credentials that you can\nuse to access Amazon Web Services resources that you might not\nnormally have access to. These temporary credentials consist of\nan access key ID, a secret access key, and a security token.\nTypically, you use <tt class=\"docutils literal\">Assume Role</tt> within your account or for\ncross-account access.</p>\n<p>The credentials are returned as a dictionary with data structure\nsimilar to the following JSON:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;Credentials&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;AccessKeyId&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;SecretAccessKey&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;SessionToken&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;Expiration&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;2015-01-01&quot;</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;AssumedRoleUser&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;AssumedRoleId&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;Arn&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;PackedPolicySize&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;SourceIdentity&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<p>These credentials can be used to re-initialize services available\nin this library with the assumed role instead of the original\nrole.</p>\n<p><strong>NOTE</strong>: For detailed information on the available arguments to this\nkeyword, please see the <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html\">Boto3 STS documentation</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param role_arn:</th><td class=\"field-body\">The Amazon Resource Name (ARN) of the role to assume.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param role_session_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">An identifier for the assumed role session.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param policy_arns:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The Amazon Resource Names (ARNs) of the IAM\nmanaged policies that you want to use as managed session policies.\nThe policies must exist in the same account as the role.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param policy:</th><td class=\"field-body\">An IAM policy in JSON format that you want to use\nas an inline session policy.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param duration:</th><td class=\"field-body\">The duration, in seconds, of the role session.\nThe value specified can range from 900 seconds (15 minutes\nand the default) up to the maximum session duration set for\nthe role.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param tags:</th><td class=\"field-body\">A list of session tags that you want to pass. Each\nsession tag consists of a key name and an associated value.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param transitive_tag_keys:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A list of keys for session tags that\nyou want to set as transitive. If you set a tag key as\ntransitive, the corresponding key and value passes to\nsubsequent sessions in a role chain.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param external_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A unique identifier that might be required\nwhen you assume a role in another account. If the\nadministrator of the account to which the role belongs\nprovided you with an external ID, then provide that value in\nthis parameter.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param serial_number:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The identification number of the MFA device\nthat is associated with the user who is making the\nusing the <tt class=\"docutils literal\">assume_role</tt> keyword.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param token_code:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The value provided by the MFA device, if the\ntrust policy of the role being assumed requires MFA.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_identity:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The source identity specified by the\nprincipal that is using the <tt class=\"docutils literal\">assume_role</tt> keyword.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Returns a set of temporary security credentials that you can use to access Amazon Web Services resources that you might not normally have access to. These temporary credentials consist of an access key ID, a secret access key, and a security token. Typically, you use ``Assume Role`` within your account or for cross-account access.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1786
    },
    {
      "name": "Convert Textract Response To Model",
      "args": [
        {
          "name": "response",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "response"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Convert AWS Textract JSON response into TextractDocument object,\nwhich has following structure:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>Document</li>\n<li>Page</li>\n<li>Tables</li>\n<li>Rows</li>\n<li>Cells</li>\n<li>Lines</li>\n<li>Words</li>\n<li>Form</li>\n<li>Field</li>\n</ul>\n</blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param response:</th><td class=\"field-body\">JSON response from AWS Textract service</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>TextractDocument</cite> object</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${response}</span><span class=\"p\">    </span><span class=\"c\">Analyze Document</span><span class=\"p\">    </span><span class=\"c\">${filename}</span><span class=\"p\">\n</span><span class=\"c\">${model}=</span><span class=\"p\">    </span><span class=\"c\">Convert Textract Response To Model</span><span class=\"p\">    </span><span class=\"c\">${response}</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{model.pages}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.tables}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n    </span><span class=\"c\">Log Lines</span><span class=\"p\">    </span><span class=\"c\">${page.lines}</span><span class=\"p\">\n    </span><span class=\"c\">Log Many</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">    </span><span class=\"c\">${page.form}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Convert AWS Textract JSON response into TextractDocument object, which has following structure:",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1013
    },
    {
      "name": "Create Bucket",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create S3 bucket with name</p>\n<p><strong>note</strong> This keyword accepts additional parameters in key=value format</p>\n<p>More info on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.create_bucket/\">additional parameters</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean indicating status of operation</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Create Bucket</span><span class=\"p\">  </span><span class=\"c\">public-bucket</span><span class=\"p\">   </span><span class=\"c\">ACL=public-read-write</span>\n</pre>\n</div>\n",
      "shortdoc": "Create S3 bucket with name",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 202
    },
    {
      "name": "Create Queue",
      "args": [
        {
          "name": "queue_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "queue_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create queue with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">[description], defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">create queue response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Create queue with name",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1201
    },
    {
      "name": "Create Redshift Statement Parameters",
      "args": [
        {
          "name": "params",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**params"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Returns a formatted dictionary to be used in\nRedshift Data Api SQL statements.</p>\n<p><strong>Example:</strong></p>\n<p>Assume the <tt class=\"docutils literal\">${SQL}</tt> statement has the parameters <tt class=\"docutils literal\">:id</tt> and\n<tt class=\"docutils literal\">:name</tt>:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n\n${</span><span class=\"nv\">params</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">    </span><span class=\"nf\">Create sql parameters</span><span class=\"p\">    </span><span class=\"s\">id=123</span><span class=\"p\">    </span><span class=\"s\">name=Nokia</span><span class=\"p\">\n</span><span class=\"c\"># params produces a data structure like so:\n#   [\n#        {&quot;name&quot;:&quot;id&quot;, &quot;value&quot;:&quot;123&quot;},\n#        {&quot;name&quot;:&quot;name&quot;, &quot;value&quot;:&quot;Nokia&quot;}\n#    ]\n</span><span class=\"p\">\n</span><span class=\"c\"># Which can be used for the 'parameters' argument.\n</span><span class=\"p\">${</span><span class=\"nv\">response</span><span class=\"p\">}</span><span class=\"gu\">=</span><span class=\"p\">    </span><span class=\"nf\">Execute redshift statement</span><span class=\"p\">    ${</span><span class=\"nv\">SQL</span><span class=\"p\">}    ${</span><span class=\"nv\">params</span><span class=\"p\">}</span>\n</pre>\n</div>\n",
      "shortdoc": "Returns a formatted dictionary to be used in Redshift Data Api SQL statements.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1493
    },
    {
      "name": "Delete Bucket",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete S3 bucket with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">boolean indicating status of operation</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Delete S3 bucket with name",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 228
    },
    {
      "name": "Delete Files",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        },
        {
          "name": "files",
          "types": [
            "list",
            "None"
          ],
          "typedocs": {
            "list": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "files: list | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete files in the bucket</p>\n<p><strong>note</strong> This keyword accepts additional parameters in key=value format</p>\n<p>More info on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.delete_objects/\">additional parameters</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of files to delete</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files deleted or <cite>False</cite></td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Delete files in the bucket",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 254
    },
    {
      "name": "Delete Message",
      "args": [
        {
          "name": "receipt_handle",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "receipt_handle: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete message in the queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param receipt_handle:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">message handle to delete</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">delete message response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Delete message in the queue",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1187
    },
    {
      "name": "Delete Queue",
      "args": [
        {
          "name": "queue_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "queue_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Delete queue with name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">[description], defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">delete queue response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Delete queue with name",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1213
    },
    {
      "name": "Describe Redshift Table",
      "args": [
        {
          "name": "database",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "database: str"
        },
        {
          "name": "schema",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "schema: str | None = None"
        },
        {
          "name": "table",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "table: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Describes the detailed information about a table from metadata\nin the cluster. The information includes its columns.</p>\n<p>If <tt class=\"docutils literal\">schema</tt> and/or <tt class=\"docutils literal\">table</tt> is not provided, the API searches\nall schemas for the provided table, or returns all tables in the\nschema or entire database.</p>\n<p>The response object is provided as a list of table meta data objects,\nutilize dot-notation or the <tt class=\"docutils literal\">RPA.JSON</tt> library to access members:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;ColumnList&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;columnDefault&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;isCaseSensitive&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;isCurrency&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;isSigned&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;label&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;length&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;nullable&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;precision&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;scale&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;schemaName&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;tableName&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;typeName&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">],</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;TableName&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param database:</th><td class=\"field-body\">The name of the database that contains the tables\nto be described. If ommitted, will use the connected Database.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param schema:</th><td class=\"field-body\">The schema that contains the table. If no schema\nis specified, then matching tables for all schemas are returned.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param table:</th><td class=\"field-body\">The table name. If no table is specified, then all\ntables for all matching schemas are returned. If no table and\nno schema is specified, then all tables for all schemas in the\ndatabase are returned</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Describes the detailed information about a table from metadata in the cluster. The information includes its columns.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1595
    },
    {
      "name": "Detect Document Text",
      "args": [
        {
          "name": "image_file",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "image_file: str | None = None"
        },
        {
          "name": "json_file",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "json_file: str | None = None"
        },
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Detects text in the input document.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param image_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath (or object name) of image file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param json_file:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">filepath to resulting json file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if given then using <cite>image_file</cite> from the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">analysis response in json</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Detects text in the input document.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 753
    },
    {
      "name": "Detect Entities",
      "args": [
        {
          "name": "text",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "text: str | None = None"
        },
        {
          "name": "lang",
          "types": [],
          "typedocs": {},
          "defaultValue": "en",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "lang=en"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Inspects text for named entities, and returns information about them</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string. Each string must contain fewer\nthat 5,000 bytes of UTF-8 encoded characters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the text, defaults to &quot;en&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Inspects text for named entities, and returns information about them",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1107
    },
    {
      "name": "Detect Sentiment",
      "args": [
        {
          "name": "text",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "text: str | None = None"
        },
        {
          "name": "lang",
          "types": [],
          "typedocs": {},
          "defaultValue": "en",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "lang=en"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Inspects text and returns an inference of the prevailing sentiment</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param text:</th><td class=\"field-body\">A UTF-8 text string. Each string must contain fewer\nthat 5,000 bytes of UTF-8 encoded characters</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param lang:</th><td class=\"field-body\">language code of the text, defaults to &quot;en&quot;</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Inspects text and returns an inference of the prevailing sentiment",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1089
    },
    {
      "name": "Download Files",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        },
        {
          "name": "files",
          "types": [
            "list",
            "None"
          ],
          "typedocs": {
            "list": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "files: list | None = None"
        },
        {
          "name": "target_directory",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "target_directory: str | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Download files from bucket to local filesystem</p>\n<p><strong>note</strong> This keyword accepts additional parameters in key=value format.</p>\n<p>More info on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.download_file/\">additional parameters</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of S3 object names</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_directory:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">location for the downloaded files, default\ncurrent directory</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files downloaded</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Download files from bucket to local filesystem",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 513
    },
    {
      "name": "Execute Redshift Statement",
      "args": [
        {
          "name": "sql",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "sql: str"
        },
        {
          "name": "parameters",
          "types": [
            "list",
            "None"
          ],
          "typedocs": {
            "list": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: list | None = None"
        },
        {
          "name": "statement_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "statement_name: str | None = None"
        },
        {
          "name": "with_event",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "with_event: bool = False"
        },
        {
          "name": "timeout",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "40",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: int = 40"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Runs an SQL statement, which can be data manipulation language\n(DML) or data definition language (DDL). This statement must be a\nsingle SQL statement.</p>\n<p>SQL statements can be parameterized with named parameters through\nthe use of the <tt class=\"docutils literal\">parameters</tt> argument. Parameters must be dictionaries\nwith the following two keys:</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">name</tt>: The name of the parameter. In the SQL statement this\nwill be referenced as <tt class=\"docutils literal\">:name</tt>.</li>\n<li><tt class=\"docutils literal\">value</tt>: The value of the parameter. Amazon Redshift implicitly\nconverts to the proper data type. For more information, see\n<a class=\"reference external\" href=\"https://docs.aws.amazon.com/redshift/latest/dg/c_Supported_data_types.html\">Data types</a> in the <cite>Amazon Redshift Database Developer Guide</cite>.</li>\n</ul>\n<p>For simplicity, a helper keyword, <a href=\"#Create%20Redshift%20Statement%20Parameters\" class=\"name\">Create redshift statement parameters</a>,\nis available and can be used more naturally in Robot Framework contexts.</p>\n<p>If tabular data is returned, this keyword tries to return it as\na table (see <tt class=\"docutils literal\">RPA.Tables</tt>), if <tt class=\"docutils literal\">RPA.Tables</tt> is not available\nin the keyword's scope, the data will be returned as a list of dictionaries.\nOther types of data (SQL errors and result statements) are returned\nas strings.</p>\n<p><strong>NOTE:</strong> You may modify the max built-in wait time by providing\na timeout in seconds (default 40 seconds)</p>\n<p><strong>Robot framework example:</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n\n    ${</span><span class=\"nv\">SQL</span><span class=\"p\">}=    </span><span class=\"nf\">Set variable</span><span class=\"p\">    </span><span class=\"s\">insert into mytable values (:id, :address)</span><span class=\"p\">\n    ${</span><span class=\"nv\">params</span><span class=\"p\">}=    </span><span class=\"nf\">Create redshift statement parameters</span><span class=\"p\">\n    ...    </span><span class=\"s\">id=1</span><span class=\"p\">\n    ...    </span><span class=\"s\">address=Seattle</span><span class=\"p\">\n    ${</span><span class=\"nv\">response</span><span class=\"p\">}=    </span><span class=\"nf\">Execute redshift statement</span><span class=\"p\">    ${</span><span class=\"nv\">SQL</span><span class=\"p\">}    ${</span><span class=\"nv\">params</span><span class=\"p\">}\n    </span><span class=\"nf\">Log</span><span class=\"p\">    ${</span><span class=\"nv\">response</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Python example:</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;insert into mytable values (:id, :address)&quot;</span><span class=\"w\">\n</span><span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;address&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Seattle&quot;</span><span class=\"p\">},</span><span class=\"w\">\n</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">aws</span><span class=\"o\">.</span><span class=\"n\">execute_redshift_statement</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parameters:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The parameters for the SQL statement. Must consist\nof a list of dictionaries with two keys: <tt class=\"docutils literal\">name</tt> and <tt class=\"docutils literal\">value</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sql:</th><td class=\"field-body\">The SQL statement text to run.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param statement_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The name of the SQL statement. You can name\nthe SQL statement when you create it to identify the query.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_event:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A value that indicates whether to send an event\nto the Amazon EventBridge event bus after the SQL statement runs.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">Used to calculate the maximum wait. Exact timing\ndepends on system variability becuase the underlying waiter\ndoes not utilize a timeout directly.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Runs an SQL statement, which can be data manipulation language (DML) or data definition language (DDL). This statement must be a single SQL statement.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1287
    },
    {
      "name": "Execute Redshift Statement Asyncronously",
      "args": [
        {
          "name": "sql",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "sql: str"
        },
        {
          "name": "parameters",
          "types": [
            "list",
            "None"
          ],
          "typedocs": {
            "list": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "parameters: list | None = None"
        },
        {
          "name": "statement_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "statement_name: str | None = None"
        },
        {
          "name": "with_event",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "with_event: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Submit a sql statement for Redshift to execute asyncronously.\nReturns the statement ID which can be used to retrieve statement\nresults later.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param parameters:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The parameters for the SQL statement. Must consist\nof a list of dictionaries with two keys: <tt class=\"docutils literal\">name</tt> and <tt class=\"docutils literal\">value</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param sql:</th><td class=\"field-body\">The SQL statement text to run.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param statement_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The name of the SQL statement. You can name\nthe SQL statement when you create it to identify the query.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param with_event:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A value that indicates whether to send an event\nto the Amazon EventBridge event bus after the SQL statement runs.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Submit a sql statement for Redshift to execute asyncronously. Returns the statement ID which can be used to retrieve statement results later.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1373
    },
    {
      "name": "Generate Presigned Url",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "bucket_name: str"
        },
        {
          "name": "object_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "object_name: str"
        },
        {
          "name": "expires_in",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "expires_in: int | None = None"
        },
        {
          "name": "extra_params",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**extra_params"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Generate presigned URL for the file.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the file in the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param expires_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">optional expiration time for the url (in seconds).\nThe default expiration time is 3600 seconds (one hour).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param extra_params:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">allows setting any extra <cite>Params</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">URL for accessing the file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Generate presigned URL for the file.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 551
    },
    {
      "name": "Get Cells",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get parsed cells from the response</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">cells</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get parsed cells from the response",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 745
    },
    {
      "name": "Get Document Analysis",
      "args": [
        {
          "name": "job_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "job_id: str | None = None"
        },
        {
          "name": "max_results",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1000",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "max_results: int = 1000"
        },
        {
          "name": "next_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "next_token: str | None = None"
        },
        {
          "name": "collect_all_results",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "collect_all_results: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get the results of Textract asynchronous <cite>Document Analysis</cite> operation</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param job_id:</th><td class=\"field-body\">job identifier, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number of blocks to get at a time, defaults to 1000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param next_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pagination token for getting next set of results,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param collect_all_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when set to True will wait until analysis is\ncomplete and returns all blocks of the analysis result, by default (False)\nthe all blocks need to be specifically collected using <cite>next_token</cite> variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Response dictionary has key <cite>JobStatus</cite> with value <cite>SUCCEEDED</cite> when analysis\nhas been completed.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Init Textract Client</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_ID}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_SECRET}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_REGION}</span><span class=\"p\">\n</span><span class=\"c\">${jobid}=</span><span class=\"p\">    </span><span class=\"c\">Start Document Analysis</span><span class=\"p\">  </span><span class=\"c\">s3bucket_name</span><span class=\"p\">  </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\"># Wait for job completion and collect all blocks\n${response}=</span><span class=\"p\">    </span><span class=\"c\">Get Document Analysis</span><span class=\"p\">  </span><span class=\"c\">${jobid}</span><span class=\"p\">  </span><span class=\"c\">collect_all_results=True</span><span class=\"p\">\n</span><span class=\"c\"># Model will contain all pages of the invoice.pdf\n${model}=</span><span class=\"p\">    </span><span class=\"c\">Convert Textract Response To Model</span><span class=\"p\">    </span><span class=\"c\">${response}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get the results of Textract asynchronous `Document Analysis` operation",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 829
    },
    {
      "name": "Get Document Text Detection",
      "args": [
        {
          "name": "job_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "job_id: str | None = None"
        },
        {
          "name": "max_results",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1000",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "max_results: int = 1000"
        },
        {
          "name": "next_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "next_token: str | None = None"
        },
        {
          "name": "collect_all_results",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "collect_all_results: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get the results of Textract asynchronous <cite>Document Text Detection</cite> operation</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param job_id:</th><td class=\"field-body\">job identifier, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">number of blocks to get at a time, defaults to 1000</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param next_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">pagination token for getting next set of results,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param collect_all_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">when set to True will wait until analysis is\ncomplete and returns all blocks of the analysis result, by default (False)\nthe all blocks need to be specifically collected using <cite>next_token</cite> variable</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary</td>\n</tr>\n</tbody>\n</table>\n<p>Response dictionary has key <cite>JobStatus</cite> with value <cite>SUCCEEDED</cite> when analysis\nhas been completed.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Init Textract Client</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_ID}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_KEY_SECRET}</span><span class=\"p\">  </span><span class=\"c\">%{AWS_REGION}</span><span class=\"p\">\n</span><span class=\"c\">${jobid}=</span><span class=\"p\">    </span><span class=\"c\">Start Document Text Detection</span><span class=\"p\">  </span><span class=\"c\">s3bucket_name</span><span class=\"p\">  </span><span class=\"c\">invoice.pdf</span><span class=\"p\">\n</span><span class=\"c\"># Wait for job completion and collect all blocks\n${response}=</span><span class=\"p\">   </span><span class=\"c\">Get Document Text Detection</span><span class=\"p\">    </span><span class=\"c\">${jobid}</span><span class=\"p\">  </span><span class=\"c\">collect_all_results=True</span><span class=\"p\">\n</span><span class=\"c\"># Model will contain all pages of the invoice.pdf\n${model}=</span><span class=\"p\">    </span><span class=\"c\">Convert Textract Response To Model</span><span class=\"p\">    </span><span class=\"c\">${response}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get the results of Textract asynchronous `Document Text Detection` operation",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 951
    },
    {
      "name": "Get Pages And Text",
      "args": [
        {
          "name": "textract_response",
          "types": [
            "dict"
          ],
          "typedocs": {
            "dict": "dictionary"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "textract_response: dict"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get pages and text out of Textract response json</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param textract_response:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">JSON from Textract</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary, page numbers as keys and value is a list\nof text lines</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get pages and text out of Textract response json",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 891
    },
    {
      "name": "Get Redshift Statement Results",
      "args": [
        {
          "name": "statement_id",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "statement_id: str"
        },
        {
          "name": "timeout",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "40",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timeout: int = 40"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Retrieve the results of a SQL statement previously submitted\nto Redshift. If that statement has not yet completed, this keyword\nwill wait for results. See <a href=\"#Execute%20Redshift%20Statement\" class=\"name\">Execute Redshift Statement</a> for\nadditional information.</p>\n<p>If the statement has tabular results, this keyword returns them\nas a table from <tt class=\"docutils literal\">RPA.Tables</tt> if that library is available, or\nas a list of dictionaries if not. If the statement does not have\ntabular results, it will return the number of rows affected.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param statement_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The statement id to use to retreive results.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timeout:</th><td class=\"field-body\">An integer used to calculate the maximum wait.\nExact timing depends on system variability becuase the\nunderlying waiter does not utilize a timeout directly.\nDefaults to 40.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Retrieve the results of a SQL statement previously submitted to Redshift. If that statement has not yet completed, this keyword will wait for results. See \\`Execute Redshift Statement\\` for additional information.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1425
    },
    {
      "name": "Get Tables",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get parsed tables from the response</p>\n<p>Returns <cite>RPA.Tables.Table</cite> if possible otherwise returns an dictionary.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tables</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get parsed tables from the response",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 729
    },
    {
      "name": "Get Words",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Get parsed words from the response</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">words</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get parsed words from the response",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 738
    },
    {
      "name": "Init Comprehend Client",
      "args": [
        {
          "name": "aws_key_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key_id: str | None = None"
        },
        {
          "name": "aws_key",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key: str | None = None"
        },
        {
          "name": "region",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "region: str | None = None"
        },
        {
          "name": "use_robocorp_vault",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_robocorp_vault: bool = False"
        },
        {
          "name": "session_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "session_token: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize AWS Comprehend client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param session_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">a session token associated with temporary\ncredentials, such as from <tt class=\"docutils literal\">Assume Role</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Initialize AWS Comprehend client",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1062
    },
    {
      "name": "Init Redshift Data Client",
      "args": [
        {
          "name": "aws_key_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key_id: str | None = None"
        },
        {
          "name": "aws_key",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key: str | None = None"
        },
        {
          "name": "region",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "region: str | None = None"
        },
        {
          "name": "cluster_identifier",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "cluster_identifier: str | None = None"
        },
        {
          "name": "database",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "database: str | None = None"
        },
        {
          "name": "database_user",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "database_user: str | None = None"
        },
        {
          "name": "secret_arn",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "secret_arn: str | None = None"
        },
        {
          "name": "use_robocorp_vault",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_robocorp_vault: bool = False"
        },
        {
          "name": "session_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "session_token: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize AWS Redshift Data API client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param cluster_identifier:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The cluster identifier. This parameter\nis required when connecting to a cluster and authenticating\nusing either Secrets Manager or temporary credentials.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param database:</th><td class=\"field-body\">The name of the database. This parameter is required\nwhen authenticating using either Secrets Manager or temporary\ncredentials.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param database_user:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The database user name. This parameter is\nrequired when connecting to a cluster and authenticating using\ntemporary credentials.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param secret_arn:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The name or ARN of the secret that enables access\nto the database. This parameter is required when authenticating\nusing Secrets Manager.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored in <tt class=\"docutils literal\">Robocorp Vault</tt></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param session_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">a session token associated with temporary\ncredentials, such as from <tt class=\"docutils literal\">Assume Role</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Initialize AWS Redshift Data API client",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1238
    },
    {
      "name": "Init S3 Client",
      "args": [
        {
          "name": "aws_key_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key_id: str | None = None"
        },
        {
          "name": "aws_key",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key: str | None = None"
        },
        {
          "name": "region",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "region: str | None = None"
        },
        {
          "name": "use_robocorp_vault",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_robocorp_vault: bool = False"
        },
        {
          "name": "session_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "session_token: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize AWS S3 client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param session_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">a session token associated with temporary\ncredentials, such as from <tt class=\"docutils literal\">Assume Role</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Initialize AWS S3 client",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 180
    },
    {
      "name": "Init Sqs Client",
      "args": [
        {
          "name": "aws_key_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key_id: str | None = None"
        },
        {
          "name": "aws_key",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key: str | None = None"
        },
        {
          "name": "region",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "region: str | None = None"
        },
        {
          "name": "queue_url",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "queue_url: str | None = None"
        },
        {
          "name": "use_robocorp_vault",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_robocorp_vault: bool = False"
        },
        {
          "name": "session_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "session_token: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize AWS SQS client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param queue_url:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">SQS queue url</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored into <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param session_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">a session token associated with temporary\ncredentials, such as from <tt class=\"docutils literal\">Assume Role</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Initialize AWS SQS client",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1128
    },
    {
      "name": "Init Sts Client",
      "args": [
        {
          "name": "aws_key_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key_id: str | None = None"
        },
        {
          "name": "aws_key",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key: str | None = None"
        },
        {
          "name": "region",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "region: str | None = None"
        },
        {
          "name": "use_robocorp_vault",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_robocorp_vault: bool = False"
        },
        {
          "name": "session_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "session_token: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize AWS STS client.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param session_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">a session token associated with temporary\ncredentials, such as from <tt class=\"docutils literal\">Assume Role</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Initialize AWS STS client.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1764
    },
    {
      "name": "Init Textract Client",
      "args": [
        {
          "name": "aws_key_id",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key_id: str | None = None"
        },
        {
          "name": "aws_key",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "aws_key: str | None = None"
        },
        {
          "name": "region",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "region: str | None = None"
        },
        {
          "name": "use_robocorp_vault",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_robocorp_vault: bool = False"
        },
        {
          "name": "session_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "session_token: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize AWS Textract client</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param aws_key_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">access key ID</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param aws_key:</th><td class=\"field-body\">secret access key</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param region:</th><td class=\"field-body\">AWS region</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_robocorp_vault:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">use secret stored in <cite>Robocorp Vault</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param session_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">a session token associated with temporary\ncredentials, such as from <tt class=\"docutils literal\">Assume Role</tt>.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Initialize AWS Textract client",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 596
    },
    {
      "name": "List Buckets",
      "args": [],
      "doc": "<div class=\"document\">\n<p>List all buckets for this account</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of buckets</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "List all buckets for this account",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 244
    },
    {
      "name": "List Files",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "bucket_name: str"
        },
        {
          "name": "limit",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "limit: int | None = None"
        },
        {
          "name": "search",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "search: str | None = None"
        },
        {
          "name": "prefix",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "prefix: str | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>List files in the bucket</p>\n<p><strong>note</strong> This keyword accepts additional parameters in key=value format</p>\n<p>More info on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.list_objects_v2/\">additional parameters</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param limit:</th><td class=\"field-body\">limits the response to maximum number of items</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param search:</th><td class=\"field-body\"><a class=\"reference external\" href=\"https://jmespath.org/\">JMESPATH</a> expression to filter\nobjects</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param prefix:</th><td class=\"field-body\">limits the response to keys that begin with the\nspecified prefix</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">allows setting all extra parameters for\n<cite>list_objects_v2</cite> method</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of files</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Python examples</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># List all files in a bucket</span><span class=\"w\">\n</span><span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">AWSlibrary</span><span class=\"o\">.</span><span class=\"n\">list_files</span><span class=\"p\">(</span><span class=\"s2\">&quot;bucket_name&quot;</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># List files in a bucket matching <span class=\"name\">.yaml</span></span><span class=\"w\">\n</span><span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">AWSlibrary</span><span class=\"o\">.</span><span class=\"n\">list_files</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;bucket_name&quot;</span><span class=\"p\">,</span> <span class=\"n\">search</span><span class=\"o\">=</span><span class=\"s2\">&quot;Contents[?contains(Key, '.yaml')]&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># List files in a bucket matching <span class=\"name\">.png</span> and limit results to max 3</span><span class=\"w\">\n</span><span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">AWSlibrary</span><span class=\"o\">.</span><span class=\"n\">list_files</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;bucket_name&quot;</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">search</span><span class=\"o\">=</span><span class=\"s2\">&quot;Contents[?contains(Key, '.png')]&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># List files in a bucket prefixed with <span class=\"name\">special</span> and get only 1</span><span class=\"w\">\n</span><span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">AWSlibrary</span><span class=\"o\">.</span><span class=\"n\">list_files</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;bucket_name&quot;</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"s2\">&quot;special&quot;</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\">\n</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Robot Framework examples</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># List all files in a bucket\n&#64;{files}=</span><span class=\"p\">   </span><span class=\"c\">List Files</span><span class=\"p\">   </span><span class=\"c\">bucket-name</span><span class=\"p\">\n\n</span><span class=\"c\"># List files in a bucket matching <span class=\"name\">.yaml</span>\n&#64;{files}=</span><span class=\"p\">   </span><span class=\"c\">List Files</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">bucket-name</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">search=Contents[?contains(Key, '.yaml')]</span><span class=\"p\">\n\n</span><span class=\"c\"># List files in a bucket matching <span class=\"name\">.png</span> and limit results to max 3\n&#64;{files}=</span><span class=\"p\">  </span><span class=\"c\">List Files</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">bucket-name</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">limit=3</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">search=Contents[?contains(Key, '.png')]</span><span class=\"p\">\n\n</span><span class=\"c\"># List files in a bucket prefixed with <span class=\"name\">special</span> and get only 1\n&#64;{files}=</span><span class=\"p\">   </span><span class=\"c\">List Files</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">bucket-name</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">prefix=special</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">limit=1</span><span class=\"p\">\n</span><span class=\"c\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "List files in the bucket",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 287
    },
    {
      "name": "List Redshift Databases",
      "args": [],
      "doc": "<div class=\"document\">\n<p>List the databases in a cluster.</p>\n<p>Database names are returned as a list of strings.</p>\n</div>\n",
      "shortdoc": "List the databases in a cluster.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1697
    },
    {
      "name": "List Redshift Schemas",
      "args": [
        {
          "name": "database",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "database: str | None = None"
        },
        {
          "name": "schema_pattern",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "schema_pattern: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Lists the schemas in a database.</p>\n<p>Schema names are returned as a list of strings.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param database:</th><td class=\"field-body\">The name of the database that contains the schemas\nto list. If ommitted, will use the connected Database.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param schema_pattern:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A pattern to filter results by schema name.\nWithin a schema pattern, &quot;%&quot; means match any substring of 0\nor more characters and &quot;_&quot; means match any one character.\nOnly schema name entries matching the search pattern are returned.\nIf <tt class=\"docutils literal\">schema_pattern</tt> is not specified, then all schemas are returned.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Lists the schemas in a database.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1710
    },
    {
      "name": "List Redshift Tables",
      "args": [
        {
          "name": "database",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "database: str | None = None"
        },
        {
          "name": "schema_pattern",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "schema_pattern: str | None = None"
        },
        {
          "name": "table_pattern",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "table_pattern: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>List the tables in a database. If neither <tt class=\"docutils literal\">schema_pattern</tt> nor\n<tt class=\"docutils literal\">table_pattern</tt> are specified, then all tables in the database\nare returned.</p>\n<p>Returned objects are structured like the below JSON in a list:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;name&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;schema&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;type&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;string&quot;</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param database:</th><td class=\"field-body\">The name of the database that contains the tables\nto be described. If ommitted, will use the connected Database.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param schema_pattern:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A pattern to filter results by schema name.\nWithin a schema pattern, &quot;%&quot; means match any substring of 0\nor more characters and &quot;_&quot; means match any one character.\nOnly schema name entries matching the search pattern are returned.\nIf <tt class=\"docutils literal\">schema_pattern</tt> is not specified, then all tables that match\n<tt class=\"docutils literal\">table_pattern</tt> are returned. If neither <tt class=\"docutils literal\">schema_pattern</tt>\nor <tt class=\"docutils literal\">table_pattern</tt> are specified, then all tables are returned.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param table_pattern:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A pattern to filter results by table name.\nWithin a table pattern, &quot;%&quot; means match any substring of 0 or\nmore characters and &quot;_&quot; means match any one character. Only\ntable name entries matching the search pattern are returned.\nIf <tt class=\"docutils literal\">table_pattern</tt> is not specified, then all tables that\nmatch <tt class=\"docutils literal\">schema_pattern</tt> are returned. If neither <tt class=\"docutils literal\">schema_pattern</tt> or\n<tt class=\"docutils literal\">table_pattern</tt> are specified, then all tables are returned.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "List the tables in a database. If neither ``schema_pattern`` nor ``table_pattern`` are specified, then all tables in the database are returned.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1650
    },
    {
      "name": "Receive Message",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Receive message from queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">message as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Receive message from queue",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1175
    },
    {
      "name": "Send Message",
      "args": [
        {
          "name": "message",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "message: str | None = None"
        },
        {
          "name": "message_attributes",
          "types": [
            "dict",
            "None"
          ],
          "typedocs": {
            "dict": "dictionary",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "message_attributes: dict | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Send message to the queue</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param message:</th><td class=\"field-body\">body of the message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param message_attributes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">attributes of the message</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">send message response as dict</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Send message to the queue",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 1153
    },
    {
      "name": "Set Robocorp Vault",
      "args": [
        {
          "name": "vault_name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "vault_name"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set Robocorp Vault name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param vault_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Robocorp Vault name</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set Robocorp Vault name",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 140
    },
    {
      "name": "Start Document Analysis",
      "args": [
        {
          "name": "bucket_name_in",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name_in: str | None = None"
        },
        {
          "name": "object_name_in",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "object_name_in: str | None = None"
        },
        {
          "name": "object_version_in",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "object_version_in: str | None = None"
        },
        {
          "name": "bucket_name_out",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name_out: str | None = None"
        },
        {
          "name": "prefix_object_out",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "textract_output",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "prefix_object_out: str = textract_output"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Starts the asynchronous analysis of an input document\nfor relationships between detected items such as key-value pairs,\ntables, and selection elements.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the input object,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_version_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">version of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket where to save analysis result\nobject, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prefix_object_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the analysis result object,</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">job identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Input object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.</p>\n<p>By default Amazon Textract will save the analysis result internally\nto be accessed by keyword <tt class=\"docutils literal\">Get Document Analysis</tt>. This can\nbe overridden by giving parameter <tt class=\"docutils literal\">bucket_name_out</tt>.</p>\n</div>\n",
      "shortdoc": "Starts the asynchronous analysis of an input document for relationships between detected items such as key-value pairs, tables, and selection elements.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 783
    },
    {
      "name": "Start Document Text Detection",
      "args": [
        {
          "name": "bucket_name_in",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name_in: str | None = None"
        },
        {
          "name": "object_name_in",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "object_name_in: str | None = None"
        },
        {
          "name": "object_version_in",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "object_version_in: str | None = None"
        },
        {
          "name": "bucket_name_out",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name_out: str | None = None"
        },
        {
          "name": "prefix_object_out",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "textract_output",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "prefix_object_out: str = textract_output"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Starts the asynchronous detection of text in a document.\nAmazon Textract can detect lines of text and the words that make up a\nline of text.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the input object,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_version_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">version of the input object, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket where to save analysis result\nobject, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param prefix_object_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the S3 bucket for the analysis result object,</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">job identifier</td>\n</tr>\n</tbody>\n</table>\n<p>Input object can be in JPEG, PNG or PDF format. Documents should\nbe located in the Amazon S3 bucket.</p>\n<p>By default Amazon Textract will save the analysis result internally\nto be accessed by keyword <tt class=\"docutils literal\">Get Document Text Detection</tt>. This can\nbe overridden by giving parameter <tt class=\"docutils literal\">bucket_name_out</tt>.</p>\n</div>\n",
      "shortdoc": "Starts the asynchronous detection of text in a document. Amazon Textract can detect lines of text and the words that make up a line of text.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 908
    },
    {
      "name": "Upload File",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        },
        {
          "name": "filename",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "filename: str | None = None"
        },
        {
          "name": "object_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "object_name: str | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Upload single file into bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">filepath for the file to be uploaded</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the object in the bucket, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tuple of upload status and error</td>\n</tr>\n</tbody>\n</table>\n<p>If <cite>object_name</cite> is not given then basename of the file is\nused as <cite>object_name</cite>.</p>\n<p><strong>note</strong> This keyword accepts additional parameters in key=value format (see below code example).</p>\n<p>More info on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_file/\">additional parameters</a>.</p>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{extras}=</span><span class=\"p\">    </span><span class=\"c\">Evaluate</span><span class=\"p\">    </span><span class=\"c\">{'ContentType': 'image/png'}</span><span class=\"p\">\n</span><span class=\"c\">${uploaded}</span><span class=\"p\">    </span><span class=\"c\">${error}=</span><span class=\"p\">    </span><span class=\"c\">Upload File</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">mybucket</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">${CURDIR}${/}image.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">image.png</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">ExtraArgs=${extras}</span>\n</pre>\n</div>\n",
      "shortdoc": "Upload single file into bucket",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 413
    },
    {
      "name": "Upload Files",
      "args": [
        {
          "name": "bucket_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "bucket_name: str | None = None"
        },
        {
          "name": "files",
          "types": [
            "list",
            "None"
          ],
          "typedocs": {
            "list": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "files: list | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Upload multiple files into bucket</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param bucket_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the bucket</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param files:</th><td class=\"field-body\">list of files (2 possible ways, see above)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">number of files uploaded</td>\n</tr>\n</tbody>\n</table>\n<dl class=\"docutils\">\n<dt>Giving files as list of filepaths:</dt>\n<dd>['/path/to/file1.txt', '/path/to/file2.txt']</dd>\n<dt>Giving files as list of dictionaries (including filepath and object name):</dt>\n<dd>[{'filename':'/path/to/file1.txt', 'object_name': 'file1.txt'},\n{'filename': '/path/to/file2.txt', 'object_name': 'file2.txt'}]</dd>\n</dl>\n<p><strong>note</strong> This keyword accepts additional parameters in key=value format (see below code example).</p>\n<p>More info on <a class=\"reference external\" href=\"https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/s3.html#S3.Client.upload_file/\">additional parameters</a>.</p>\n<p>Python example (passing ExtraArgs):</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">upload_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"w\">\n</span>        <span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;./image.png&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s2\">&quot;object_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;image.png&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s2\">&quot;ExtraArgs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;ContentType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;image/png&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Metadata&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;importance&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1&quot;</span><span class=\"p\">}},</span><span class=\"w\">\n</span>    <span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"w\">\n</span>        <span class=\"s2\">&quot;filename&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;./doc.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s2\">&quot;object_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;doc.pdf&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"s2\">&quot;ExtraArgs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;ContentType&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/pdf&quot;</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">},</span><span class=\"w\">\n</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">awslibrary</span><span class=\"o\">.</span><span class=\"n\">upload_files</span><span class=\"p\">(</span><span class=\"s2\">&quot;mybucket&quot;</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"n\">upload_files</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Upload multiple files into bucket",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Cloud/AWS/__init__.py",
      "lineno": 451
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Analyze Document",
        "Execute Redshift Statement",
        "Execute Redshift Statement Asyncronously",
        "Get Document Analysis",
        "Get Document Text Detection",
        "Init Comprehend Client",
        "Init Redshift Data Client",
        "Init S3 Client",
        "Init Sqs Client",
        "Init Sts Client",
        "Init Textract Client"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Get Pages And Text",
        "Send Message"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Assume Role",
        "Execute Redshift Statement",
        "Generate Presigned Url",
        "Get Document Analysis",
        "Get Document Text Detection",
        "Get Redshift Statement Results",
        "List Files"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Assume Role",
        "Delete Files",
        "Download Files",
        "Execute Redshift Statement",
        "Execute Redshift Statement Asyncronously",
        "Upload Files"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "__init__",
        "Analyze Document",
        "Assume Role",
        "Create Bucket",
        "Create Queue",
        "Delete Bucket",
        "Delete Files",
        "Delete Message",
        "Delete Queue",
        "Describe Redshift Table",
        "Detect Document Text",
        "Detect Entities",
        "Detect Sentiment",
        "Download Files",
        "Execute Redshift Statement",
        "Execute Redshift Statement Asyncronously",
        "Generate Presigned Url",
        "Get Document Analysis",
        "Get Document Text Detection",
        "Init Comprehend Client",
        "Init Redshift Data Client",
        "Init S3 Client",
        "Init Sqs Client",
        "Init Sts Client",
        "Init Textract Client",
        "List Files",
        "List Redshift Schemas",
        "List Redshift Tables",
        "Send Message",
        "Start Document Analysis",
        "Start Document Text Detection",
        "Upload File",
        "Upload Files"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "__init__",
        "Analyze Document",
        "Assume Role",
        "Create Bucket",
        "Create Queue",
        "Delete Bucket",
        "Delete Files",
        "Delete Message",
        "Delete Queue",
        "Describe Redshift Table",
        "Detect Document Text",
        "Detect Entities",
        "Detect Sentiment",
        "Download Files",
        "Execute Redshift Statement",
        "Execute Redshift Statement Asyncronously",
        "Generate Presigned Url",
        "Get Document Analysis",
        "Get Document Text Detection",
        "Get Redshift Statement Results",
        "Init Comprehend Client",
        "Init Redshift Data Client",
        "Init S3 Client",
        "Init Sqs Client",
        "Init Sts Client",
        "Init Textract Client",
        "List Files",
        "List Redshift Schemas",
        "List Redshift Tables",
        "Send Message",
        "Start Document Analysis",
        "Start Document Text Detection",
        "Upload File",
        "Upload Files"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}