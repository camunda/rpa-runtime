{
  "specversion": 1,
  "name": "RPA.Tasks",
  "doc": "<div class=\"document\">\n<p><cite>Tasks</cite> is a library for controlling task execution during a Robot Framework run.</p>\n<p>It allows conditional branching between tasks, loops and jumps, and optionally\nvalidating the execution through a schema file. It can also be used to\nvisualize the tasks as a graph.</p>\n<p id=\"model\"><strong>Execution model</strong></p>\n<p>In a typical Robot Framework run, tasks are ordered linearly in a file and\nthey're executed in definition order. Events that happen during\nthe execution can not affect the order and only have the option to fail the task\nor continue as defined.</p>\n<p>Using the <cite>Tasks</cite> library, it's possible to change this model according\nto different states or inputs. The execution will start by running a single\nstart task from the suite, and then according to user-defined keywords or\nschema rules select the next task. Any task which is defined in the same file\ncan be used, and the same task can also be used multiple times during a single\nexecution.</p>\n<p id=\"execution-example\">Example:</p>\n<p>As an example, the following Robot Framework file describes a process where\na task would have to be executed multiple times before a condition is reached.\nIn a real-world scenario, these tasks would be more complicated, instead of just\nincrementing numbers.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tasks</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">1</span><span class=\"p\">}\n${</span><span class=\"nv\">TARGET</span><span class=\"p\">}     ${</span><span class=\"nv\">5</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check loop condition</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">I'm trying to count to </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n    </span><span class=\"nf\">Set next task if</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}</span><span class=\"s\"> &gt;= </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n    ...    </span><span class=\"s\">Target reached</span><span class=\"p\">\n    ...    </span><span class=\"s\">Increment current number</span><span class=\"p\">\n\n</span><span class=\"gu\">This will not run</span><span class=\"p\">\n    </span><span class=\"nf\">Fail</span><span class=\"p\">    </span><span class=\"s\">This should never run</span><span class=\"p\">\n\n</span><span class=\"gu\">Increment current number</span><span class=\"p\">\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">CURRENT + 1</span><span class=\"p\">}\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Number is now </span><span class=\"p\">${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}\n    </span><span class=\"nf\">Jump to task</span><span class=\"p\">    </span><span class=\"s\">Check loop condition</span><span class=\"p\">\n\n</span><span class=\"gu\">Target reached</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Those are some good numbers!</span>\n</pre>\n<p>The execution for this example would go as follows:</p>\n<ol class=\"arabic simple\">\n<li>It starts from <tt class=\"docutils literal\">Check loop condition</tt>, as it's the first task in the file.</li>\n<li>During the first task, the keyword <tt class=\"docutils literal\">Set next task if</tt> is called, which queues\nup the next task according to a condition.</li>\n<li>In the initial state, we have not reached the target number, and will next run\nthe task <tt class=\"docutils literal\">Increment current number</tt>.</li>\n<li>The second task executes normally and in the end jumps back to the first\ntask using the keyword <tt class=\"docutils literal\">Jump to task</tt>.</li>\n<li>The above sequence is repeated until the condition is met, and we move to\nthe final task of the file. This final task does not schedule further tasks\nand the execution ends.</li>\n</ol>\n<p>You can also note the task <tt class=\"docutils literal\">This will not run</tt>, which as the name implies\nis never executed, as no other task schedules or jumps to it.</p>\n<p>The console log from the above execution shows how the same task is executed\nmultiple times:</p>\n<pre class=\"code console literal-block\">\n<span class=\"go\">==============================================================================\nIncrementing Process\n==============================================================================\n</span><span class=\"gp\">#</span><span class=\"m\">1</span><span class=\"w\">   </span>Check<span class=\"w\"> </span>loop<span class=\"w\"> </span>condition<span class=\"w\">                                             </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">2</span><span class=\"w\">   </span>Increment<span class=\"w\"> </span>current<span class=\"w\"> </span>number<span class=\"w\">                                         </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">3</span><span class=\"w\">   </span>Check<span class=\"w\"> </span>loop<span class=\"w\"> </span>condition<span class=\"w\">                                             </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">4</span><span class=\"w\">   </span>Increment<span class=\"w\"> </span>current<span class=\"w\"> </span>number<span class=\"w\">                                         </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">5</span><span class=\"w\">   </span>Check<span class=\"w\"> </span>loop<span class=\"w\"> </span>condition<span class=\"w\">                                             </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">6</span><span class=\"w\">   </span>Increment<span class=\"w\"> </span>current<span class=\"w\"> </span>number<span class=\"w\">                                         </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">7</span><span class=\"w\">   </span>Check<span class=\"w\"> </span>loop<span class=\"w\"> </span>condition<span class=\"w\">                                             </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">8</span><span class=\"w\">   </span>Increment<span class=\"w\"> </span>current<span class=\"w\"> </span>number<span class=\"w\">                                         </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">9</span><span class=\"w\">   </span>Check<span class=\"w\"> </span>loop<span class=\"w\"> </span>condition<span class=\"w\">                                             </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">Transition: Set by keyword\n------------------------------------------------------------------------------\n</span><span class=\"gp\">#</span><span class=\"m\">10</span><span class=\"w\">  </span>Target<span class=\"w\"> </span>reached<span class=\"w\">                                                   </span><span class=\"p\">|</span><span class=\"w\"> </span>PASS<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">\n</span><span class=\"go\">------------------------------------------------------------------------------\nIncrementing Process:: [/graph_incrementing_process.svg]              | PASS |\n10 critical tasks, 10 passed, 0 failed\n10 tasks total, 10 passed, 0 failed\n==============================================================================</span>\n</pre>\n<p id=\"graph\"><strong>Graph</strong></p>\n<p>A common way to document a process is through a directed graph. These graphs\nare usually drawn manually and describe the expected higher level steps.\nThe actual implementation itself follows a different path through a graph,\ndepending on inputs or implementation details. This library visualizes this\nexecution graph using the <a class=\"reference external\" href=\"https://graphviz.org\">Graphviz</a> tool.</p>\n<p>After the execution is finished, it will create a\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/DOT_(graph_description_language)\">DOT</a> file\nand render it as an image. This image will automatically be appended\nto the suite's documentation field.</p>\n<p><strong>Requirements</strong></p>\n<p>Drawing the graph requires a working installation of\n<a class=\"reference external\" href=\"https://graphviz.org\">Graphviz</a>. This can be installed through their\nwebsite or by using <a class=\"reference external\" href=\"https://docs.conda.io/\">Conda</a>.</p>\n<p>This requirement is optional for the functioning of this library, and will\ndisplay a warning if the tool is not available. The visualization\ncan be entirely disabled with the <tt class=\"docutils literal\">graph</tt> argument during library\ninitialization.</p>\n<p id=\"schema\"><strong>Schema</strong></p>\n<p>There is an option to define a schema file for the suite, which is written in JSON.\nThis file will be used to validate the actual execution and fail it if an unexpected\ntransition between tasks happens. It can also define rules for selecting the next\ntask, which allows separating the task and process definitions.</p>\n<p>Example:</p>\n<p>The execution-example shown previously used keywords to control\nthe execution. This can also be done using the following schema:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nt\">&quot;tasks&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;Check loop condition&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;check&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;start&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                </span><span class=\"s2\">&quot;increment&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"s2\">&quot;target&quot;</span><span class=\"w\">\n            </span><span class=\"p\">],</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;actions&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;$CURRENT &gt;= $TARGET&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;target&quot;</span><span class=\"w\">\n                </span><span class=\"p\">},</span><span class=\"w\">\n                </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;$CURRENT &lt; $TARGET&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;increment&quot;</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n            </span><span class=\"p\">]</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;Increment current number&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;increment&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                </span><span class=\"s2\">&quot;check&quot;</span><span class=\"w\">\n            </span><span class=\"p\">],</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;actions&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n                </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;PASS&quot;</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;check&quot;</span><span class=\"w\">\n                </span><span class=\"p\">}</span><span class=\"w\">\n            </span><span class=\"p\">]</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"nt\">&quot;Target reached&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;alias&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;target&quot;</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;end&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"nt\">&quot;next&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<p>This has the added benefit of protecting against implementation errors,\nas the library will validate the start and end tasks, and transitions between\ndifferent tasks.</p>\n<p>After this schema has been taken into use, the aforementioned example\nwill reduce to the following:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.Tasks</span><span class=\"p\">    </span><span class=\"s\">schema=counter-schema.json</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Variables ***</span><span class=\"p\">\n${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">1</span><span class=\"p\">}\n${</span><span class=\"nv\">TARGET</span><span class=\"p\">}     ${</span><span class=\"nv\">5</span><span class=\"p\">}\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Check loop condition</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">I'm trying to count to </span><span class=\"p\">${</span><span class=\"nv\">TARGET</span><span class=\"p\">}\n\n</span><span class=\"gu\">This will not run</span><span class=\"p\">\n    </span><span class=\"nf\">Fail</span><span class=\"p\">    </span><span class=\"s\">This should never run</span><span class=\"p\">\n\n</span><span class=\"gu\">Increment current number</span><span class=\"p\">\n    </span><span class=\"nf\">Set suite variable</span><span class=\"p\">    ${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}    ${</span><span class=\"nv\">CURRENT + 1</span><span class=\"p\">}\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Number is now </span><span class=\"p\">${</span><span class=\"nv\">CURRENT</span><span class=\"p\">}\n\n</span><span class=\"gu\">Target reached</span><span class=\"p\">\n    </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Those are some good numbers!</span>\n</pre>\n<p><strong>Format</strong></p>\n<p>The current format is JSON with the following structure:</p>\n<pre class=\"code javascript literal-block\">\n<span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">&quot;tasks&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;alias&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;start&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">boolean</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;end&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kr\">boolean</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;next&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"p\">[],</span><span class=\"w\">\n            </span><span class=\"s2\">&quot;actions&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">action</span><span class=\"p\">[],</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span>\n</pre>\n<p>Each schema is a map of tasks with various properties. The keys must\nmatch the task names in the Robot Framework file definition. All properties\ninside the task are optional.</p>\n<p>The available properties and their uses:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt><em>alias</em>:   Define a short name for the task, which can be used as a reference</dt>\n<dd>inside the schema.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>start</em>:   Start task for execution. There can be only one task with this</dt>\n<dd>enabled. If not defined, will default to first task in the file.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>end</em>:     Valid end task for execution. There can be multiple tasks with this</dt>\n<dd>enabled. Fails the execution if this is defined for any task and the\nexecution stops in a non-end task.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>next</em>:    List of valid tasks to transition to from this task. Supports</dt>\n<dd>alias definitions.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>actions</em>: List of actions that are executed at the end of the task.</dt>\n<dd>See section below for details.</dd>\n</dl>\n</li>\n</ul>\n<p>The types of actions:</p>\n<ul class=\"simple\">\n<li><dl class=\"first docutils\">\n<dt><em>exception</em>: Set the next task if a matching exception occurs.</dt>\n<dd>Matches the exception message as regex.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>condition</em>: Set the next task if a conditional expression is true.</dt>\n<dd>Allows using Robot Framework variables.</dd>\n</dl>\n</li>\n<li><dl class=\"first docutils\">\n<dt><em>status</em>:    Set the next task if the current task's result matches,</dt>\n<dd>e.g. PASS or FAIL.</dd>\n</dl>\n</li>\n</ul>\n<p>Examples of actions:</p>\n<pre class=\"code json literal-block\">\n<span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"nt\">&quot;exception&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;.*ValueError.*&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Invalid input values&quot;</span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"nt\">&quot;condition&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;$ATTEMPTS &gt; 10&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Too many attempts&quot;</span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"nt\">&quot;status&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;PASS&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nt\">&quot;task&quot;</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Success state&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">]</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:10:09",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
  "lineno": 334,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "execution_limit",
          "types": [],
          "typedocs": {},
          "defaultValue": "1024",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "execution_limit=1024"
        },
        {
          "name": "schema",
          "types": [],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "schema=None"
        },
        {
          "name": "graph",
          "types": [],
          "typedocs": {},
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "graph=True"
        },
        {
          "name": "graph_inline",
          "types": [],
          "typedocs": {},
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "graph_inline=True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>There are a few arguments for controlling the Tasks library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param execution_limit:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Maximum number of tasks to run in suite,\nused to prevent infinite loops</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param schema:</th><td class=\"field-body\">Path to optional schema file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param graph:</th><td class=\"field-body\">Render execution result as graph using graphviz</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param graph_inline:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Inline graph into log, instead of saving as file</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "There are a few arguments for controlling the Tasks library.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 623
    }
  ],
  "keywords": [
    {
      "name": "Jump To Task",
      "args": [
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Jump directly to given task, skipping the rest of the task\nexecution. If run inside a teardown, also skips the rest of the\nteardown sequence.</p>\n</div>\n",
      "shortdoc": "Jump directly to given task, skipping the rest of the task execution. If run inside a teardown, also skips the rest of the teardown sequence.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 826
    },
    {
      "name": "Jump To Task If",
      "args": [
        {
          "name": "condition",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "condition"
        },
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        },
        {
          "name": "default",
          "types": [],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "default=None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Jump directly to given task according to the condition.</p>\n</div>\n",
      "shortdoc": "Jump directly to given task according to the condition.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 834
    },
    {
      "name": "Jump To Task If Keyword Fails",
      "args": [
        {
          "name": "task",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "task"
        },
        {
          "name": "keyword",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "keyword"
        },
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Executes given keyword and jumps to given task if it fails.</p>\n</div>\n",
      "shortdoc": "Executes given keyword and jumps to given task if it fails.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 852
    },
    {
      "name": "Jump To Task If Keyword Succeeds",
      "args": [
        {
          "name": "task",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "task"
        },
        {
          "name": "keyword",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "keyword"
        },
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Executes given keyword and jumps to given task if it succeeds.</p>\n</div>\n",
      "shortdoc": "Executes given keyword and jumps to given task if it succeeds.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 858
    },
    {
      "name": "Set Next Task",
      "args": [
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set the next task to be executed.\nShould be a task in the same suite.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of next task</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set the next task to be executed. Should be a task in the same suite.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 785
    },
    {
      "name": "Set Next Task If",
      "args": [
        {
          "name": "condition",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "condition"
        },
        {
          "name": "name",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name"
        },
        {
          "name": "default",
          "types": [],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "default=None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set the next task according to the condition.\nIf no default is given, does not modify execution order.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param condition:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Condition expression to evaluate</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of next task, if successful</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param default:</th><td class=\"field-body\">Name of next task, if unsuccessful</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set the next task according to the condition. If no default is given, does not modify execution order.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 806
    },
    {
      "name": "Set Next Task If Keyword Fails",
      "args": [
        {
          "name": "task",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "task"
        },
        {
          "name": "keyword",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "keyword"
        },
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Executes given keyword and sets the next task if it fails.</p>\n</div>\n",
      "shortdoc": "Executes given keyword and sets the next task if it fails.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 840
    },
    {
      "name": "Set Next Task If Keyword Succeeds",
      "args": [
        {
          "name": "task",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "task"
        },
        {
          "name": "keyword",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "keyword"
        },
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Executes given keyword and sets the next task if it succeeds.</p>\n</div>\n",
      "shortdoc": "Executes given keyword and sets the next task if it succeeds.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Tasks.py",
      "lineno": 846
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": []
}