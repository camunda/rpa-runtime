{
  "specversion": 1,
  "name": "RPA.Excel.Application",
  "doc": "<div class=\"document\">\n<p><cite>Excel.Application</cite> is a library for controlling the Excel application.</p>\n<p><strong>Examples</strong></p>\n<p><strong>Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">             </span><span class=\"nn\">RPA.Excel.Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Setup</span><span class=\"p\">          </span><span class=\"nf\">Open Application</span><span class=\"p\">\n</span><span class=\"kn\">Task Teardown</span><span class=\"p\">       </span><span class=\"nf\">Quit Application</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Manipulate Excel application</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">           </span><span class=\"s\">workbook.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Set Active Worksheet</span><span class=\"p\">    </span><span class=\"s\">sheetname=new stuff</span><span class=\"p\">\n    </span><span class=\"nf\">Write To Cells</span><span class=\"p\">          </span><span class=\"s\">row=1</span><span class=\"p\">\n    ...                     </span><span class=\"s\">column=1</span><span class=\"p\">\n    ...                     </span><span class=\"s\">value=my data</span><span class=\"p\">\n    </span><span class=\"nf\">Save Excel</span><span class=\"p\">\n\n</span><span class=\"gu\">Run Excel Macro</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">   </span><span class=\"s\">orders_with_macro.xlsm</span><span class=\"p\">\n    </span><span class=\"nf\">Run Macro</span><span class=\"p\">       </span><span class=\"s\">Sheet1.CommandButton1_Click</span><span class=\"p\">\n\n</span><span class=\"gu\">Export Workbook as PDF</span><span class=\"p\">\n    </span><span class=\"nf\">Open Workbook</span><span class=\"p\">           </span><span class=\"s\">workbook.xlsx</span><span class=\"p\">\n    </span><span class=\"nf\">Export as PDF</span><span class=\"p\">           </span><span class=\"s\">workbook.pdf</span>\n</pre>\n<p><strong>Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Excel.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span><span class=\"w\">\n\n</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_application</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"s1\">'workbook.xlsx'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">set_active_worksheet</span><span class=\"p\">(</span><span class=\"n\">sheetname</span><span class=\"o\">=</span><span class=\"s1\">'new stuff'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">write_to_cells</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'new data'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">save_excel</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">quit_application</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Caveats</strong></p>\n<p>This library works on a Windows operating system with UI enabled only, and you must\nensure that you open the app first with <tt class=\"docutils literal\">Open Application</tt> before running any\nother relevant keyword which requires to operate on an open app. The application is\nautomatically closed at the end of the task execution, so this can be changed by\nimporting the library with the <cite>autoexit=${False}</cite> setting.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">     </span><span class=\"nn\">RPA.Excel|Outlook|Word.Application</span><span class=\"p\">    </span><span class=\"s\">autoexit=</span><span class=\"p\">${</span><span class=\"nv\">False</span><span class=\"p\">}</span>\n</pre>\n<p>If you're running the Process by Control Room through a custom self-hosted Worker\nservice, then please make sure that you enable an RDP session by ticking &quot;Use\nDesktop Connection&quot; under the Step configuration.</p>\n<p>If you still encounter issues with opening a document, please ensure that file can\nbe opened first manually and dismiss any alert potentially blocking the process.</p>\n<p>Check the documentation below for more info:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop\">https://robocorp.com/docs/control-room/unattended/worker-setups/windows-desktop</a></li>\n<li><a class=\"reference external\" href=\"https://robocorp.com/docs/faq/windows-server-2016\">https://robocorp.com/docs/faq/windows-server-2016</a></li>\n</ul>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:55",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
  "lineno": 96,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "args",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize the library instance by wrapping the COM Windows app.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param autoexit:</th><td class=\"field-body\">Automatically close the app when the process finishes.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Initialize the library instance by wrapping the COM Windows app.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 145
    }
  ],
  "keywords": [
    {
      "name": "Add New Sheet",
      "args": [
        {
          "name": "sheetname",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "sheetname: str"
        },
        {
          "name": "create_workbook",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "create_workbook: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Add new worksheet to workbook. Workbook is created by default if\nit does not exist.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetname:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for sheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param create_workbook:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">create workbook if True, defaults to True</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">error is raised if workbook does not exist and\n<cite>create_workbook</cite> is False</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Add new worksheet to workbook. Workbook is created by default if it does not exist.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 209
    },
    {
      "name": "Add New Workbook",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Adds new workbook for Excel application</p>\n</div>\n",
      "shortdoc": "Adds new workbook for Excel application",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 159
    },
    {
      "name": "Close Document",
      "args": [
        {
          "name": "save_changes",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "save_changes: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Close the active document and app (if open).</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param save_changes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Enable changes saving on quit. (<cite>False</cite> by default)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Close the active document and app (if open).",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/application.py",
      "lineno": 179
    },
    {
      "name": "Create Pivot Field",
      "args": [
        {
          "name": "data_column",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "data_column: str"
        },
        {
          "name": "operation",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "operation: str"
        },
        {
          "name": "numberformat",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "numberformat: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create pivot field object parameters.</p>\n<p><em>Note.</em> At the moment operation &quot;DISTINCT COUNT&quot; is not\nsupported as there seems to be issues in the COM interface,\nwhich have not been resolved yet (regarding this library\nimplementation).</p>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">field_count</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">create_pivot_field</span><span class=\"p\">(</span><span class=\"s2\">&quot;price&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;count&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;#&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">field_avg</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">create_pivot_field</span><span class=\"p\">(</span><span class=\"s2\">&quot;price&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;average&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;#0,#0&quot;</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${field_sum}=</span><span class=\"p\">    </span><span class=\"c\">Create Pivot Field</span><span class=\"p\">    </span><span class=\"c\">price</span><span class=\"p\">    </span><span class=\"c\">sum</span><span class=\"p\">    </span><span class=\"c\">#,#0\n${field_max}=</span><span class=\"p\">    </span><span class=\"c\">Create Pivot Field</span><span class=\"p\">    </span><span class=\"c\">price</span><span class=\"p\">    </span><span class=\"c\">max</span><span class=\"p\">    </span><span class=\"c\">#,#0</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param data_column:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the data column</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param operation:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the possible operations\n(SUM, AVERAGE, MAX, MIN, COUNT)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param numberformat:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Excel cell number format, by default\nnumber format is not set for the field</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">field object</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Create pivot field object parameters.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 395
    },
    {
      "name": "Create Pivot Table",
      "args": [
        {
          "name": "source_worksheet",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "source_worksheet: str"
        },
        {
          "name": "pivot_worksheet",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "pivot_worksheet: str"
        },
        {
          "name": "rows",
          "types": [
            "List[str]"
          ],
          "typedocs": {
            "List[str]": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "rows: List[str]"
        },
        {
          "name": "fields",
          "types": [
            "List[PivotField]"
          ],
          "typedocs": {
            "List[PivotField]": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "fields: List[PivotField]"
        },
        {
          "name": "sort_field",
          "types": [
            "PivotField",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sort_field: PivotField | None = None"
        },
        {
          "name": "sort_direction",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "descending",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sort_direction: str = descending"
        },
        {
          "name": "data_range",
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "data_range: Any | None = None"
        },
        {
          "name": "pivot_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "PivotTable1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pivot_name: str = PivotTable1"
        },
        {
          "name": "collapse_rows",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "collapse_rows: bool = True"
        },
        {
          "name": "show_grand_total",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "show_grand_total: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create a pivot table in the specified worksheet.</p>\n<p>This is a initial implementation of the pivot table creation,\nwhich might not work in all cases. The alternative way\nof creating pivot tables is to use a macro an run it.</p>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;products&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;expense_type&quot;</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">field_count</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">create_pivot_field</span><span class=\"p\">(</span><span class=\"s2\">&quot;price&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;count&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;#&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">field_avg</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">create_pivot_field</span><span class=\"p\">(</span><span class=\"s2\">&quot;price&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;average&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;#0,#0&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">pivottable</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">create_pivot_table</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"n\">source_worksheet</span><span class=\"o\">=</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">pivot_worksheet</span><span class=\"o\">=</span><span class=\"s2\">&quot;test!R5C5&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"n\">rows</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">field_count</span><span class=\"p\">,</span> <span class=\"n\">field_avg</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{rows}=</span><span class=\"p\">    </span><span class=\"c\">Create List</span><span class=\"p\">    </span><span class=\"c\">products</span><span class=\"p\">    </span><span class=\"c\">expense_type</span><span class=\"p\">\n</span><span class=\"c\">${field_sum}=</span><span class=\"p\">    </span><span class=\"c\">Create Pivot Field</span><span class=\"p\">    </span><span class=\"c\">price</span><span class=\"p\">    </span><span class=\"c\">sum</span><span class=\"p\">    </span><span class=\"c\">#,#0\n${field_max}=</span><span class=\"p\">    </span><span class=\"c\">Create Pivot Field</span><span class=\"p\">    </span><span class=\"c\">price</span><span class=\"p\">    </span><span class=\"c\">max</span><span class=\"p\">    </span><span class=\"c\">#,#0\n&#64;{fields}=</span><span class=\"p\">   </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">${field_sum}</span><span class=\"p\">    </span><span class=\"c\">${field_max}</span><span class=\"p\">\n</span><span class=\"c\">${pivottable}=</span><span class=\"p\">    </span><span class=\"c\">Create Pivot Table</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">source_worksheet=data</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">pivot_worksheet=test!R5C5</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">rows=${rows}</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">fields=${fields}</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param source_worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the source worksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pivot_worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the pivot worksheet, can\nbe the same as the source worksheet but then cell location\nof the pivot table needs to be given in the format &quot;R1C1&quot;\n(R is a column numbe and C is a row number, e.g. &quot;R1C1&quot; is A1)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param rows:</th><td class=\"field-body\">columns in the <cite>source_worksheet</cite> which are used\nas pivot table rows</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param fields:</th><td class=\"field-body\">columns for the pivot table data fields</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sort_field:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">field to sort the pivot table by (one of the\n<cite>fields</cite>)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sort_direction:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">sort direction (ascending or descending),\ndefault is descending</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param data_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source data range, if not given then\nthe whole used range of <cite>source_worksheet</cite> will be used</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pivot_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the pivot table, if not given\nthen the name is &quot;PivotTable1&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param collapse_rows:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if <cite>True</cite> then the first row will be collapsed</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param show_grand_total:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if <cite>True</cite> then the grand total will be shown\nfor the columns</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">created <cite>PivotTable</cite> object</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Create a pivot table in the specified worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 431
    },
    {
      "name": "Create Table",
      "args": [
        {
          "name": "table_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table_name: str"
        },
        {
          "name": "table_range",
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "table_range: Any | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Create a table in the current worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param table_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name for the table</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param table_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">source table range, if not given then\nthe whole used range of <cite>source_worksheet</cite> will be used</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Create a table in the current worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 680
    },
    {
      "name": "Export As Pdf",
      "args": [
        {
          "name": "pdf_filename",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "pdf_filename: str"
        },
        {
          "name": "excel_filename",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "excel_filename: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Export Excel as PDF file</p>\n<p>If Excel filename is not given, the currently open workbook\nwill be exported as PDF.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pdf_filename:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">PDF filename to save</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param excel_filename:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Excel filename to open</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Export Excel as PDF file",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 377
    },
    {
      "name": "Find",
      "args": [
        {
          "name": "search_string",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "search_string: str"
        },
        {
          "name": "search_range",
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "search_range: Any | None = None"
        },
        {
          "name": "max_results",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "max_results: int | None = None"
        },
        {
          "name": "search_order",
          "types": [
            "SearchOrder"
          ],
          "typedocs": {
            "SearchOrder": "SearchOrder"
          },
          "defaultValue": "ROWS",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "search_order: SearchOrder = ROWS"
        },
        {
          "name": "match_case",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "match_case: bool = False"
        },
        {
          "name": "search_type",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "search_type: str | None = None"
        },
        {
          "name": "search_after",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "search_after: str | None = None"
        },
        {
          "name": "exact",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "exact: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Keyword for finding text in the current worksheet.</p>\n<p>Wildcard can be used in a search string. The asterisk (*) represents\nany series of characters, and the question mark (?) represents a single\ncharacter.</p>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ranges</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;32.145.???.1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;IP!E1:E9999&quot;</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">ranges</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;ADDR = </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Address</span><span class=\"si\">}</span><span class=\"s2\"> VALUE = </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Value</span> <span class=\"o\">=</span> <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;32.145.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;192.168.&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">BorderAround</span><span class=\"p\">()</span>\n</pre>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${ranges}=</span><span class=\"p\">    </span><span class=\"c\">Find</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">search_string=32.145.*</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">search_range=IP!A1:A9999</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">max_results=6</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">    </span><span class=\"c\">search_order=COLUMNS</span><span class=\"p\">\n\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${ranges}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{ranges}</span><span class=\"p\">\n    </span><span class=\"c\">${value}=</span><span class=\"p\">    </span><span class=\"c\">Set Variable</span><span class=\"p\">    </span><span class=\"c\">${range.Value}</span><span class=\"p\">\n    </span><span class=\"c\">Log to console</span><span class=\"p\">    </span><span class=\"c\">ADDR = ${range.Address} VALUE = ${value}</span><span class=\"p\">\n    </span><span class=\"c\">${new_value}=</span><span class=\"p\">    </span><span class=\"c\">Replace String</span><span class=\"p\">    </span><span class=\"c\">${value}</span><span class=\"p\">    </span><span class=\"c\">32.145.</span><span class=\"p\">    </span><span class=\"c\">192.168.</span><span class=\"p\">\n    </span><span class=\"c\">Set Object Property</span><span class=\"p\">    </span><span class=\"c\">${range}</span><span class=\"p\">    </span><span class=\"c\">Value</span><span class=\"p\">    </span><span class=\"c\">${new_value}</span><span class=\"p\">\n    </span><span class=\"c\">Call Method</span><span class=\"p\">    </span><span class=\"c\">${range}</span><span class=\"p\">    </span><span class=\"c\">BorderAround</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">what to search for</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if not given will search the current\nworksheet</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_results:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">can be used to limit number of results</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_order:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">by default search is executed by ROWS,\ncan be changed to COLUMNS</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param match_case:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if <cite>True</cite> then the search is case sensitive</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">can be FORMULAS, VALUES, COMMENTS or COMMENTS THREADED</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param search_after:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">search after this cell</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param exact:</th><td class=\"field-body\">if <cite>True</cite> then the search is expected to be a exact match</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of <cite>Range</cite> objects</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Keyword for finding text in the current worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 579
    },
    {
      "name": "Find First Available Cell",
      "args": [
        {
          "name": "worksheet",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "worksheet: Any = None"
        },
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row: int = 1"
        },
        {
          "name": "column",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column: int = 1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Find first available free cell</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">starting row for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">starting column for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">tuple (row, column) or (None, None) if not found</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Find first available free cell",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 243
    },
    {
      "name": "Find First Available Row",
      "args": [
        {
          "name": "worksheet",
          "types": [
            "Any",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "worksheet: Any | None = None"
        },
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row: int = 1"
        },
        {
          "name": "column",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "1",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column: int = 1"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Find first available free row</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">starting row for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">starting column for search, defaults to 1</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">row or None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Find first available free row",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 229
    },
    {
      "name": "Get Pivot Tables",
      "args": [
        {
          "name": "pivot_table_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "pivot_table_name: str | None = None"
        },
        {
          "name": "as_list",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "as_list: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return pivot tables in the current worksheet.</p>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Tables</span> <span class=\"kn\">import</span> <span class=\"n\">Tables</span><span class=\"w\">\n\n</span><span class=\"n\">pivot_tables</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">get_pivot_tables</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"k\">for</span> <span class=\"n\">tbl_name</span><span class=\"p\">,</span> <span class=\"n\">tbl_list</span> <span class=\"ow\">in</span> <span class=\"n\">pivot_tables</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;TABLE NAME: </span><span class=\"si\">{</span><span class=\"n\">tbl_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">tbl_list</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:],</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">tbl_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${pivots}=</span><span class=\"p\">    </span><span class=\"c\">Get Pivot Tables</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${tablename}</span><span class=\"p\">    </span><span class=\"c\">${pivot}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&amp;{pivots}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">${tablename}</span><span class=\"p\">\n    </span><span class=\"c\">${table}=</span><span class=\"p\">    </span><span class=\"c\">RPA.Tables.Create Table</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">data=${{$pivot[1:]}}</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">columns=${{$pivot[0]}}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">${table}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param pivot_table_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the pivot table to return,\nwill return by default all pivot tables</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param as_list:</th><td class=\"field-body\">if <cite>True</cite> then the pivot table data is returned as list\nof lists, if <cite>False</cite> then the data is returned as list of <cite>Range</cite> objects</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary of pivot tables (names as keys and table data as values)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Return pivot tables in the current worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 744
    },
    {
      "name": "Get Range",
      "args": [
        {
          "name": "table_range",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "table_range: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get range object for the given range address.</p>\n<p>These object properties and methods can be then called.</p>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">get_range</span><span class=\"p\">(</span><span class=\"s1\">'A1:B2'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">source</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;ADDR = </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Address</span><span class=\"si\">}</span><span class=\"s2\"> VAL = </span><span class=\"si\">{</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">BorderAround</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">Merge</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"c1\"># Creating a formula and copying it to another range</span><span class=\"w\">\n</span><span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">get_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;E4&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Formula</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;=SUM(C4:D4)&quot;</span><span class=\"w\">\n</span><span class=\"n\">destination</span> <span class=\"o\">=</span> <span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">get_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;E5:E10&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">get_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;E4&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">Copy</span><span class=\"p\">(</span><span class=\"n\">destination</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${range}=</span><span class=\"p\">    </span><span class=\"c\">Get Range</span><span class=\"p\">    </span><span class=\"c\">data!A1:A4</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">    </span><span class=\"c\">${r}</span><span class=\"p\">    </span><span class=\"c\">IN</span><span class=\"p\">    </span><span class=\"c\">&#64;{range}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">    </span><span class=\"c\">ADDR = ${r.Address} VAL = ${r.Value}</span><span class=\"p\">\n    </span><span class=\"c\">Call Method</span><span class=\"p\">  </span><span class=\"c\">${r}</span><span class=\"p\">    </span><span class=\"c\">BorderAround</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">Call Method</span><span class=\"p\">    </span><span class=\"c\">${range}</span><span class=\"p\">    </span><span class=\"c\">Merge</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param table_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">range to return</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">range object</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Get range object for the given range address.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 709
    },
    {
      "name": "List Tables",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Return tables in the current worksheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of table names</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Return tables in the current worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 702
    },
    {
      "name": "Merge Range",
      "args": [
        {
          "name": "initial_range",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "initial_range: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Merges a range of cells.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param initial_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">range of cells to merge</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Merges a range of cells.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 909
    },
    {
      "name": "Open Application",
      "args": [
        {
          "name": "visible",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "visible: bool = False"
        },
        {
          "name": "display_alerts",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "display_alerts: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Open the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param visible:</th><td class=\"field-body\">Show the window on opening. (<cite>False</cite> by default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param display_alerts:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Display alert popups. (<cite>False</cite> by default)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Open the application.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/application.py",
      "lineno": 140
    },
    {
      "name": "Open Workbook",
      "args": [
        {
          "name": "filename",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filename: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Open Excel by filename</p>\n<p>By default sets active worksheet to sheet number 1</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">path to filename</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Open Excel by filename",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 164
    },
    {
      "name": "Quit Application",
      "args": [
        {
          "name": "save_changes",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "save_changes: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Quit the application.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param save_changes:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Enable to save changes on quit. (<cite>False</cite> by default)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Quit the application.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/application.py",
      "lineno": 204
    },
    {
      "name": "Read From Cells",
      "args": [
        {
          "name": "worksheet",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "worksheet: Any = None"
        },
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row: int = None"
        },
        {
          "name": "column",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column: int = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Read value from cell.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if cell is not given</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Read value from cell.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 301
    },
    {
      "name": "Remove Hidden Columns And Rows",
      "args": [
        {
          "name": "initial_range",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "initial_range: Any"
        },
        {
          "name": "worksheet",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "worksheet: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Removes hidden columns and rows from a range and returns a new range.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param initial_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">range of cells to remove hidden columns and rows from</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">set active worksheet (name) before removing hidden\ncolumns and rows</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">new range or initial range if no hidden cells found</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Removes hidden columns and rows from a range and returns a new range.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 873
    },
    {
      "name": "Run Macro",
      "args": [
        {
          "name": "macro_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "macro_name: str"
        },
        {
          "name": "args",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_POSITIONAL",
          "required": false,
          "repr": "*args: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Run Excel macro with given name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param macro_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">macro to run</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param args:</th><td class=\"field-body\">arguments to pass to macro</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Run Excel macro with given name",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 368
    },
    {
      "name": "Save Excel",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Saves Excel file</p>\n</div>\n",
      "shortdoc": "Saves Excel file",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 325
    },
    {
      "name": "Save Excel As",
      "args": [
        {
          "name": "filename",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "filename: str"
        },
        {
          "name": "autofit",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "autofit: bool = False"
        },
        {
          "name": "file_format",
          "types": [],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "file_format=None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Save Excel with name if workbook is open</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param filename:</th><td class=\"field-body\">where to save file</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param autofit:</th><td class=\"field-body\">autofit cell widths if True, defaults to False</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param file_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">format of file</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Note:</strong> Changing the file extension for the path does not\naffect the actual format. To use an older format, use\nthe <tt class=\"docutils literal\">file_format</tt> argument with one of the following values:</p>\n<p><a class=\"reference external\" href=\"https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat\">https://docs.microsoft.com/en-us/office/vba/api/excel.xlfileformat</a></p>\n<p>Examples:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\"># Save workbook in modern format\nSave excel as</span><span class=\"p\">    </span><span class=\"c\">orders.xlsx</span><span class=\"p\">\n\n</span><span class=\"c\"># Save workbook in Excel 97 format (format from above URL)\nSave excel as</span><span class=\"p\">    </span><span class=\"c\">legacy.xls</span><span class=\"p\">   </span><span class=\"c\">file_format=${56}</span>\n</pre>\n</div>\n",
      "shortdoc": "Save Excel with name if workbook is open",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 331
    },
    {
      "name": "Set Active Worksheet",
      "args": [
        {
          "name": "sheetname",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheetname: str = None"
        },
        {
          "name": "sheetnumber",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheetnumber: int = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set active worksheet by either its sheet number or name</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetname:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of Excel sheet, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheetnumber:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">index of Excel sheet, defaults to None</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set active worksheet by either its sheet number or name",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 195
    },
    {
      "name": "Set Object Property",
      "args": [
        {
          "name": "object_instance",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "object_instance"
        },
        {
          "name": "property_name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "property_name: str"
        },
        {
          "name": "value",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "value: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set the property of any object.</p>\n<p>This is a utility keyword for Robot Framework syntax to set object\nproperty values.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${new_value}=</span><span class=\"p\">    </span><span class=\"c\">Replace String</span><span class=\"p\">    </span><span class=\"c\">${value}</span><span class=\"p\">    </span><span class=\"c\">10.132.</span><span class=\"p\">    </span><span class=\"c\">5511.11.</span><span class=\"p\">\n</span><span class=\"c\">Set Object Property</span><span class=\"p\">    </span><span class=\"c\">${result}</span><span class=\"p\">    </span><span class=\"c\">Value</span><span class=\"p\">    </span><span class=\"c\">${new_value}</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param object_instance:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">object instance to set the property</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param property_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">property name to set</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">value to set</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Set the property of any object.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/application.py",
      "lineno": 219
    },
    {
      "name": "Unmerge Range",
      "args": [
        {
          "name": "initial_range",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "initial_range: Any"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Unmerges a range of cells.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param initial_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">range of cells to unmerge</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Unmerges a range of cells.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 897
    },
    {
      "name": "Write Data To Range",
      "args": [
        {
          "name": "target_range",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "target_range: Any"
        },
        {
          "name": "values",
          "types": [
            "Table",
            "List[List]"
          ],
          "typedocs": {
            "List[List]": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "values: Table | List[List]"
        },
        {
          "name": "log_warnings",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "log_warnings: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Writes data to the specified range(s) in the Excel worksheet.</p>\n<p>The range width should match the number of columns in the data.</p>\n<p>Multiple ranges can be specified by separating them with a semicolon, but\nstill the total width of ranges should match the number of columns in the data.</p>\n<p>Python example:</p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.Tables</span> <span class=\"kn\">import</span> <span class=\"n\">Tables</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.Excel.Application</span> <span class=\"kn\">import</span> <span class=\"n\">Application</span><span class=\"w\">\n\n</span><span class=\"n\">excel</span> <span class=\"o\">=</span> <span class=\"n\">Application</span><span class=\"p\">()</span><span class=\"w\">\n\n</span><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">Tables</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">read_table_from_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;input.csv&quot;</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">open_workbook</span><span class=\"p\">(</span><span class=\"s2\">&quot;result.xslx)</span><span class=\"w\">\n</span><span class=\"n\">excel</span><span class=\"o\">.</span><span class=\"n\">write_data_to_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;A2:P100&quot;</span><span class=\"p\">,</span> <span class=\"n\">table</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${input_table}=</span><span class=\"p\">    </span><span class=\"c\">Read table from CSV</span><span class=\"p\">    </span><span class=\"c\">input.csv</span><span class=\"p\">    </span><span class=\"c\">header=True</span><span class=\"p\">\n</span><span class=\"c\">Open Workbook</span><span class=\"p\">      </span><span class=\"c\">result.xlsx</span><span class=\"p\">\n</span><span class=\"c\">Write Data To Range</span><span class=\"p\">    </span><span class=\"c\">A2:L21</span><span class=\"p\">    </span><span class=\"c\">${input_table}</span><span class=\"p\">   </span><span class=\"c\"># Single range\nWrite Data To Range</span><span class=\"p\">    </span><span class=\"c\">C2:E21;G2:I21</span><span class=\"p\">    </span><span class=\"c\">${input_table}</span><span class=\"p\">   </span><span class=\"c\"># Multiple ranges</span>\n</pre>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param target_range:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A1 string presentation of the range(s) to write or\nRange object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param values:</th><td class=\"field-body\"><cite>Table</cite> or list of lists to write to the range(s).</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param log_warnings:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">on <cite>False</cite> will suppress logging warning, default\nis <cite>True</cite> (warnings are logged)</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Writes data to the specified range(s) in the Excel worksheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 803
    },
    {
      "name": "Write To Cells",
      "args": [
        {
          "name": "worksheet",
          "types": [
            "Any"
          ],
          "typedocs": {},
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "worksheet: Any = None"
        },
        {
          "name": "row",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row: int = None"
        },
        {
          "name": "column",
          "types": [
            "int"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column: int = None"
        },
        {
          "name": "value",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "value: str = None"
        },
        {
          "name": "number_format",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "number_format: str = None"
        },
        {
          "name": "formula",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "formula: str = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Write value, number_format and/or formula into cell.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param worksheet:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">worksheet to handle, defaults to active worksheet if None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">target row, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param value:</th><td class=\"field-body\">possible value to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param number_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">possible number format to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param formula:</th><td class=\"field-body\">possible format to set, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">raises ValueError:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">if cell is not given</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Write value, number_format and/or formula into cell.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Excel/Application.py",
      "lineno": 265
    }
  ],
  "dataTypes": {
    "enums": [
      {
        "type": "Enum",
        "name": "SearchOrder",
        "doc": "<div class=\"document\">\n<p>Enumeration for search order.</p>\n</div>\n",
        "members": [
          {
            "name": "ROWS",
            "value": "ROWS"
          },
          {
            "name": "COLUMNS",
            "value": "COLUMNS"
          }
        ]
      }
    ],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Add New Sheet",
        "Close Document",
        "Create Pivot Table",
        "Find",
        "Get Pivot Tables",
        "Open Application",
        "Quit Application",
        "Save Excel As",
        "Write Data To Range"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Find",
        "Find First Available Cell",
        "Find First Available Row",
        "Read From Cells",
        "Set Active Worksheet",
        "Write To Cells"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Create Pivot Table",
        "Write Data To Range"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Create Pivot Field",
        "Create Pivot Table",
        "Create Table",
        "Export As Pdf",
        "Find",
        "Find First Available Row",
        "Get Pivot Tables",
        "Remove Hidden Columns And Rows"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Enum",
      "name": "SearchOrder",
      "doc": "<div class=\"document\">\n<p>Enumeration for search order.</p>\n</div>\n",
      "usages": [
        "Find"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "ROWS",
          "value": "ROWS"
        },
        {
          "name": "COLUMNS",
          "value": "COLUMNS"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Add New Sheet",
        "Create Pivot Field",
        "Create Pivot Table",
        "Create Table",
        "Export As Pdf",
        "Find",
        "Get Pivot Tables",
        "Get Range",
        "Open Workbook",
        "Remove Hidden Columns And Rows",
        "Run Macro",
        "Save Excel As",
        "Set Active Worksheet",
        "Set Object Property",
        "Write To Cells"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}