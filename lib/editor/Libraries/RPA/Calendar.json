{
  "specversion": 2,
  "name": "Camunda.Calendar",
  "doc": "<div class=\"document\">\n<p>Library for handling different operations for date and time\nhandling especially in business days and holiday contexts.</p>\n<p>Utilizing  <a class=\"reference external\" href=\"https://pypi.org/project/pendulum/\">pendulum</a> and\n<a class=\"reference external\" href=\"https://pypi.org/project/holidays/\">holidays</a> packages.</p>\n<p>Library is by default using days from Monday to Friday as business\ndays, but that can be changed by giving list of weekdays to\n<tt class=\"docutils literal\">Set Business Days</tt> keyword. A weekday is given as a integer, the\n0 for Sunday and 6 for Saturday.</p>\n<p>Common country holidays are respected when getting next and previous\nbusiness days, but custom holidays can be added into consideration\nusing keyword <tt class=\"docutils literal\">Add Custom Holidays</tt> keyword.</p>\n<p>Some dates containing for example month names are in English (en), but\nthe locale of the library can be changed with keyword <tt class=\"docutils literal\">Set Locale</tt> or\nfor specific keyword if that has a <tt class=\"docutils literal\">locale</tt> parameter.</p>\n</div>\n",
  "version": "",
  "generated": "2025-02-03T12:59:43+00:00",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
  "lineno": 24,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Add Custom Holidays",
      "args": [
        {
          "name": "days",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "Union",
                    "typedoc": null,
                    "nested": [
                      {
                        "name": "str",
                        "typedoc": "string",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "date",
                        "typedoc": "date",
                        "nested": [],
                        "union": false
                      },
                      {
                        "name": "DateTime",
                        "typedoc": "datetime",
                        "nested": [],
                        "union": false
                      }
                    ],
                    "union": true
                  }
                ],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime",
            "List[str | date | DateTime]"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "days: str | date | DateTime | List[str | date | DateTime]"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Add a day or list of days which are considered as holidays\nin addition to country specific holidays when calculating</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param days:</th><td class=\"field-body\">string or list of dates to consider as holidays</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of current custom holidays</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">custom_holidays</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">add_custom_holidays</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-03-08&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># custom_holidays == [&quot;2023-03-08&quot;]</span><span class=\"w\">\n</span><span class=\"n\">custom_holidays</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">add_custom_holidays</span><span class=\"p\">([</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-03-09&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2023-03-10&quot;</span><span class=\"w\">\n</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"c1\"># custom_holidays == [&quot;2023-03-08&quot;, &quot;2023-03-09&quot;, &quot;2023-03-10&quot;]</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{custom_holidays}=</span><span class=\"p\">   </span><span class=\"c\">Add Custom Holidays</span><span class=\"p\">   </span><span class=\"c\">2023-03-08</span><span class=\"p\">\n</span><span class=\"c\"># ${custom_holidays} == [&quot;2023-03-08&quot;]\n&#64;{more_holidays}=</span><span class=\"p\">   </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">2023-03-09</span><span class=\"p\">   </span><span class=\"c\">2023-03-10</span><span class=\"p\">\n</span><span class=\"c\">&#64;{custom_holidays}=</span><span class=\"p\">   </span><span class=\"c\">Add Custom Holidays</span><span class=\"p\">   </span><span class=\"c\">${more_holidays}</span><span class=\"p\">\n</span><span class=\"c\"># ${custom_holidays} == [&quot;2023-03-08&quot;, &quot;2023-03-09&quot;, &quot;2023-03-10&quot;]</span>\n</pre>\n</div>\n",
      "shortdoc": "Add a day or list of days which are considered as holidays in addition to country specific holidays when calculating",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 91
    },
    {
      "name": "Compare Times",
      "args": [
        {
          "name": "time1",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "time1: str | date | DateTime"
        },
        {
          "name": "time2",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "time2: str | date | DateTime"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Compares given times and returns <cite>True</cite> if <cite>time2</cite>\nis more recent than <cite>time1</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param time1:</th><td class=\"field-body\">first time for comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param time2:</th><td class=\"field-body\">second time for comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if <cite>time2</cite> is more recent than <cite>time1</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">recent</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">compare_times</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-03-09 13:02&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;2023-03-09 13:47&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">if</span> <span class=\"n\">recent</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-03-09 13:47 is more recent&quot;</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${recent}=</span><span class=\"p\">  </span><span class=\"c\">Compare Times</span><span class=\"p\">   </span><span class=\"c\">2023-03-09 13:02</span><span class=\"p\">   </span><span class=\"c\">2023-03-09 13:47</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">  </span><span class=\"c\">${recent}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">2023-03-09 13:47 is more recent</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Compares given times and returns `True` if `time2` is more recent than `time1`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 860
    },
    {
      "name": "Compare Times ${time1} < ${time2}",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Compares given times and returns <cite>True</cite> if <cite>time2</cite>\nis more recent than <cite>time1</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param time1:</th><td class=\"field-body\">first time for comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param time2:</th><td class=\"field-body\">second time for comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if <cite>time2</cite> is more recent than <cite>time1</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${recent}=</span><span class=\"p\">  </span><span class=\"c\">Compare Times 2023-03-09 15:50 &lt; 2023-03-09 15:59</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">  </span><span class=\"c\">${recent}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">2023-03-09 15:59 is more recent</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Compares given times and returns `True` if `time2` is more recent than `time1`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 818
    },
    {
      "name": "Compare Times ${time1} > ${time2}",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Compares given times and returns <cite>True</cite> if <cite>time1</cite>\nis more recent than <cite>time2</cite>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param time1:</th><td class=\"field-body\">first time for comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param time2:</th><td class=\"field-body\">second time for comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if <cite>time1</cite> is more recent than <cite>time2</cite></td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${recent}=</span><span class=\"p\">  </span><span class=\"c\">Compare Times 2023-03-09 15:59 &gt; 2023-03-09 15:58</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">  </span><span class=\"c\">${recent}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">2023-03-09 15:59 is more recent</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Compares given times and returns `True` if `time1` is more recent than `time2`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 839
    },
    {
      "name": "Create Time",
      "args": [
        {
          "name": "date_string",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date_string: str"
        },
        {
          "name": "date_format_in",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "date_format_in: str | None = None"
        },
        {
          "name": "timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timezone: str | None = None"
        },
        {
          "name": "date_format_out",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "date_format_out: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>This keyword tries to construct valid calendar\ninstance from given date string and its expected date\nformat.</p>\n<p>See <a class=\"reference external\" href=\"https://pendulum.eustace.io/docs/#tokens\">https://pendulum.eustace.io/docs/#tokens</a> for\nvalid tokens for the date format. Tokens are\nused to form correct date and time format.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param date_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">for example. &quot;22 May 19&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param date_format_in:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">for example. &quot;DD MMM YY&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param timezone:</th><td class=\"field-body\">default timezone is &quot;UTC&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param date_format_out:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">for example. &quot;DD-MM-YY&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">set datetime as an object or string\nif <cite>date_format_out</cite> has been set</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_time</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;22 May 19&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;DD MMM YY&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${date}=</span><span class=\"p\">  </span><span class=\"c\">Create Time</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">22 May 19</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">DD MMM YY</span>\n</pre>\n</div>\n",
      "shortdoc": "This keyword tries to construct valid calendar instance from given date string and its expected date format.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 238
    },
    {
      "name": "First Business Day Of The Month",
      "args": [
        {
          "name": "date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date: str | date | DateTime"
        },
        {
          "name": "country",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "country: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return first business day of the month.</p>\n<p>If <cite>country</cite> is not given then holidays are not considered.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date:</th><td class=\"field-body\">date describing the month</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code, default <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">first business of the month</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">first_day</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">first_business_day_of_the_month</span><span class=\"p\">(</span><span class=\"s2\">&quot;2024-06-01&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># first_day == &quot;2024-06-03&quot;</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${first_day}=</span><span class=\"p\">  </span><span class=\"c\">First Business Day of the Month</span><span class=\"p\">  </span><span class=\"c\">2024-06-01</span><span class=\"p\">\n</span><span class=\"c\"># ${first_day} == &quot;2024-06-03&quot;</span>\n</pre>\n</div>\n",
      "shortdoc": "Return first business day of the month.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 669
    },
    {
      "name": "Get Iso Calendar",
      "args": [
        {
          "name": "date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date: str | date | DateTime"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Get ISO calendar information for the given date.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">parameter date:</th><td class=\"field-body\">input date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">ISO calendar object containing year, week number and weekday.</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">iso_cal</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_iso_calendar</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-03-09&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iso_cal</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iso_cal</span><span class=\"o\">.</span><span class=\"n\">week</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">iso_cal</span><span class=\"o\">.</span><span class=\"n\">weekday</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${iso_cal}=</span><span class=\"p\">  </span><span class=\"c\">Get ISO Calendar</span><span class=\"p\">  </span><span class=\"c\">2023-03-09</span><span class=\"p\">\n</span><span class=\"c\">${iso_year}=</span><span class=\"p\">  </span><span class=\"c\">Set Variable</span><span class=\"p\">  </span><span class=\"c\">${iso_cal.year}</span><span class=\"p\">\n</span><span class=\"c\">${iso_week}=</span><span class=\"p\">  </span><span class=\"c\">Set Variable</span><span class=\"p\">  </span><span class=\"c\">${iso_cal.week}</span><span class=\"p\">\n</span><span class=\"c\">${iso_weekday}=</span><span class=\"p\">  </span><span class=\"c\">Set Variable</span><span class=\"p\">  </span><span class=\"c\">${iso_cal.weekday}</span>\n</pre>\n</div>\n",
      "shortdoc": "Get ISO calendar information for the given date.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 890
    },
    {
      "name": "Is the ${date} Business Day in ${country}",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Is the date a business day in a country.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date_in:</th><td class=\"field-body\">input date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if the day is a business day, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${is_business_day}=</span><span class=\"p\">   </span><span class=\"c\">Is the 2023-01-02 business day in FI</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">   </span><span class=\"c\">${is_business_day}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">It is time for the work</span><span class=\"p\">\n</span><span class=\"c\">ELSE</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">It is time to relax</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Is the date a business day in a country.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 971
    },
    {
      "name": "Is the ${date} Holiday in ${country}",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Is the date a holiday in a country.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date_in:</th><td class=\"field-body\">input date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if the day is a holiday, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${is_it}=</span><span class=\"p\">   </span><span class=\"c\">Is the 2022-12-26 holiday in FI</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">   </span><span class=\"c\">${is_holiday}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Time to relax</span><span class=\"p\">\n</span><span class=\"c\">ELSE</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Time for the work</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Is the date a holiday in a country.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 1030
    },
    {
      "name": "Is The Date Business Day",
      "args": [
        {
          "name": "date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date: str | date | DateTime"
        },
        {
          "name": "country",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "country: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Is the date a business day in a country.</p>\n<p>If <cite>country</cite> is not given then holidays are not considered.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date:</th><td class=\"field-body\">input date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code, default <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if the day is a business day, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"k\">for</span> <span class=\"n\">day</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">32</span><span class=\"p\">):</span><span class=\"w\">\n</span>    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;2023-1-</span><span class=\"si\">{</span><span class=\"n\">day</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"w\">\n</span>    <span class=\"n\">is_business_day</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_the_date_business_day</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">if</span> <span class=\"n\">is_business_day</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'It is time for the work on </span><span class=\"si\">{</span><span class=\"n\">date</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"k\">else</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'It is time to relax on </span><span class=\"si\">{</span><span class=\"n\">date</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${day}</span><span class=\"p\">  </span><span class=\"c\">IN RANGE</span><span class=\"p\">  </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">32</span><span class=\"p\">\n    </span><span class=\"c\">${date}=</span><span class=\"p\">   </span><span class=\"c\">Set Variable</span><span class=\"p\">   </span><span class=\"c\">2023-1-${day}</span><span class=\"p\">\n    </span><span class=\"c\">${is_business_day}=</span><span class=\"p\">   </span><span class=\"c\">Is the date business day</span><span class=\"p\">  </span><span class=\"c\">${date}</span><span class=\"p\">  </span><span class=\"c\">FI</span><span class=\"p\">\n    </span><span class=\"c\">IF</span><span class=\"p\">   </span><span class=\"c\">${is_business_day}</span><span class=\"p\">\n        </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">It is time for the work on ${date}</span><span class=\"p\">\n    </span><span class=\"c\">ELSE</span><span class=\"p\">\n        </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">It is time to relax on ${date}</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Is the date a business day in a country.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 921
    },
    {
      "name": "Is The Date Holiday",
      "args": [
        {
          "name": "date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date: str | date | DateTime"
        },
        {
          "name": "country",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "country: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Is the date a holiday in a country.\nIf <cite>country</cite> is not given then checks only if date is in custom holiday list.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date_in:</th><td class=\"field-body\">input date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code, default <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\"><cite>True</cite> if the day is a holiday, <cite>False</cite> if not</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">is_holiday</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_the_date_holiday</span><span class=\"p\">(</span><span class=\"s2\">&quot;2022-12-26&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">if</span> <span class=\"n\">is_holiday</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Time to relax'</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">else</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Time for the work'</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${is_holiday}=</span><span class=\"p\">   </span><span class=\"c\">Is the date holiday</span><span class=\"p\">   </span><span class=\"c\">2022-12-26</span><span class=\"p\">   </span><span class=\"c\">FI</span><span class=\"p\">\n</span><span class=\"c\">IF</span><span class=\"p\">   </span><span class=\"c\">${is_holiday}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Time to relax</span><span class=\"p\">\n</span><span class=\"c\">ELSE</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Time for the work</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Is the date a holiday in a country. If `country` is not given then checks only if date is in custom holiday list.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 992
    },
    {
      "name": "Last Business Day Of The Month",
      "args": [
        {
          "name": "date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date: str | date | DateTime"
        },
        {
          "name": "country",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "country: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return last business day of the month.</p>\n<p>If <cite>country</cite> is not given then holidays are not considered.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date:</th><td class=\"field-body\">date describing the month</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code, default <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">last business day of the month</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">last_day</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">last_business_day_of_the_month</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-12-01&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># last_day == &quot;2023-12-29&quot;</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${last_day}=</span><span class=\"p\">  </span><span class=\"c\">Last Business Day of the Month</span><span class=\"p\">  </span><span class=\"c\">2023-12-01</span><span class=\"p\">\n</span><span class=\"c\"># ${last_day} == &quot;2023-12-29&quot;</span>\n</pre>\n</div>\n",
      "shortdoc": "Return last business day of the month.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 713
    },
    {
      "name": "Reset Custom Holidays",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Reset custom holiday list into empty list.</p>\n</div>\n",
      "shortdoc": "Reset custom holiday list into empty list.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 86
    },
    {
      "name": "Return Holidays",
      "args": [
        {
          "name": "years",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              },
              {
                "name": "List",
                "typedoc": "list",
                "nested": [
                  {
                    "name": "int",
                    "typedoc": "integer",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "int",
            "List[int]"
          ],
          "typedocs": {
            "int": "integer",
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "years: int | List[int]"
        },
        {
          "name": "country",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "country: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return holidays for a country. If country is not given\nthen only custom holidays are returned.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param years:</th><td class=\"field-body\">single year or list of years to list holidays for</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code, default <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">holidays in a dictionary, the key is the date and the\nvalue is name of the holiday</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">holidays</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">return_holidays</span><span class=\"p\">(</span><span class=\"mi\">2023</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">holiday_name</span> <span class=\"ow\">in</span> <span class=\"n\">holidays</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">date</span><span class=\"si\">}</span><span class=\"s2\"> is </span><span class=\"si\">{</span><span class=\"n\">holiday_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{holidays}=</span><span class=\"p\">  </span><span class=\"c\">Return Holidays</span><span class=\"p\">  </span><span class=\"c\">2023</span><span class=\"p\">  </span><span class=\"c\">FI</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${date}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">   </span><span class=\"c\">&#64;{holidays.keys()}</span><span class=\"p\">\n    </span><span class=\"c\">Log To Console</span><span class=\"p\">   </span><span class=\"c\">${date} is ${holidays}[${date}]</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n</div>\n",
      "shortdoc": "Return holidays for a country. If country is not given then only custom holidays are returned.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 630
    },
    {
      "name": "Return Next Business Day",
      "args": [
        {
          "name": "date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date: str | date | DateTime"
        },
        {
          "name": "country",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "country: str | None = None"
        },
        {
          "name": "return_format",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "YYYY-MM-DD",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "return_format: str = YYYY-MM-DD"
        },
        {
          "name": "locale",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locale: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return the next business day.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date:</th><td class=\"field-body\">day of origin</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code, default <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param return_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dates can be formatted for the resulting\nlist, defaults to &quot;YYYY-MM-DD&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locale:</th><td class=\"field-body\">name of the locale</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">the next business day from day of origin</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">next_business</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">return_next_business_day</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-01-05&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># next_business == &quot;2023-01-09&quot;</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${next_business}=</span><span class=\"p\">  </span><span class=\"c\">Return Next Business Day</span><span class=\"p\">  </span><span class=\"c\">2023-01-05</span><span class=\"p\">  </span><span class=\"c\">FI</span><span class=\"p\">\n</span><span class=\"c\"># ${next_business} == &quot;2023-01-09&quot;</span>\n</pre>\n</div>\n",
      "shortdoc": "Return the next business day.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 566
    },
    {
      "name": "Return Previous Business Day",
      "args": [
        {
          "name": "date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "date: str | date | DateTime"
        },
        {
          "name": "country",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "country: str | None = None"
        },
        {
          "name": "return_format",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "YYYY-MM-DD",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "return_format: str = YYYY-MM-DD"
        },
        {
          "name": "locale",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locale: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return the previous business day.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param date:</th><td class=\"field-body\">day of origin</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param country:</th><td class=\"field-body\">country code, default <cite>None</cite></td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param return_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dates can be formatted for the resulting\nlist, defaults to &quot;YYYY-MM-DD&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locale:</th><td class=\"field-body\">name of the locale</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">the previous business day from day of origin</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">prev_business</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">return_previous_business_day</span><span class=\"p\">(</span><span class=\"s2\">&quot;2023-01-09&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;FI&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># prev == &quot;2023-01-05&quot;</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${previous_business}=</span><span class=\"p\">  </span><span class=\"c\">Return Previous Business Day</span><span class=\"p\">  </span><span class=\"c\">2023-01-09</span><span class=\"p\">  </span><span class=\"c\">FI</span><span class=\"p\">\n</span><span class=\"c\"># ${previous_business} == &quot;2023-01-05&quot;</span>\n</pre>\n</div>\n",
      "shortdoc": "Return the previous business day.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 533
    },
    {
      "name": "Set Business Days",
      "args": [
        {
          "name": "days",
          "type": {
            "name": "List",
            "typedoc": "list",
            "nested": [
              {
                "name": "int",
                "typedoc": "integer",
                "nested": [],
                "union": false
              }
            ],
            "union": false
          },
          "types": [
            "List[int]"
          ],
          "typedocs": {
            "List": "list",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "days: List[int]"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set weekdays which are considered as business days\nfor calculating previous and next business day.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param days:</th><td class=\"field-body\">list of integers denoting weekdays</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">previous list of weekdays</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"c1\"># set 4 day work week</span><span class=\"w\">\n</span><span class=\"n\">previous</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_business_days</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\">\n</span><span class=\"c1\"># previous == [1,2,3,4,5]</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{4days}=</span><span class=\"p\">   </span><span class=\"c\">Create List</span><span class=\"p\">   </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">2</span><span class=\"p\">  </span><span class=\"c\">3</span><span class=\"p\">  </span><span class=\"c\">4</span><span class=\"p\">\n</span><span class=\"c\">&#64;{previous}=</span><span class=\"p\">    </span><span class=\"c\">Set Business Days</span><span class=\"p\">  </span><span class=\"c\">${days}</span><span class=\"p\">\n</span><span class=\"c\"># ${previous} == [1,2,3,4,5]</span>\n</pre>\n</div>\n",
      "shortdoc": "Set weekdays which are considered as business days for calculating previous and next business day.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 128
    },
    {
      "name": "Set Locale",
      "args": [
        {
          "name": "locale_name",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "locale_name: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Set locale globally for the library</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param locale_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">name of the locale</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">name of the previous locale</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">set_locale</span><span class=\"p\">(</span><span class=\"s2\">&quot;es&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">time_now</span><span class=\"p\">(</span><span class=\"n\">return_format</span><span class=\"o\">=</span><span class=\"s2\">&quot;dddd DD MMMM YYYY&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># now == &quot;jueves 09 marzo 2023&quot;</span><span class=\"w\">\n</span><span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">set_locale</span><span class=\"p\">(</span><span class=\"s2\">&quot;en&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">library</span><span class=\"o\">.</span><span class=\"n\">time_now</span><span class=\"p\">(</span><span class=\"n\">return_format</span><span class=\"o\">=</span><span class=\"s2\">&quot;dddd DD MMMM YYYY&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># now == &quot;Thursday 09 March 2023&quot;</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Locale</span><span class=\"p\">   </span><span class=\"c\">es</span><span class=\"p\">\n</span><span class=\"c\">${now}=</span><span class=\"p\">  </span><span class=\"c\">Time Now</span><span class=\"p\">  </span><span class=\"c\">return_format=dddd DD MMMM YYYY</span><span class=\"p\">\n</span><span class=\"c\"># ${now} == &quot;jueves 09 marzo 2023&quot;\nSet Locale</span><span class=\"p\">   </span><span class=\"c\">en</span><span class=\"p\">\n</span><span class=\"c\">${now}=</span><span class=\"p\">  </span><span class=\"c\">Time Now</span><span class=\"p\">  </span><span class=\"c\">return_format=dddd DD MMMM YYYY</span><span class=\"p\">\n</span><span class=\"c\"># ${now} == &quot;Thursday 09 March 2023&quot;</span>\n</pre>\n</div>\n",
      "shortdoc": "Set locale globally for the library",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 51
    },
    {
      "name": "Sort List Of Dates",
      "args": [
        {
          "name": "dates",
          "type": {
            "name": "List",
            "typedoc": "list",
            "nested": [
              {
                "name": "Union",
                "typedoc": null,
                "nested": [
                  {
                    "name": "str",
                    "typedoc": "string",
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "date",
                    "typedoc": "date",
                    "nested": [],
                    "union": false
                  },
                  {
                    "name": "DateTime",
                    "typedoc": "datetime",
                    "nested": [],
                    "union": false
                  }
                ],
                "union": true
              }
            ],
            "union": false
          },
          "types": [
            "List[str | date | DateTime]"
          ],
          "typedocs": {
            "List": "list",
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "dates: List[str | date | DateTime]"
        },
        {
          "name": "return_format",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "return_format: str | None = None"
        },
        {
          "name": "reverse",
          "type": {
            "name": "bool",
            "typedoc": "boolean",
            "nested": [],
            "union": false
          },
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "reverse: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Sort list of dates.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param dates:</th><td class=\"field-body\">list of dates to sort</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param return_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dates can be formatted for the resulting\nlist</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param reverse:</th><td class=\"field-body\"><cite>True</cite> return latest to oldest, defaults to <cite>False</cite>,\nwhich means order from oldest to latest</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">list of sorted dates</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">datelist</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-07-02 12:02:31&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-07-03 12:02:35&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-07-03 12:02:31&quot;</span><span class=\"w\">\n</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"nb\">sorted</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_list_of_dates</span><span class=\"p\">(</span><span class=\"n\">datelist</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># sorted[0] == &quot;2023-07-03 12:02:35&quot;</span><span class=\"w\">\n</span><span class=\"c1\"># sorted[-1] == &quot;2023-07-02 12:02:31&quot;</span><span class=\"w\">\n</span><span class=\"nb\">sorted</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sort_list_of_dates</span><span class=\"p\">(</span><span class=\"n\">datelist</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># sorted[0] == &quot;2023-07-02 12:02:31&quot;</span><span class=\"w\">\n</span><span class=\"c1\"># sorted[-1] == &quot;2023-07-03 12:02:35&quot;</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&#64;{datelist}=</span><span class=\"p\">  </span><span class=\"c\">Create List</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">2023-07-02 12:02:31</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">2023-07-03 12:02:35</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">   </span><span class=\"c\">2023-07-03 12:02:31</span><span class=\"p\">\n</span><span class=\"c\">${sorted}=</span><span class=\"p\">  </span><span class=\"c\">Sort List Of Dates</span><span class=\"p\">   </span><span class=\"c\">${datelist}</span><span class=\"p\">\n</span><span class=\"c\"># ${sorted}[0] == &quot;2023-07-03 12:02:35&quot;\n# ${sorted}[-1] == &quot;2023-07-02 12:02:31&quot;\n${sorted}=</span><span class=\"p\">  </span><span class=\"c\">Sort List Of Dates</span><span class=\"p\">   </span><span class=\"c\">${datelist}</span><span class=\"p\">  </span><span class=\"c\">reverse=True</span><span class=\"p\">\n</span><span class=\"c\"># ${sorted}[0] == &quot;2023-07-02 12:02:31&quot;\n# ${sorted}[-1] == &quot;2023-07-03 12:02:35&quot;</span>\n</pre>\n</div>\n",
      "shortdoc": "Sort list of dates.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 766
    },
    {
      "name": "Time Difference",
      "args": [
        {
          "name": "start_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_date: str | date | DateTime"
        },
        {
          "name": "end_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "end_date: str | date | DateTime"
        },
        {
          "name": "start_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start_timezone: str | None = None"
        },
        {
          "name": "end_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_timezone: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Compare 2 dates and get the time difference.</p>\n<p>Returned dictionary contains following properties:</p>\n<blockquote>\n<ul class=\"simple\">\n<li>end_date_is_later, <cite>True</cite> if end_date is more recent\nthan start_date, otherwise <cite>False</cite></li>\n<li>years, time difference in years</li>\n<li>months, time difference in months</li>\n<li>days, time difference in days</li>\n<li>hours, time difference in hours (in addition to the days)</li>\n<li>minutes, time difference in minutes (in addition to the hours)</li>\n<li>seconds, time difference in seconds (in addition to the minutes)</li>\n</ul>\n</blockquote>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_date:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">starting date for the comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param end_date:</th><td class=\"field-body\">ending date for the comparison</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the starting date, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the ending date, defaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">dictionary containing comparison result</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">time_difference</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;1975-05-22T18:00:00&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;1975-05-22T22:45:30&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># diff['end_date_is_later'] == True</span><span class=\"w\">\n</span><span class=\"c1\"># diff['days'] == 0</span><span class=\"w\">\n</span><span class=\"c1\"># diff['hours'] == 4</span><span class=\"w\">\n</span><span class=\"c1\"># diff['minutes'] == 45</span><span class=\"w\">\n</span><span class=\"c1\"># diff['seconds'] == 30</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">&amp;{diff}=</span><span class=\"p\">    </span><span class=\"c\">Time Difference</span><span class=\"p\">  </span><span class=\"c\">1975-05-22T18:00:00</span><span class=\"p\">  </span><span class=\"c\">1975-05-22T22:45:30</span><span class=\"p\">\n</span><span class=\"c\"># ${diff}[end_date_is_later] == True\n# ${diff}[days] == 0\n# ${diff}[hours] == 4\n# ${diff}[minutes] == 45\n# ${diff}[seconds] == 30</span>\n</pre>\n</div>\n",
      "shortdoc": "Compare 2 dates and get the time difference.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 157
    },
    {
      "name": "Time Difference Between Timezones",
      "args": [
        {
          "name": "start_timezone",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_timezone: str"
        },
        {
          "name": "end_timezone",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "end_timezone: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return the hour difference between timezones.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">first timezone</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">second timezone</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">hour difference between the timezones</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">time_difference_between_timezones</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;America/New_York&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;Europe/Helsinki&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># diff == 7</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${diff}=</span><span class=\"p\">  </span><span class=\"c\">Time Difference Between Timezones</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">America/New_York</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">Europe/Helsinki</span><span class=\"p\">\n</span><span class=\"c\"># ${diff} == 7</span>\n</pre>\n</div>\n",
      "shortdoc": "Return the hour difference between timezones.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 497
    },
    {
      "name": "Time Difference In Days",
      "args": [
        {
          "name": "start_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_date: str | date | DateTime"
        },
        {
          "name": "end_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "end_date: str | date | DateTime"
        },
        {
          "name": "start_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start_timezone: str | None = None"
        },
        {
          "name": "end_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_timezone: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return the time difference of dates in days.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_date:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the start date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param end_date:</th><td class=\"field-body\">the end date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the start date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the end date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">difference in days</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">time_difference_in_days</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-05-21&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-05-29&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># diff == 8</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${diff}=</span><span class=\"p\">  </span><span class=\"c\">Time Difference In Days</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">2023-05-21</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">2023-05-29</span><span class=\"p\">\n</span><span class=\"c\"># ${diff} == 8</span>\n</pre>\n</div>\n",
      "shortdoc": "Return the time difference of dates in days.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 372
    },
    {
      "name": "Time Difference In Hours",
      "args": [
        {
          "name": "start_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_date: str | date | DateTime"
        },
        {
          "name": "end_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "end_date: str | date | DateTime"
        },
        {
          "name": "start_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start_timezone: str | None = None"
        },
        {
          "name": "end_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_timezone: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return the time difference of dates in hours.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_date:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the start date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param end_date:</th><td class=\"field-body\">the end date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the start date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the end date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">difference in hours</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">time_difference_in_hours</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-08-21T22:00:00&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-08-22T04:00:00&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># diff == 6</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${diff}=</span><span class=\"p\">  </span><span class=\"c\">Time Difference In Hours</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">2023-08-21T22:00:00</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">2023-08-22T04:00:00</span><span class=\"p\">\n</span><span class=\"c\"># ${diff} == 6</span>\n</pre>\n</div>\n",
      "shortdoc": "Return the time difference of dates in hours.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 414
    },
    {
      "name": "Time Difference In Minutes",
      "args": [
        {
          "name": "start_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_date: str | date | DateTime"
        },
        {
          "name": "end_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "end_date: str | date | DateTime"
        },
        {
          "name": "start_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start_timezone: str | None = None"
        },
        {
          "name": "end_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_timezone: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return the time difference of dates in minutes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_date:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the start date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param end_date:</th><td class=\"field-body\">the end date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the start date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the end date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">difference in minutes</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">time_difference_in_minutes</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;12:30&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;16:35&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># diff == 245</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${diff}=</span><span class=\"p\">  </span><span class=\"c\">Time Difference In Minutes</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">12:30</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">16:35</span><span class=\"p\">\n</span><span class=\"c\"># ${diff} == 245</span>\n</pre>\n</div>\n",
      "shortdoc": "Return the time difference of dates in minutes.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 456
    },
    {
      "name": "Time Difference In Months",
      "args": [
        {
          "name": "start_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "start_date: str | date | DateTime"
        },
        {
          "name": "end_date",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "date",
                "typedoc": "date",
                "nested": [],
                "union": false
              },
              {
                "name": "DateTime",
                "typedoc": "datetime",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "date",
            "DateTime"
          ],
          "typedocs": {
            "str": "string",
            "date": "date",
            "DateTime": "datetime"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "end_date: str | date | DateTime"
        },
        {
          "name": "start_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "start_timezone: str | None = None"
        },
        {
          "name": "end_timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "end_timezone: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return time difference of dates in months.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_date:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">the start date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param end_date:</th><td class=\"field-body\">the end date</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param start_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the start date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param end_timezone:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">timezone for the end date,\ndefaults to None</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">difference in months</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">time_difference_in_months</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2022-05-21T22:00:00&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;2023-08-21T22:00:00&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># diff == 15</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${diff}=</span><span class=\"p\">  </span><span class=\"c\">Time Difference In Months</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">2022-05-21T22:00:00</span><span class=\"p\">\n</span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">2023-08-21T22:00:00</span><span class=\"p\">\n</span><span class=\"c\"># ${diff} == 15</span>\n</pre>\n</div>\n",
      "shortdoc": "Return time difference of dates in months.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 330
    },
    {
      "name": "Time Now",
      "args": [
        {
          "name": "timezone",
          "type": {
            "name": "Union",
            "typedoc": null,
            "nested": [
              {
                "name": "str",
                "typedoc": "string",
                "nested": [],
                "union": false
              },
              {
                "name": "None",
                "typedoc": "None",
                "nested": [],
                "union": false
              }
            ],
            "union": true
          },
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "timezone: str | None = None"
        },
        {
          "name": "return_format",
          "type": {
            "name": "str",
            "typedoc": "string",
            "nested": [],
            "union": false
          },
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "YYYY-MM-DD",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "return_format: str = YYYY-MM-DD"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Return current date and time</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param timezone:</th><td class=\"field-body\">optional, for example. &quot;America/Boston&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param return_format:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">dates can be formatted for the resulting\nlist, defaults to &quot;YYYY-MM-DD&quot;</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">return:</th><td class=\"field-body\">current datetime as an object</td>\n</tr>\n</tbody>\n</table>\n<p>Python example.</p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">Calendar</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">time_now</span><span class=\"p\">(</span><span class=\"s2\">&quot;Europe/Helsinki&quot;</span><span class=\"p\">)</span>\n</pre>\n<p>Robot Framework example.</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${now}=</span><span class=\"p\">  </span><span class=\"c\">Time Now</span><span class=\"p\">   </span><span class=\"c\">Europe/Helsinki</span>\n</pre>\n</div>\n",
      "shortdoc": "Return current date and time",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/runtime/.venv/lib/python3.10/site-packages/RPA/Calendar.py",
      "lineno": 288
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Sort List Of Dates"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "date",
      "doc": "<p>Strings are expected to be a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> like date format <code>YYYY-MM-DD</code>, where any non-digit character can be used as a separator or separators can be omitted altogether. Possible time components are only allowed if they are zeros.</p>\n<p>Examples: <code>2022-02-09</code>, <code>2022-02-09 00:00</code></p>",
      "usages": [
        "Add Custom Holidays",
        "Compare Times",
        "First Business Day Of The Month",
        "Get Iso Calendar",
        "Is The Date Business Day",
        "Is The Date Holiday",
        "Last Business Day Of The Month",
        "Return Next Business Day",
        "Return Previous Business Day",
        "Sort List Of Dates",
        "Time Difference",
        "Time Difference In Days",
        "Time Difference In Hours",
        "Time Difference In Minutes",
        "Time Difference In Months"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "datetime",
      "doc": "<p>Strings are expected to be a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> like format <code>YYYY-MM-DD hh:mm:ss.mmmmmm</code>, where any non-digit character can be used as a separator or separators can be omitted altogether. Additionally, only the date part is mandatory, all possibly missing time components are considered to be zeros.</p>\n<p>Integers and floats are considered to represent seconds since the <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix epoch</a>.</p>\n<p>Examples: <code>2022-02-09T16:39:43.632269</code>, <code>2022-02-09 16:39</code>, <code>${1644417583.632269}</code> (Epoch time)</p>",
      "usages": [
        "Add Custom Holidays",
        "Compare Times",
        "First Business Day Of The Month",
        "Get Iso Calendar",
        "Is The Date Business Day",
        "Is The Date Holiday",
        "Last Business Day Of The Month",
        "Return Next Business Day",
        "Return Previous Business Day",
        "Sort List Of Dates",
        "Time Difference",
        "Time Difference In Days",
        "Time Difference In Hours",
        "Time Difference In Minutes",
        "Time Difference In Months"
      ],
      "accepts": [
        "string",
        "integer",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "Return Holidays",
        "Set Business Days"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>If the type has nested types like <code>list[int]</code>, items are converted to those types automatically. This in new in Robot Framework 6.0.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Add Custom Holidays",
        "Return Holidays",
        "Set Business Days",
        "Sort List Of Dates"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Create Time",
        "First Business Day Of The Month",
        "Is The Date Business Day",
        "Is The Date Holiday",
        "Last Business Day Of The Month",
        "Return Holidays",
        "Return Next Business Day",
        "Return Previous Business Day",
        "Sort List Of Dates",
        "Time Difference",
        "Time Difference In Days",
        "Time Difference In Hours",
        "Time Difference In Minutes",
        "Time Difference In Months",
        "Time Now"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Add Custom Holidays",
        "Compare Times",
        "Create Time",
        "First Business Day Of The Month",
        "Get Iso Calendar",
        "Is The Date Business Day",
        "Is The Date Holiday",
        "Last Business Day Of The Month",
        "Return Holidays",
        "Return Next Business Day",
        "Return Previous Business Day",
        "Set Locale",
        "Sort List Of Dates",
        "Time Difference",
        "Time Difference Between Timezones",
        "Time Difference In Days",
        "Time Difference In Hours",
        "Time Difference In Minutes",
        "Time Difference In Months",
        "Time Now"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}