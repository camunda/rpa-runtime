{
  "specversion": 1,
  "name": "RPA.Smartsheet",
  "doc": "<div class=\"document\">\n<p><em>Smartsheet</em> is a library for accessing Smartsheet using the\n<a class=\"reference external\" href=\"https://smartsheet.redoc.ly/\">Smartsheet API 2.0</a>. It extends <a class=\"reference external\" href=\"https://github.com/smartsheet/smartsheet-python-sdk\">smartsheet-python-sdk</a>.</p>\n<div class=\"section\" id=\"getting-started\">\n<h1>Getting started</h1>\n<p>To use this library, you need to have a Smartsheet account and an API token.\nYou can get your API token from the <a class=\"reference external\" href=\"https://smartsheet-platform.github.io/api-docs/\">Smartsheet Developer Portal</a>.\nThis library currently only supports raw token authentication. Once\nobtained, you can configure the access token using the <tt class=\"docutils literal\">Set Access Token</tt>\nkeyword or via the <tt class=\"docutils literal\">access_token</tt> argument in the library import.</p>\n</div>\n<div class=\"section\" id=\"working-on-a-sheet\">\n<h1>Working on a sheet</h1>\n<p>The library supports working on a single sheet at a time. To select a sheet\nto work on, use the <tt class=\"docutils literal\">Select Sheet</tt> keyword. This will set the sheet as\nthe active sheet for all subsequent operations. Some operations\nupdate the sheet, but this will not necessarily be reflected in the active\nsheet. To refresh the active sheet, use the <tt class=\"docutils literal\">Refresh Sheet</tt> keyword.</p>\n</div>\n<div class=\"section\" id=\"native-smartsheet-objects\">\n<h1>Native Smartsheet objects</h1>\n<p>You can retrieve the native Smartsheet object from many keywords by\nspecifying the <tt class=\"docutils literal\">native</tt> argument. The default will return a more\ncommon Python object, such as a dictionary or list. The native object\nis a class from the <a class=\"reference external\" href=\"https://github.com/smartsheet/smartsheet-python-sdk\">smartsheet-python-sdk</a> library and will have\nadditional methods and attributes. The most important attributes\navailable for most native objects are (some may be unavailable\nfor some objects):</p>\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">id</tt>: the unique identifier of the object</li>\n<li><tt class=\"docutils literal\">name</tt>: the name of the object</li>\n<li><tt class=\"docutils literal\">title</tt>: the title of a column</li>\n<li><tt class=\"docutils literal\">permalink</tt>: the URL to the object</li>\n</ul>\n</div>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:10:08",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
  "lineno": 74,
  "tags": [],
  "inits": [
    {
      "name": "__init__",
      "args": [
        {
          "name": "access_token",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "access_token: str | None = None"
        },
        {
          "name": "max_retry_time",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": "30",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "max_retry_time: str | int = 30"
        }
      ],
      "doc": "<div class=\"document\">\n<p>If you do not initialize the library with an access token,\nit will attempt to load the environment variable\n<tt class=\"docutils literal\">SMARTSHEET_ACCESS_TOKEN</tt>, otherwise, use the keyword\n<tt class=\"docutils literal\">Set access token</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param access_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The access token created for your\nSmartsheet user.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_retry_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Maximum time to allow retries of API\ncalls. Can be provided as a time string or int.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "If you do not initialize the library with an access token, it will attempt to load the environment variable ``SMARTSHEET_ACCESS_TOKEN``, otherwise, use the keyword ``Set access token``.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 169
    }
  ],
  "keywords": [
    {
      "name": "Add Column",
      "args": [
        {
          "name": "title",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "title: str"
        },
        {
          "name": "column_type",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": "TEXT_NUMBER",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column_type: str = TEXT_NUMBER"
        },
        {
          "name": "formula",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "formula: str | None = None"
        },
        {
          "name": "hidden",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "hidden: bool = False"
        },
        {
          "name": "index",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "index: int | None = None"
        },
        {
          "name": "description",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "description: str | None = None"
        },
        {
          "name": "primary",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "primary: bool = False"
        },
        {
          "name": "format_string",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "format_string: str | None = None"
        },
        {
          "name": "locked",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "locked: bool = False"
        },
        {
          "name": "options",
          "types": [
            "List[str]",
            "None"
          ],
          "typedocs": {
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "options: List[str] | None = None"
        },
        {
          "name": "symbol",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "symbol: str | None = None"
        },
        {
          "name": "validation",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "validation: bool = False"
        },
        {
          "name": "width",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "width: int | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Adds a column to the current sheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param title:</th><td class=\"field-body\">Column title.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param column_type:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Column type, must be a <a class=\"reference external\" href=\"https://smartsheet.redoc.ly/tag/columnsRelated/#section/Column-Types\">supported type</a>.\nDefaults to <tt class=\"docutils literal\">TEXT_NUMBER</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param formula:</th><td class=\"field-body\">Formula for the column (e.g., <tt class=\"docutils literal\">=data&#64;row</tt>).\nDefaults to <tt class=\"docutils literal\">None</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param hidden:</th><td class=\"field-body\">Whether the column is hidden. Defaults to <tt class=\"docutils literal\">False</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param index:</th><td class=\"field-body\">Index of the column. You can insert a column into\nand existing sheet by setting this index. Index is zero-based.\nDefaults to <tt class=\"docutils literal\">None</tt> which will add the column to the end of\nthe sheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param description:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Column description. Defaults to <tt class=\"docutils literal\">None</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param primary:</th><td class=\"field-body\">Whether the column is considered the primary\nkey for indexing and searching. Defaults to <tt class=\"docutils literal\">False</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param format_string:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Column format using a <a class=\"reference external\" href=\"https://smartsheet.redoc.ly/#section/API-Basics/Formatting\">format descriptor</a>\nstring. Defaults to <tt class=\"docutils literal\">None</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param locked:</th><td class=\"field-body\">Whether the column is locked. Defaults to <tt class=\"docutils literal\">False</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param options:</th><td class=\"field-body\">List of options for a <tt class=\"docutils literal\">PICKLIST</tt> or\n<tt class=\"docutils literal\">MULTI_PICKLIST</tt> column. Defaults to <tt class=\"docutils literal\">None</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param symbol:</th><td class=\"field-body\">When a <tt class=\"docutils literal\">CHECKBOX</tt> or <tt class=\"docutils literal\">PICKLIST</tt> column has a\ndisplay symbol, you can set the type of symbols by selected an\nappropriate string from the <a class=\"reference external\" href=\"https://smartsheet.redoc.ly/tag/columnsRelated/#section/Column-Types/Symbol-Columns\">symbol columns</a> definitions.\nDefaults to <tt class=\"docutils literal\">None</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param validation:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Whether validation has been enabled. Defaults\nto <tt class=\"docutils literal\">False</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param width:</th><td class=\"field-body\">Column width in pixels. Defaults to <tt class=\"docutils literal\">None</tt>.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Add Column</span><span class=\"p\">  </span><span class=\"c\">Title</span><span class=\"p\">  </span><span class=\"c\">TEXT_NUMBER</span><span class=\"p\">\n</span><span class=\"c\">Add Column</span><span class=\"p\">  </span><span class=\"c\">Description</span><span class=\"p\">  </span><span class=\"c\">TEXT_NUMBER</span><span class=\"p\">  </span><span class=\"c\">description=This is a description</span><span class=\"p\">\n</span><span class=\"c\">Add Column</span><span class=\"p\">  </span><span class=\"c\">Formula</span><span class=\"p\">  </span><span class=\"c\">TEXT_NUMBER</span><span class=\"p\">  </span><span class=\"c\">formula==data&#64;row</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Title&quot;</span><span class=\"p\">,</span> <span class=\"n\">column_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;TEXT_NUMBER&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Description&quot;</span><span class=\"p\">,</span> <span class=\"n\">column_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;TEXT_NUMBER&quot;</span><span class=\"p\">,</span> <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is a description&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">add_column</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Formula&quot;</span><span class=\"p\">,</span> <span class=\"n\">column_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;TEXT_NUMBER&quot;</span><span class=\"p\">,</span> <span class=\"n\">formula</span><span class=\"o\">=</span><span class=\"s2\">&quot;=data&#64;row&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Adds a column to the current sheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 839
    },
    {
      "name": "Add Columns",
      "args": [
        {
          "name": "columns",
          "types": [
            "List[Dict | Column]",
            "None"
          ],
          "typedocs": {
            "List[Dict | Column]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "columns: List[Dict | Column] | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Adds columns to the current sheet. Columns must be defined as\na list of dictionaries or Column objects. Dictionaries can have\nadditional keys set, see <tt class=\"docutils literal\">Add Column</tt> keyword for more information.</p>\n<p>Column types must be supported by the <a class=\"reference external\" href=\"https://smartsheet.redoc.ly/tag/columnsRelated#section/Column-Types\">Smartsheet API</a></p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">Columns as a list of dictionaries or Column\nobjects.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Adds columns to the current sheet. Columns must be defined as a list of dictionaries or Column objects. Dictionaries can have additional keys set, see ``Add Column`` keyword for more information.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 815
    },
    {
      "name": "Add Rows",
      "args": [
        {
          "name": "data",
          "types": [
            "List",
            "Table"
          ],
          "typedocs": {
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "data: List | Table"
        },
        {
          "name": "native",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "native: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Adds rows to the current sheet with the provided data.</p>\n<p>You can provide the data in several ways:</p>\n<ul class=\"simple\">\n<li>As a list of dictionaries: each list item represents a row\nas a single dictionary. The keys of the dictionary are the\ncolumn IDs or Titles and the values are the values for the\ncells.</li>\n<li>As a list of lists of dictionaries: each sub list item is\na row and each dictionary is a cell. The keys of the dictionary\nshould match cell attributes, e.g., <tt class=\"docutils literal\">column_id</tt>, <tt class=\"docutils literal\">title</tt>,\n<tt class=\"docutils literal\">value</tt>, etc. See the <a class=\"reference external\" href=\"https://smartsheet.redoc.ly/tag/rows#operation/add-rows\">smartsheet API docs</a> for more\ninformation. The dictionary keys must be provided in snake\ncase. You must use this method to set formulas on the row.</li>\n<li>As a list of native <tt class=\"docutils literal\">Row</tt> objects: each <tt class=\"docutils literal\">Row</tt> object is a\nnative object from the API with new values for the cells.</li>\n<li>As a <tt class=\"docutils literal\">Table</tt> object: the columns of the Table must either\nbe the column IDs or Titles.</li>\n</ul>\n<p>Examples:</p>\n<p><em>Robot Framework:</em></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${row1}=</span><span class=\"p\">  </span><span class=\"c\">Create Dictionary</span><span class=\"p\">  </span><span class=\"c\">column1=value1</span><span class=\"p\">  </span><span class=\"c\">column2=value2</span><span class=\"p\">\n</span><span class=\"c\">${row2}=</span><span class=\"p\">  </span><span class=\"c\">Create Dictionary</span><span class=\"p\">  </span><span class=\"c\">column1=value3</span><span class=\"p\">  </span><span class=\"c\">column2=value4</span><span class=\"p\">\n</span><span class=\"c\">${row3}=</span><span class=\"p\">  </span><span class=\"c\">Create Dictionary</span><span class=\"p\">  </span><span class=\"c\">column1=value5</span><span class=\"p\">  </span><span class=\"c\">column2=value6</span><span class=\"p\">\n</span><span class=\"c\">${data} =</span><span class=\"p\">  </span><span class=\"c\">Create List</span><span class=\"p\">  </span><span class=\"c\">${row1}</span><span class=\"p\">  </span><span class=\"c\">${row2}</span><span class=\"p\">  </span><span class=\"c\">${row3}</span><span class=\"p\">\n</span><span class=\"c\">Add Rows</span><span class=\"p\">  </span><span class=\"c\">${data}</span>\n</pre>\n<p><em>Python:</em></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">row1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;column1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column2&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value2&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">row2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;column1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value3&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column2&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value4&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">row3</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;column1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value5&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column2&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value6&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">,</span> <span class=\"n\">row2</span><span class=\"p\">,</span> <span class=\"n\">row3</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">set_rows</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Adds rows to the current sheet with the provided data.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1178
    },
    {
      "name": "Convert Row To Dict",
      "args": [
        {
          "name": "row",
          "types": [
            "Row"
          ],
          "typedocs": {},
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: Row"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Converts a row object to a dictionary.</p>\n</div>\n",
      "shortdoc": "Converts a row object to a dictionary.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1015
    },
    {
      "name": "Convert Sheet To Table",
      "args": [
        {
          "name": "sheet",
          "types": [
            "Sheet",
            "None"
          ],
          "typedocs": {
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet: Sheet | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Converts the current sheet to table. You can provide a differnt\nnative sheet object to be converted via the <tt class=\"docutils literal\">sheet</tt> parameter.</p>\n<p>This keyword attempts to return the sheet as a table via\n<tt class=\"docutils literal\">RPA.Tables</tt>, but if that library is not available in this\ncontext, the sheet is returned as its native data model (e.g.,\nno operation is performed).</p>\n<p>If the sheet contains additional data from the <tt class=\"docutils literal\">include</tt>\nargument, they will be appended to the end of the table as\nadditional columns in the data model. These additional objects\nwill be attached as a list of objects depending on the items\nrequested.</p>\n<!-- warn:\n\nOnly the following supported additional data requests\nare supported when unpacking a Sheet object.\n\n* <span class=\"name\">`attachments</span>`: The value for the cell will be a list of\nnative Attachment object.\n* <span class=\"name\">`attachmentFiles</span>`: The value for the cell will be a list of\nfile paths to the local copies of each attachment. This\noperation may be resource intensive for many attachments.\n* <span class=\"name\">`discussions</span>`: The value for the cell will be a list of\nnative Discussion objects.\n* <span class=\"name\">`rowPermalink</span>`: The value for the cell will be a single\nstring representing the URL to the permalink. -->\n</div>\n",
      "shortdoc": "Converts the current sheet to table. You can provide a differnt native sheet object to be converted via the ``sheet`` parameter.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 510
    },
    {
      "name": "Create Sheet",
      "args": [
        {
          "name": "name",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: str"
        },
        {
          "name": "columns",
          "types": [
            "List[Dict | Column]",
            "None"
          ],
          "typedocs": {
            "List[Dict | Column]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "columns: List[Dict | Column] | None = None"
        },
        {
          "name": "from_sheet_id",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "from_sheet_id: int | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Creates a new sheet with the given name and columns, then sets\nthe current sheet to the new sheet and returns it as a native\nSmartsheet object.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of the new sheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param columns:</th><td class=\"field-body\">List of columns to create in the new sheet.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param from_sheet_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Sheet ID to use as a template for the new\nsheet.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${columns}=</span><span class=\"p\">  </span><span class=\"c\">Create List</span><span class=\"p\">  </span><span class=\"c\">Name</span><span class=\"p\">  </span><span class=\"c\">Email</span><span class=\"p\">\n</span><span class=\"c\">${sheet}=</span><span class=\"p\">  </span><span class=\"c\">Create Sheet</span><span class=\"p\">  </span><span class=\"c\">My new sheet</span><span class=\"p\">  </span><span class=\"c\">${columns}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;TEXT_NUMBER&quot;</span><span class=\"p\">},</span><span class=\"w\">\n</span>    <span class=\"p\">{</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Email&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;TEXT_NUMBER&quot;</span><span class=\"p\">},</span><span class=\"w\">\n</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">sheet</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">create_sheet</span><span class=\"p\">(</span><span class=\"s2\">&quot;My new sheet&quot;</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Creates a new sheet with the given name and columns, then sets the current sheet to the new sheet and returns it as a native Smartsheet object.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 639
    },
    {
      "name": "Download Attachment",
      "args": [
        {
          "name": "attachment",
          "types": [
            "int",
            "str",
            "Dict",
            "Attachment"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "Dict": "dictionary"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "attachment: int | str | Dict | Attachment"
        },
        {
          "name": "download_path",
          "types": [
            "Path",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "download_path: Path | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Downloads the provided attachment from the currently selected\nsheet to the provided download_path, which defaults to\nthe <tt class=\"docutils literal\">${OUTPUT_DIR}</tt>.</p>\n<p>The attachment can be provided as an integer representing the\nattachments ID, a dictionary with at least the key <tt class=\"docutils literal\">id</tt> or as\nthe native <tt class=\"docutils literal\">Attachment</tt> data model type.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param attachment:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">An integar representing the attachment ID, a\ndictionary with at least the key <tt class=\"docutils literal\">id</tt>, or a native\n<tt class=\"docutils literal\">Attachment</tt> data model object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param download_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The path to save the attachment to.</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p><em>Robot Framework:</em></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${attachment}=</span><span class=\"p\">  </span><span class=\"c\">Get Attachment</span><span class=\"p\">  </span><span class=\"c\">123456789</span><span class=\"p\">\n</span><span class=\"c\">${path}=</span><span class=\"p\">  </span><span class=\"c\">Download Attachment</span><span class=\"p\">  </span><span class=\"c\">${attachment}</span><span class=\"p\">\n</span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${path}</span>\n</pre>\n<p><em>Python:</em></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">attachment</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">get_attachment</span><span class=\"p\">(</span><span class=\"mi\">123456789</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">download_attachment</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Downloads the provided attachment from the currently selected sheet to the provided download_path, which defaults to the ``${OUTPUT_DIR}``.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1377
    },
    {
      "name": "Get Application Constants",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Gets application constants from the server. This is not\nnecessary for most automation scenarios, but may be useful for\ndebugging or for other advanced scenarios.</p>\n</div>\n",
      "shortdoc": "Gets application constants from the server. This is not necessary for most automation scenarios, but may be useful for debugging or for other advanced scenarios.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 335
    },
    {
      "name": "Get Cell History",
      "args": [
        {
          "name": "row",
          "types": [
            "int",
            "Row"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | Row"
        },
        {
          "name": "column",
          "types": [
            "int",
            "str",
            "Column"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str | Column"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Retrieves the history of a cell in a row of the current sheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param row:</th><td class=\"field-body\">The row ID, row number, or a Row object.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">The column ID or title.</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<p><em>Robot Framework:</em></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${cell_history}=</span><span class=\"p\">  </span><span class=\"c\">Get Cell History</span><span class=\"p\">  </span><span class=\"c\">1</span><span class=\"p\">  </span><span class=\"c\">Approval</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${revision} IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{cell_history}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">Modified by ${revision.modified_by.email}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p><em>Python:</em></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">cell_history</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">get_cell_history</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Approval&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">revision</span> <span class=\"ow\">in</span> <span class=\"n\">cell_history</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Modified by </span><span class=\"si\">{</span><span class=\"n\">revision</span><span class=\"o\">.</span><span class=\"n\">modified_by</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Retrieves the history of a cell in a row of the current sheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1258
    },
    {
      "name": "Get Current User",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Gets the current authenticated user, which is also set in\nthe library's memory as the current user. Call this again\nif you switch user or begin to impersonate a user.</p>\n</div>\n",
      "shortdoc": "Gets the current authenticated user, which is also set in the library's memory as the current user. Call this again if you switch user or begin to impersonate a user.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1444
    },
    {
      "name": "Get Row",
      "args": [
        {
          "name": "row",
          "types": [
            "int",
            "Row"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | Row"
        },
        {
          "name": "include",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "include: str | List[Any] | None = None"
        },
        {
          "name": "exclude",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "exclude: str | List[Any] | None = None"
        },
        {
          "name": "native",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "native: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Returns a single row from the current sheet.</p>\n<p>You can provide the row as a native <tt class=\"docutils literal\">Row</tt> object or as an\ninteger representing the row ID.</p>\n</div>\n",
      "shortdoc": "Returns a single row from the current sheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1023
    },
    {
      "name": "Get Sheet",
      "args": [
        {
          "name": "sheet_id",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_id: int | None = None"
        },
        {
          "name": "sheet_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_name: str | None = None"
        },
        {
          "name": "include",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "include: str | List[Any] | None = None"
        },
        {
          "name": "row_ids",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row_ids: str | List[Any] | None = None"
        },
        {
          "name": "row_numbers",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "row_numbers: str | List[Any] | None = None"
        },
        {
          "name": "column_ids",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "column_ids: str | List[Any] | None = None"
        },
        {
          "name": "filter_id",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "filter_id: int | None = None"
        },
        {
          "name": "native",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "native: bool = False"
        },
        {
          "name": "download_path",
          "types": [
            "Path",
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "download_path: Path | str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Retrieves a sheet from Smartsheet. This keyword also sets\nthe currently selected sheet to the returned sheet.</p>\n<p>You cannot provide both a <tt class=\"docutils literal\">sheet_id</tt> and <tt class=\"docutils literal\">sheet_name</tt>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">The ID of the sheet to get. You cannot supply\nboth a <tt class=\"docutils literal\">sheet_id</tt> and <tt class=\"docutils literal\">sheet_name</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The name of the sheet to get, it will return\nthe first sheet name matching the provided name. You cannot supply\nboth a <tt class=\"docutils literal\">sheet_id</tt> and <tt class=\"docutils literal\">sheet_name</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param include:</th><td class=\"field-body\">Additional metadata which can be retrieved with\nthe table. The list can only contain the following items:\n<tt class=\"docutils literal\">attachments</tt>, <tt class=\"docutils literal\">attachmentFiles</tt>, <tt class=\"docutils literal\">discussions</tt>,\n<tt class=\"docutils literal\">rowPermalink</tt>, or <tt class=\"docutils literal\">ALL</tt>. Note that <tt class=\"docutils literal\">attachmentFiles</tt>\nwill only download files if you do not set <tt class=\"docutils literal\">native</tt> to\n<tt class=\"docutils literal\">True</tt>.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param row_ids:</th><td class=\"field-body\">A list of row IDs to include. All other rows\nwill be ignored. The list can be a list object or a\ncomma-separated list as a string.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param row_numbers:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A list of row numbers to include. All other\nrows will be ignored. The list can be a list object or a\ncomma-separated list as a string.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param column_ids:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">A list of column IDs to only include, others\nwill not be returned. The list can be a list object or a\ncomma-separated list as a string.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param filter_id:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The ID of a filter to apply. Filtered out\nrows will not be included in the resulting table.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param native:</th><td class=\"field-body\">Defaults to <tt class=\"docutils literal\">False</tt>. Set to <tt class=\"docutils literal\">True</tt> to change\nthe return type to the native Smartsheet data model. The native\ntype is useful for passing to other keywords as arguments.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param download_path:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Defaults to <tt class=\"docutils literal\">None</tt>. Can be set when\n<tt class=\"docutils literal\">attachmentFiles</tt> is included in the <tt class=\"docutils literal\">include</tt> parameter.\nAll attachments will be downloaded to the provided directory.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${sheet}=</span><span class=\"p\">  </span><span class=\"c\">Get Sheet</span><span class=\"p\">  </span><span class=\"c\">sheet_name=My Sheet</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${row}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&amp;{sheet}</span><span class=\"p\">\n    </span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${column}</span><span class=\"p\">  </span><span class=\"c\">${value}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&amp;{row}</span><span class=\"p\">\n        </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">The column ${column} has the value ${value}</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">sheet</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">get_sheet</span><span class=\"p\">(</span><span class=\"n\">sheet_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;My Sheet&quot;</span><span class=\"p\">,</span> <span class=\"n\">native</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">sheet</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">row</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;The column </span><span class=\"si\">{</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">column_id</span><span class=\"si\">}</span><span class=\"s2\"> has the value </span><span class=\"si\">{</span><span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Retrieves a sheet from Smartsheet. This keyword also sets the currently selected sheet to the returned sheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 422
    },
    {
      "name": "Get Sheet Owner",
      "args": [
        {
          "name": "sheet_id",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_id: int | None = None"
        },
        {
          "name": "sheet_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Returns the owner's username and ID for the current sheet.</p>\n</div>\n",
      "shortdoc": "Returns the owner's username and ID for the current sheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 583
    },
    {
      "name": "List Attachments",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Gets a list of all attachments from the currently selected sheet.</p>\n<p>This will include attachments to the sheet, rows, and discussions.</p>\n<p>Examples:</p>\n<p><em>Robot Framework:</em></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${attachments}=</span><span class=\"p\">  </span><span class=\"c\">List Attachments</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${attachment} IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{attachments}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${attachment.name}</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<p><em>Python:</em></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">attachments</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">list_attachments</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">attachment</span> <span class=\"ow\">in</span> <span class=\"n\">attachments</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Gets a list of all attachments from the currently selected sheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1344
    },
    {
      "name": "List Columns",
      "args": [
        {
          "name": "sheet_id",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_id: int | None = None"
        },
        {
          "name": "sheet_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Returns a list of columns for the current sheet.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param sheet_id:</th><td class=\"field-body\">The ID of the sheet to get columns from.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param sheet_name:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The name of the sheet to get columns from.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Returns a list of columns for the current sheet.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 802
    },
    {
      "name": "List Sheet Filters",
      "args": [
        {
          "name": "sheet_id",
          "types": [
            "int",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_id: int | None = None"
        },
        {
          "name": "sheet_name",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "sheet_name: str | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Returns a list of available filters for the current sheet. You\ncan specify a different sheet via the <tt class=\"docutils literal\">sheet_id</tt> or\n<tt class=\"docutils literal\">sheet_name</tt> parameters.</p>\n<p>The returned list of filters can be used with the <tt class=\"docutils literal\">filter_id</tt>\nargument of the <tt class=\"docutils literal\">get_sheet</tt> keyword.</p>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${filters}=</span><span class=\"p\">  </span><span class=\"c\">List Sheet Filters</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${filter}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{filters}</span><span class=\"p\">\n    </span><span class=\"c\">${filtered_sheet}=</span><span class=\"p\">  </span><span class=\"c\">Get Sheet</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">sheet_name=My sheet</span><span class=\"p\">\n    </span><span class=\"c\">...</span><span class=\"p\">  </span><span class=\"c\">filter_id=${filter.id}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">There are ${len(filtered_sheet)} rows in the filtered sheet</span><span class=\"p\">\n</span><span class=\"c\">END</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">my_sheet_id</span> <span class=\"o\">=</span> <span class=\"mi\">123456789</span><span class=\"w\">\n</span><span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">list_sheet_filters</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"nb\">filter</span> <span class=\"ow\">in</span> <span class=\"n\">filters</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"n\">filtered_sheet</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">get_sheet</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"n\">sheet_id</span><span class=\"o\">=</span><span class=\"n\">my_sheet_id</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">filter_id</span><span class=\"o\">=</span><span class=\"nb\">filter</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\">\n</span>        <span class=\"n\">native</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"p\">)</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"w\">\n</span>        <span class=\"sa\">f</span><span class=\"s2\">&quot;There are </span><span class=\"si\">{</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filtered_sheet</span><span class=\"o\">.</span><span class=\"n\">rows</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\"> rows in the &quot;</span><span class=\"w\">\n</span>        <span class=\"sa\">f</span><span class=\"s2\">&quot;filtered sheet&quot;</span><span class=\"w\">\n</span>    <span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Returns a list of available filters for the current sheet. You can specify a different sheet via the ``sheet_id`` or ``sheet_name`` parameters.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 592
    },
    {
      "name": "List Sheets",
      "args": [
        {
          "name": "use_cache",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "True",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "use_cache: bool = True"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Lists all sheets available for the authenticated account. Uses\ncached lists if available unless <tt class=\"docutils literal\">use_cache</tt> is set to <tt class=\"docutils literal\">False</tt>.</p>\n<p>The cached lists is used for other keywords, so if you need to\nrefresh the cache for other keywords to use, you must do so\nvia this keyword.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param use_cache:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Defaults to <tt class=\"docutils literal\">True</tt>. You can set to <tt class=\"docutils literal\">False</tt>\nto force a reload of the cached list of sheets.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${sheets}=</span><span class=\"p\">  </span><span class=\"c\">List Sheets</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${sheet}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{sheets}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${sheet.name}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">SmartsheetLibrary</span><span class=\"p\">(</span><span class=\"n\">account_token</span><span class=\"o\">=</span><span class=\"n\">account_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">sheets</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">list_sheets</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">sheet</span> <span class=\"ow\">in</span> <span class=\"n\">sheets</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Lists all sheets available for the authenticated account. Uses cached lists if available unless ``use_cache`` is set to ``False``.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 384
    },
    {
      "name": "Refresh Sheet",
      "args": [
        {
          "name": "native",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "native: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Refreshes the current sheet from the API and returns it\neither as a Table or native data model depending on the\n<tt class=\"docutils literal\">native</tt> argument.</p>\n</div>\n",
      "shortdoc": "Refreshes the current sheet from the API and returns it either as a Table or native data model depending on the ``native`` argument.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 569
    },
    {
      "name": "Search",
      "args": [
        {
          "name": "query",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "query: str"
        },
        {
          "name": "location",
          "types": [
            "str",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "location: str | None = None"
        },
        {
          "name": "modified_since",
          "types": [
            "int",
            "str",
            "None"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "modified_since: int | str | None = None"
        },
        {
          "name": "include",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "include: str | List[Any] | None = None"
        },
        {
          "name": "scopes",
          "types": [
            "str",
            "List[Any]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[Any]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "scopes: str | List[Any] | None = None"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Searches for all sheets for text matching the query. Returns\na list of native Smartsheet Sheet objects. You can use the\nadditional parameters to filter the search and increase speed.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param query:</th><td class=\"field-body\"><p class=\"first\">The text to search for.</p>\n</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param location:</th><td class=\"field-body\"><p class=\"first\">The location to search. When specified with\na value of <tt class=\"docutils literal\">personalWorkspace</tt>, the search will be limited\nto the current user's personal workspace.</p>\n</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param modified_since:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\"><p class=\"first\">The date to search from. This can be\neither a string or an integer. If an integer is provided, it\nwill be interpreted as a Unix timestamp. If a string is\nprovided, it will be parsed via the Robot Framework time\nutilities, so you can provided it using keywords like\n<tt class=\"docutils literal\">NOW - 1 day</tt>.</p>\n</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param include:</th><td class=\"field-body\"><p class=\"first\">When specified with the value of <tt class=\"docutils literal\">favoriteFlag</tt>,\nresults will either include a <tt class=\"docutils literal\">favorite</tt> attribute or\n<tt class=\"docutils literal\">parentObjectFavorite</tt> attribute depending on the type of\nobject found by the search engine.</p>\n</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param scopes:</th><td class=\"field-body\"><p class=\"first\">If search fails, try using an array for each type\nof this comma-separated list of search filters. The following\nstrings can be used to filter the search results:</p>\n<blockquote class=\"last\">\n<ul class=\"simple\">\n<li><tt class=\"docutils literal\">attachments</tt>: Search in attachments.</li>\n<li><tt class=\"docutils literal\">cellData</tt>: Search in cell data.</li>\n<li><tt class=\"docutils literal\">comments</tt>: Search in comments.</li>\n<li><tt class=\"docutils literal\">folderNames</tt>: Search in folder names.</li>\n<li><tt class=\"docutils literal\">reportNames</tt>: Search in report names.</li>\n<li><tt class=\"docutils literal\">sheetNames</tt>: Search in sheet names.</li>\n<li><tt class=\"docutils literal\">sightNames</tt>: Search in sight names.</li>\n<li><tt class=\"docutils literal\">summaryFields</tt>: Search in summary fields.</li>\n<li><tt class=\"docutils literal\">templateNames</tt>: Search in template names.</li>\n<li><tt class=\"docutils literal\">workspaceNames</tt>: Search in workspace names.</li>\n</ul>\n</blockquote>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${sheets}=</span><span class=\"p\">  </span><span class=\"c\">Search</span><span class=\"p\">  </span><span class=\"c\">my search query</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${sheet}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{sheets}</span><span class=\"p\">\n    </span><span class=\"c\">Log</span><span class=\"p\">  </span><span class=\"c\">${sheet.name}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">sheets</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"s2\">&quot;my search query&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">sheet</span> <span class=\"ow\">in</span> <span class=\"n\">sheets</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Searches for all sheets for text matching the query. Returns a list of native Smartsheet Sheet objects. You can use the additional parameters to filter the search and increase speed.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 684
    },
    {
      "name": "Set Access Token",
      "args": [
        {
          "name": "access_token",
          "types": [
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "access_token: str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Sets the access token to be used when accessing the\nSmartsheet API.</p>\n<p>Learn more about authenticating to Smartsheets\n<a class=\"reference external\" href=\"https://smartsheet.redoc.ly/#section/API-Basics/Raw-Token-Requests\">here</a>.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param access_token:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">The access token created for your\nSmartsheet user.</td>\n</tr>\n</tbody>\n</table>\n<p>Example:</p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">Set Access Token</span><span class=\"p\">  </span><span class=\"c\">${access_token}</span>\n</pre>\n<pre class=\"code python literal-block\">\n<span class=\"n\">smartsheet</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"c1\"># or</span><span class=\"w\">\n</span><span class=\"n\">smartsheet</span><span class=\"o\">.</span><span class=\"n\">set_access_token</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Sets the access token to be used when accessing the Smartsheet API.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 229
    },
    {
      "name": "Set Max Retry Time",
      "args": [
        {
          "name": "max_retry_time",
          "types": [
            "str",
            "int"
          ],
          "typedocs": {
            "str": "string",
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "max_retry_time: str | int"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Sets the max retry time to use when sending requests to the\nSmartsheet API. Returns the current max retry time.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\" colspan=\"2\">param max_retry_time:</th></tr>\n<tr class=\"field\"><td>&nbsp;</td><td class=\"field-body\">Maximum time to allow retries of API\ncalls. Can be provided as a time string or int.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Sets the max retry time to use when sending requests to the Smartsheet API. Returns the current max retry time.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 254
    },
    {
      "name": "Set Row",
      "args": [
        {
          "name": "row",
          "types": [
            "int",
            "Row"
          ],
          "typedocs": {
            "int": "integer"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "row: int | Row"
        },
        {
          "name": "data",
          "types": [
            "Dict",
            "List[Dict]",
            "Row",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "List[Dict]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "data: Dict | List[Dict] | Row | None = None"
        },
        {
          "name": "native",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "native: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Updates a single row of the current sheet with the provided data.</p>\n<p>You can provide the row as a native <tt class=\"docutils literal\">Row</tt> object or as an\ninteger representing the row ID. You may omit the <tt class=\"docutils literal\">data</tt>\nargument if you are providing a native <tt class=\"docutils literal\">Row</tt> object.</p>\n<p>You can provide the data in several ways:</p>\n<ul class=\"simple\">\n<li>As a dictionary: the keys of the dictionary are the\ncolumn IDs or Titles and the values are the values for the\ncells.</li>\n<li>As a list of dictionaries: each dictionary is a cell. The keys\nof the dictionary should match cell attributes, e.g., <tt class=\"docutils literal\">column_id</tt>,\n<tt class=\"docutils literal\">title</tt>, <tt class=\"docutils literal\">value</tt>, etc. See the <a class=\"reference external\" href=\"https://smartsheet.redoc.ly/tag/rows#operation/update-rows\">smartsheet API docs</a> for more\ninformation. The dictionary keys must be provided in snake case.\nYou must use this method to set formulas on the row.</li>\n<li>As a native <tt class=\"docutils literal\">Row</tt> object: a native object from the API with\nnew values for the cells.</li>\n</ul>\n<p>For examples, see <tt class=\"docutils literal\">Set Rows</tt>.</p>\n</div>\n",
      "shortdoc": "Updates a single row of the current sheet with the provided data.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1140
    },
    {
      "name": "Set Rows",
      "args": [
        {
          "name": "data",
          "types": [
            "List",
            "Table"
          ],
          "typedocs": {
            "List": "list"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "data: List | Table"
        },
        {
          "name": "native",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "native: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Updates rows of the current sheet with the provided data.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">In order to update rows, you must identify the rows to the\nAPI. You can do this by providing the <tt class=\"docutils literal\">rowId</tt> or <tt class=\"docutils literal\">rowNumber</tt>\nas a column in the data. The ID must be the API ID, while the\nnumber is the row number per the UI. This can only be excluded\nif the length of the data matches the length of the sheet.</p>\n</div>\n<p>You can provide the data in several ways:</p>\n<ul class=\"simple\">\n<li>As a list of dictionaries: each list item represents a row\nas a single dictionary. The keys of the dictionary are the\ncolumn IDs or Titles and the values are the values for the\ncells.</li>\n<li>As a list of lists of dictionaries: each sub list item is\na row and each dictionary is a cell. The keys of the dictionary\nshould match cell attributes, e.g., <tt class=\"docutils literal\">column_id</tt>, <tt class=\"docutils literal\">title</tt>,\n<tt class=\"docutils literal\">value</tt>, etc. See the <a class=\"reference external\" href=\"https://smartsheet.redoc.ly/tag/rows#operation/update-rows\">smartsheet API docs</a> for more\ninformation. The dictionary keys must be provided in snake\ncase. You must use this method to set formulas on the row.</li>\n<li>As a list of native <tt class=\"docutils literal\">Row</tt> objects: each <tt class=\"docutils literal\">Row</tt> object is a\nnative object from the API with new values for the cells.</li>\n<li>As a <tt class=\"docutils literal\">Table</tt> object: the columns of the Table must either\nbe the column IDs or Titles.</li>\n</ul>\n<p>Examples:</p>\n<p><em>Robot Framework:</em></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"c\">${row1}=</span><span class=\"p\">  </span><span class=\"c\">Create Dictionary</span><span class=\"p\">  </span><span class=\"c\">rowId=123</span><span class=\"p\">  </span><span class=\"c\">column1=value1</span><span class=\"p\">  </span><span class=\"c\">column2=value2</span><span class=\"p\">\n</span><span class=\"c\">${row2}=</span><span class=\"p\">  </span><span class=\"c\">Create Dictionary</span><span class=\"p\">  </span><span class=\"c\">rowId=456</span><span class=\"p\">  </span><span class=\"c\">column1=value3</span><span class=\"p\">  </span><span class=\"c\">column2=value4</span><span class=\"p\">\n</span><span class=\"c\">${row3}=</span><span class=\"p\">  </span><span class=\"c\">Create Dictionary</span><span class=\"p\">  </span><span class=\"c\">rowId=789</span><span class=\"p\">  </span><span class=\"c\">column1=value5</span><span class=\"p\">  </span><span class=\"c\">column2=value6</span><span class=\"p\">\n</span><span class=\"c\">${data} =</span><span class=\"p\">  </span><span class=\"c\">Create List</span><span class=\"p\">  </span><span class=\"c\">${row1}</span><span class=\"p\">  </span><span class=\"c\">${row2}</span><span class=\"p\">  </span><span class=\"c\">${row3}</span><span class=\"p\">\n</span><span class=\"c\">Set Rows</span><span class=\"p\">  </span><span class=\"c\">${data}</span><span class=\"p\">\n\n</span><span class=\"c\"># Or work with native row objects to update them.\n${row1}=</span><span class=\"p\">  </span><span class=\"c\">Get Row</span><span class=\"p\">  </span><span class=\"c\">123</span><span class=\"p\">\n</span><span class=\"c\">FOR</span><span class=\"p\">  </span><span class=\"c\">${cell}</span><span class=\"p\">  </span><span class=\"c\">IN</span><span class=\"p\">  </span><span class=\"c\">&#64;{row1.cells}</span><span class=\"p\">\n    </span><span class=\"c\">IF</span><span class=\"p\">  </span><span class=\"c\">${cell.column_id} == 123</span><span class=\"p\">\n        </span><span class=\"c\">${cell.value}=</span><span class=\"p\">  </span><span class=\"c\">Set Variable</span><span class=\"p\">  </span><span class=\"c\">New Value</span><span class=\"p\">\n    </span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">END</span><span class=\"p\">\n</span><span class=\"c\">${data}=</span><span class=\"p\">  </span><span class=\"c\">Create List</span><span class=\"p\">  </span><span class=\"c\">${row1}</span><span class=\"p\">\n</span><span class=\"c\">Set Rows</span><span class=\"p\">  </span><span class=\"c\">${data}</span>\n</pre>\n<p><em>Python:</em></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">ss</span> <span class=\"o\">=</span> <span class=\"n\">Smartsheet</span><span class=\"p\">(</span><span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"n\">access_token</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">row1</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;rowId&quot;</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column2&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value2&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">row2</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;rowId&quot;</span><span class=\"p\">:</span> <span class=\"mi\">456</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value3&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column2&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value4&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">row3</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;rowId&quot;</span><span class=\"p\">:</span> <span class=\"mi\">789</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column1&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value5&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;column2&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value6&quot;</span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">,</span> <span class=\"n\">row2</span><span class=\"p\">,</span> <span class=\"n\">row3</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">set_rows</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\">\n\n</span><span class=\"c1\"># or work with native row objects to update them.</span><span class=\"w\">\n</span><span class=\"n\">row1</span> <span class=\"o\">=</span> <span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">get_row</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">cell</span> <span class=\"ow\">in</span> <span class=\"n\">row1</span><span class=\"o\">.</span><span class=\"n\">cells</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"k\">if</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">column_id</span> <span class=\"o\">==</span> <span class=\"mi\">123</span><span class=\"p\">:</span><span class=\"w\">\n</span>        <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;New Value&quot;</span><span class=\"w\">\n</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">row1</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">ss</span><span class=\"o\">.</span><span class=\"n\">set_rows</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Updates rows of the current sheet with the provided data.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 1048
    },
    {
      "name": "Unselect Current Sheet",
      "args": [],
      "doc": "<div class=\"document\">\n<p>Resets the current sheet to <cite>None</cite>.</p>\n</div>\n",
      "shortdoc": "Resets the current sheet to `None`.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 416
    },
    {
      "name": "Update Column",
      "args": [
        {
          "name": "column",
          "types": [
            "int",
            "str",
            "Column"
          ],
          "typedocs": {
            "int": "integer",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "column: int | str | Column"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Updates a column in the current sheet. See the <tt class=\"docutils literal\">Add Column</tt> keyword\nfor a list of supported attributes.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param column:</th><td class=\"field-body\">Column ID or title.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param kwargs:</th><td class=\"field-body\">Column attributes to update. See <tt class=\"docutils literal\">Add Column</tt> keyword\nfor a list of supported attributes.</td>\n</tr>\n</tbody>\n</table>\n</div>\n",
      "shortdoc": "Updates a column in the current sheet. See the ``Add Column`` keyword for a list of supported attributes.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/Smartsheet.py",
      "lineno": 924
    }
  ],
  "dataTypes": {
    "enums": [],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Add Column",
        "Add Rows",
        "Get Row",
        "Get Sheet",
        "List Sheets",
        "Refresh Sheet",
        "Set Row",
        "Set Rows"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Download Attachment",
        "Set Row"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Standard",
      "name": "integer",
      "doc": "<p>Conversion is done using Python's <a href=\"https://docs.python.org/library/functions.html#int\">int</a> built-in function. Floating point numbers are accepted only if they can be represented as integers exactly. For example, <code>1.0</code> is accepted and <code>1.1</code> is not.</p>\n<p>Starting from RF 4.1, it is possible to use hexadecimal, octal and binary numbers by prefixing values with <code>0x</code>, <code>0o</code> and <code>0b</code>, respectively.</p>\n<p>Starting from RF 4.1, spaces and underscores can be used as visual separators for digit grouping purposes.</p>\n<p>Examples: <code>42</code>, <code>-1</code>, <code>0b1010</code>, <code>10 000 000</code>, <code>0xBAD_C0FFEE</code></p>",
      "usages": [
        "__init__",
        "Add Column",
        "Create Sheet",
        "Download Attachment",
        "Get Cell History",
        "Get Row",
        "Get Sheet",
        "Get Sheet Owner",
        "List Columns",
        "List Sheet Filters",
        "Search",
        "Set Max Retry Time",
        "Set Row",
        "Update Column"
      ],
      "accepts": [
        "string",
        "float"
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Add Column",
        "Add Columns",
        "Add Rows",
        "Create Sheet",
        "Get Row",
        "Get Sheet",
        "Search",
        "Set Row",
        "Set Rows"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "__init__",
        "Add Column",
        "Add Columns",
        "Convert Sheet To Table",
        "Create Sheet",
        "Download Attachment",
        "Get Row",
        "Get Sheet",
        "Get Sheet Owner",
        "List Columns",
        "List Sheet Filters",
        "Search",
        "Set Row"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "__init__",
        "Add Column",
        "Create Sheet",
        "Download Attachment",
        "Get Cell History",
        "Get Row",
        "Get Sheet",
        "Get Sheet Owner",
        "List Columns",
        "List Sheet Filters",
        "Search",
        "Set Access Token",
        "Set Max Retry Time",
        "Update Column"
      ],
      "accepts": [
        "Any"
      ]
    }
  ]
}