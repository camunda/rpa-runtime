{
  "specversion": 1,
  "name": "RPA.DocumentAI",
  "doc": "<div class=\"document\">\n<p>Wrapper library offering generic keywords for initializing, scanning and\nretrieving results as fields from documents (PDF, PNG etc.).</p>\n<p>Library requires at the minimum <cite>rpaframework</cite> version <strong>19.0.0</strong>.</p>\n<p>This is a helper facade for the following libraries:</p>\n<ul class=\"simple\">\n<li>RPA.Cloud.Google (requires <cite>rpaframework-google</cite>)</li>\n<li>RPA.DocumentAI.Base64AI</li>\n<li>RPA.DocumentAI.Nanonets</li>\n</ul>\n<p>Where the following steps are required:</p>\n<ol class=\"arabic simple\">\n<li>Engine initialization: <tt class=\"docutils literal\">Init Engine</tt></li>\n<li>Document scan: <tt class=\"docutils literal\">Predict</tt></li>\n<li>Result retrieval: <tt class=\"docutils literal\">Get Result</tt></li>\n</ol>\n<p>So no matter the engine you're using, the very same keywords can be used, as only\nthe passed parameters will differ (please check the docs on each library for\nparticularities). Once initialized, you can jump between the engines with\n<tt class=\"docutils literal\">Switch Engine</tt>. Before scanning documents, you must configure the service first,\nwith a model to scan the files with and an API key for authorizing the access.</p>\n<p>See Portal example: <a class=\"reference external\" href=\"https://robocorp.com/portal/robot/robocorp/example-document-ai\">https://robocorp.com/portal/robot/robocorp/example-document-ai</a></p>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">RPA.DocumentAI</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Scan Documents</span><span class=\"p\">\n    </span><span class=\"nf\">Init Engine</span><span class=\"p\">    </span><span class=\"s\">base64ai</span><span class=\"p\">    </span><span class=\"s\">vault=document_ai:base64ai</span><span class=\"p\">\n    </span><span class=\"nf\">Init Engine</span><span class=\"p\">    </span><span class=\"s\">nanonets</span><span class=\"p\">    </span><span class=\"s\">vault=document_ai:nanonets</span><span class=\"p\">\n\n    </span><span class=\"nf\">Switch Engine</span><span class=\"p\">   </span><span class=\"s\">base64ai</span><span class=\"p\">\n    </span><span class=\"nf\">Predict</span><span class=\"p\">    </span><span class=\"s\">invoice.png</span><span class=\"p\">\n    ${</span><span class=\"nv\">data</span><span class=\"p\">} =    </span><span class=\"nf\">Get Result</span><span class=\"p\">\n    </span><span class=\"nf\">Log List</span><span class=\"p\">    ${</span><span class=\"nv\">data</span><span class=\"p\">}\n\n    </span><span class=\"nf\">Switch Engine</span><span class=\"p\">   </span><span class=\"s\">nanonets</span><span class=\"p\">\n    </span><span class=\"nf\">Predict</span><span class=\"p\">    </span><span class=\"s\">invoice.png</span><span class=\"p\">      </span><span class=\"s\">model=858e4b37-6679-4552-9481-d5497dfc0b4a</span><span class=\"p\">\n    ${</span><span class=\"nv\">data</span><span class=\"p\">} =    </span><span class=\"nf\">Get Result</span><span class=\"p\">\n    </span><span class=\"nf\">Log List</span><span class=\"p\">    ${</span><span class=\"nv\">data</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.DocumentAI</span> <span class=\"kn\">import</span> <span class=\"n\">DocumentAI</span><span class=\"p\">,</span> <span class=\"n\">EngineName</span><span class=\"w\">\n\n</span><span class=\"n\">lib_docai</span> <span class=\"o\">=</span> <span class=\"n\">DocumentAI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">init_engine</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"n\">EngineName</span><span class=\"o\">.</span><span class=\"n\">GOOGLE</span><span class=\"p\">,</span> <span class=\"n\">vault</span><span class=\"o\">=</span><span class=\"s2\">&quot;document_ai:serviceaccount&quot;</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">&quot;eu&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"w\">\n</span>    <span class=\"s2\">&quot;invoice.pdf&quot;</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s2\">&quot;df1d166771005ff4&quot;</span><span class=\"p\">,</span><span class=\"w\">\n</span>    <span class=\"n\">project_id</span><span class=\"o\">=</span><span class=\"s2\">&quot;complete-agency-347912&quot;</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s2\">&quot;eu&quot;</span><span class=\"w\">\n</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">())</span>\n</pre>\n</div>\n",
  "version": "",
  "generated": "2024-10-30 10:09:53",
  "type": "LIBRARY",
  "scope": "GLOBAL",
  "docFormat": "HTML",
  "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/DocumentAI.py",
  "lineno": 47,
  "tags": [],
  "inits": [],
  "keywords": [
    {
      "name": "Get Result",
      "args": [
        {
          "name": "extended",
          "types": [
            "bool"
          ],
          "typedocs": {
            "bool": "boolean"
          },
          "defaultValue": "False",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "extended: bool = False"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Retrieve the result data previously obtained with <tt class=\"docutils literal\">Predict</tt>.</p>\n<p>The stored raw result is usually pre-processed with a library specific keyword\nprior the return.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param extended:</th><td class=\"field-body\">Get all the details inside the result data. (main fields only\nby default)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">returns:</th><td class=\"field-body\">Usually a list of fields detected in the document.</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Scan With Base64</span><span class=\"p\">\n    </span><span class=\"nf\">Document AI Base64</span><span class=\"p\">\n    ${</span><span class=\"nv\">data</span><span class=\"p\">} =    </span><span class=\"nf\">Get Result</span><span class=\"p\">\n    </span><span class=\"nf\">Log List</span><span class=\"p\">    ${</span><span class=\"nv\">data</span><span class=\"p\">}</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">get_result</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">result</span><span class=\"p\">:</span><span class=\"w\">\n</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Retrieve the result data previously obtained with ``Predict``.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/DocumentAI.py",
      "lineno": 464
    },
    {
      "name": "Init Engine",
      "args": [
        {
          "name": "name",
          "types": [
            "EngineName",
            "str"
          ],
          "typedocs": {
            "EngineName": "EngineName",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: EngineName | str"
        },
        {
          "name": "secret",
          "types": [
            "str",
            "Path",
            "Tuple",
            "List",
            "Dict",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "Tuple": "tuple",
            "List": "list",
            "Dict": "dictionary",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "secret: str | Path | Tuple | List | Dict | None = None"
        },
        {
          "name": "vault",
          "types": [
            "Dict",
            "str",
            "None"
          ],
          "typedocs": {
            "Dict": "dictionary",
            "str": "string",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "vault: Dict | str | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Initialize the engine you want to scan documents with.</p>\n<p>This is required before being able to run <tt class=\"docutils literal\">Predict</tt>. Once initialized, you\ndon't need to run this again, simply use <tt class=\"docutils literal\">Switch Engine</tt> to jump between\nthe engines. The final secret value (passed directly with <cite>secret</cite> or picked up\nautomatically from the Vault with <cite>vault</cite>) will be split into authorization\nargs and kwargs or just passed as it is to the wrapped library. Keep in mind\nthat some engines are expecting API keys where others tokens or private keys.\nAny optional keyword argument will be passed further in the wrapped library.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of the engine.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param secret:</th><td class=\"field-body\">Authenticate with a string/file/object secret directly.</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param vault:</th><td class=\"field-body\">Specify the Vault storage <cite>name</cite> and secret <cite>key</cite> in order to\nauthenticate. ('name:key' or {name: key} formats are supported)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>How secret resolution works</strong></p>\n<p>When <cite>vault</cite> is passed in, the corresponding Vault is retrieved and the value\nbelonging to specified field is returned as a secret. If a <cite>secret</cite> is used,\nthen this value is returned as it is if this isn't a path pointing to the file\nholding the value to be returned. We'll be relying on environment variables in\nthe absence of both the <cite>secret</cite> and <cite>vault</cite>.</p>\n<p>Expected secret value formats:</p>\n<ul class=\"simple\">\n<li>google: <cite>&lt;json-service/token&gt;</cite> (<tt class=\"docutils literal\">RPA.Cloud.Google.Init Document AI</tt>)</li>\n<li>base64ai: <cite>&lt;e-mail&gt;,&lt;api-key&gt;</cite>\n(<tt class=\"docutils literal\">RPA.DocumentAI.Base64AI.Set Authorization</tt>)</li>\n<li>nanonets: <cite>&lt;api-key&gt;</cite> (<tt class=\"docutils literal\">RPA.DocumentAI.Nanonets.Set Authorization</tt>)</li>\n</ul>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Init Base64</span><span class=\"p\">\n    </span><span class=\"nf\">Init Engine</span><span class=\"p\">    </span><span class=\"s\">base64ai</span><span class=\"p\">    </span><span class=\"s\">vault=document_ai:base64ai</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"kn\">from</span> <span class=\"nn\">RPA.DocumentAI</span> <span class=\"kn\">import</span> <span class=\"n\">DocumentAI</span><span class=\"w\">\n</span><span class=\"kn\">from</span> <span class=\"nn\">RPA.Robocorp.Vault</span> <span class=\"kn\">import</span> <span class=\"n\">Vault</span><span class=\"w\">\n\n</span><span class=\"n\">lib_docai</span> <span class=\"o\">=</span> <span class=\"n\">DocumentAI</span><span class=\"p\">()</span><span class=\"w\">\n</span><span class=\"n\">mail_apikey</span> <span class=\"o\">=</span> <span class=\"n\">Vault</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_secret</span><span class=\"p\">(</span><span class=\"s2\">&quot;document_ai&quot;</span><span class=\"p\">)[</span><span class=\"s2\">&quot;base64ai&quot;</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">init_engine</span><span class=\"p\">(</span><span class=\"s2\">&quot;base64ai&quot;</span><span class=\"p\">,</span> <span class=\"n\">secret</span><span class=\"o\">=</span><span class=\"n\">mail_apikey</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Initialize the engine you want to scan documents with.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/DocumentAI.py",
      "lineno": 308
    },
    {
      "name": "Predict",
      "args": [
        {
          "name": "location",
          "types": [
            "Path",
            "str"
          ],
          "typedocs": {
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "location: Path | str"
        },
        {
          "name": "model",
          "types": [
            "str",
            "List[str]",
            "None"
          ],
          "typedocs": {
            "str": "string",
            "List[str]": "list",
            "None": "None"
          },
          "defaultValue": "None",
          "kind": "POSITIONAL_OR_NAMED",
          "required": false,
          "repr": "model: str | List[str] | None = None"
        },
        {
          "name": "kwargs",
          "types": [],
          "typedocs": {},
          "defaultValue": null,
          "kind": "VAR_NAMED",
          "required": false,
          "repr": "**kwargs"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Scan a document with the currently active engine and store the result\ninternally for a later retrieval.</p>\n<p>Based on the selected engine, this wraps a chain of libraries until calling a\nservice API in the end, where the passed file is analyzed. Any optional keyword\nargument will be passed further in the wrapped library. (some engines require\nmandatory parameters like project ID or region)</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param location:</th><td class=\"field-body\">Path to a local file or URL address of a remote one. (not all\nengines work with URLs)</td>\n</tr>\n<tr class=\"field\"><th class=\"field-name\">param model:</th><td class=\"field-body\">Model name(s) to scan with. (some engines guess the model if\nnot specified)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Document AI Base64</span><span class=\"p\">\n    [</span><span class=\"kn\">Setup</span><span class=\"p\">]    </span><span class=\"nf\">Init Base64</span><span class=\"p\">\n    </span><span class=\"nf\">Predict</span><span class=\"p\">    </span><span class=\"s\">https://site.com/path/to/invoice.png</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"s2\">&quot;local/path/to/invoice.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"s2\">&quot;finance/invoice&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Scan a document with the currently active engine and store the result internally for a later retrieval.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/DocumentAI.py",
      "lineno": 392
    },
    {
      "name": "Switch Engine",
      "args": [
        {
          "name": "name",
          "types": [
            "EngineName",
            "str"
          ],
          "typedocs": {
            "EngineName": "EngineName",
            "str": "string"
          },
          "defaultValue": null,
          "kind": "POSITIONAL_OR_NAMED",
          "required": true,
          "repr": "name: EngineName | str"
        }
      ],
      "doc": "<div class=\"document\">\n<p>Switch between already initialized engines.</p>\n<p>Use this to jump between engines when scanning with multiple of them.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field\"><th class=\"field-name\">param name:</th><td class=\"field-body\">Name of the engine to be set as active. (choose between: google, base64ai, nanonets)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example: Robot Framework</strong></p>\n<pre class=\"code robotframework literal-block\">\n<span class=\"gh\">*** Tasks ***</span><span class=\"p\">\n</span><span class=\"gu\">Document AI All</span><span class=\"p\">\n    &#64;{</span><span class=\"nv\">engines</span><span class=\"p\">} =    </span><span class=\"nf\">Create List</span><span class=\"p\">     </span><span class=\"s\">base64ai</span><span class=\"p\">    </span><span class=\"s\">nanonets</span><span class=\"p\">\n    </span><span class=\"nf\">FOR</span><span class=\"p\">    ${</span><span class=\"nv\">engine</span><span class=\"p\">}    </span><span class=\"s\">IN</span><span class=\"p\">    &#64;{</span><span class=\"nv\">engines</span><span class=\"p\">}\n        </span><span class=\"nf\">Switch Engine</span><span class=\"p\">    ${</span><span class=\"nv\">engine</span><span class=\"p\">}\n        </span><span class=\"nf\">Log</span><span class=\"p\">    </span><span class=\"s\">Scanning with engine: </span><span class=\"p\">${</span><span class=\"nv\">engine</span><span class=\"p\">}</span><span class=\"s\">...</span><span class=\"p\">\n        </span><span class=\"nf\">Predict</span><span class=\"p\">    </span><span class=\"s\">invoice.png</span><span class=\"p\">\n        ${</span><span class=\"nv\">data</span><span class=\"p\">} =    </span><span class=\"nf\">Get Result</span><span class=\"p\">\n        </span><span class=\"nf\">Log List</span><span class=\"p\">    ${</span><span class=\"nv\">data</span><span class=\"p\">}\n    </span><span class=\"nf\">END</span>\n</pre>\n<p><strong>Example: Python</strong></p>\n<pre class=\"code python literal-block\">\n<span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">switch_engine</span><span class=\"p\">(</span><span class=\"s2\">&quot;base64ai&quot;</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"n\">lib_docai</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"s2\">&quot;invoice.png&quot;</span><span class=\"p\">)</span>\n</pre>\n</div>\n",
      "shortdoc": "Switch between already initialized engines.",
      "tags": [],
      "source": "/home/stamm/Develop/RPA/worker/.venv/lib/python3.10/site-packages/RPA/DocumentAI/DocumentAI.py",
      "lineno": 265
    }
  ],
  "dataTypes": {
    "enums": [
      {
        "type": "Enum",
        "name": "EngineName",
        "doc": "<div class=\"document\">\n<p>Supported engines to process documents with.</p>\n</div>\n",
        "members": [
          {
            "name": "GOOGLE",
            "value": "google"
          },
          {
            "name": "BASE64",
            "value": "base64ai"
          },
          {
            "name": "NANONETS",
            "value": "nanonets"
          }
        ]
      }
    ],
    "typedDicts": []
  },
  "typedocs": [
    {
      "type": "Standard",
      "name": "boolean",
      "doc": "<p>Strings <code>TRUE</code>, <code>YES</code>, <code>ON</code> and <code>1</code> are converted to Boolean <code>True</code>, the empty string as well as strings <code>FALSE</code>, <code>NO</code>, <code>OFF</code> and <code>0</code> are converted to Boolean <code>False</code>, and the string <code>NONE</code> is converted to the Python <code>None</code> object. Other strings and other accepted values are passed as-is, allowing keywords to handle them specially if needed. All string comparisons are case-insensitive.</p>\n<p>Examples: <code>TRUE</code> (converted to <code>True</code>), <code>off</code> (converted to <code>False</code>), <code>example</code> (used as-is)</p>",
      "usages": [
        "Get Result"
      ],
      "accepts": [
        "string",
        "integer",
        "float",
        "None"
      ]
    },
    {
      "type": "Standard",
      "name": "dictionary",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#dict\">dictionary</a> literals. They are converted to actual dictionaries using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including dictionaries and other containers.</p>\n<p>Examples: <code>{'a': 1, 'b': 2}</code>, <code>{'key': 1, 'nested': {'key': 2}}</code></p>",
      "usages": [
        "Init Engine"
      ],
      "accepts": [
        "string",
        "Mapping"
      ]
    },
    {
      "type": "Enum",
      "name": "EngineName",
      "doc": "<div class=\"document\">\n<p>Supported engines to process documents with.</p>\n</div>\n",
      "usages": [
        "Init Engine",
        "Switch Engine"
      ],
      "accepts": [
        "string"
      ],
      "members": [
        {
          "name": "GOOGLE",
          "value": "google"
        },
        {
          "name": "BASE64",
          "value": "base64ai"
        },
        {
          "name": "NANONETS",
          "value": "nanonets"
        }
      ]
    },
    {
      "type": "Standard",
      "name": "list",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#list\">list</a> literals. They are converted to actual lists using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including lists and other containers.</p>\n<p>Examples: <code>['one', 'two']</code>, <code>[('one', 1), ('two', 2)]</code></p>",
      "usages": [
        "Init Engine",
        "Predict"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    },
    {
      "type": "Standard",
      "name": "None",
      "doc": "<p>String <code>NONE</code> (case-insensitive) is converted to Python <code>None</code> object. Other values cause an error.</p>",
      "usages": [
        "Init Engine",
        "Predict"
      ],
      "accepts": [
        "string"
      ]
    },
    {
      "type": "Standard",
      "name": "string",
      "doc": "<p>All arguments are converted to Unicode strings.</p>",
      "usages": [
        "Init Engine",
        "Predict",
        "Switch Engine"
      ],
      "accepts": [
        "Any"
      ]
    },
    {
      "type": "Standard",
      "name": "tuple",
      "doc": "<p>Strings must be Python <a href=\"https://docs.python.org/library/stdtypes.html#tuple\">tuple</a> literals. They are converted to actual tuples using the <a href=\"https://docs.python.org/library/ast.html#ast.literal_eval\">ast.literal_eval</a> function. They can contain any values <code>ast.literal_eval</code> supports, including tuples and other containers.</p>\n<p>Examples: <code>('one', 'two')</code>, <code>(('one', 1), ('two', 2))</code></p>",
      "usages": [
        "Init Engine"
      ],
      "accepts": [
        "string",
        "Sequence"
      ]
    }
  ]
}